# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['typ']

package_data = \
{'': ['*']}

install_requires = \
['typing_inspect>=0.6.0,<0.7.0']

setup_kwargs = {
    'name': 'typjson',
    'version': '0.0.23',
    'description': 'Type-safe JSON (de)serialization',
    'long_description': '# typjson\n\nType-safe JSON (de)serialization for Python. Compatible with mypy type hints.\n\n## Requirements\n\n* Python 3.7 or newer\n\n## Features\n\n* Support for primitive types:\n    * `str`, `int`, `float`, `bool`, `Decimal`, `None`\n    * `date` as `"%Y-%m-%d"`, `datetime` as `"%Y-%m-%dT%H:%M:%S%z"`, `time` as `"%H:%M:%S"`\n    * `UUID` as `str` in format `"8-4-4-4-12"`\n    * `char` type as `str` of length 1 \n* Support for `Union[]` and therefore `Optional[]` type\n* Structure types: `List[]`, `Tuple[]`, `Dict[str, T]`, `Set[]`\n* Support for [data classes](https://docs.python.org/3/library/dataclasses.html)\n* Support for custom encoders and decoders\n\n## Simple Usage\n\n```python\nfrom typ import json\nfrom typing import *\nfrom datetime import date\nfrom dataclasses import dataclass\n\n\n@dataclass\nclass Address:\n    street: str\n    house: int\n    apt: Optional[str]\n\n\n@dataclass\nclass Person:\n    first_name: str\n    last_name: str\n    languages: List[str]\n    address: Address\n    birth_date: date\n\n\nperson = Person(\n    "John",\n    "Smith",\n    ["English", "Russian"],\n    Address("Main", 1, "2A"),\n    date(year=1984, month=8, day=1)\n)\n\njson_str = json.dumps(person, indent=2)\nloaded_person = json.loads(Person, json_str)\n\nassert person == loaded_person\n```\n\nValue of `json_str` that is dumped and loaded in the code example above looks like:\n```json\n{\n  "first_name": "John",\n  "last_name": "Smith",\n  "languages": [\n    "English",\n    "Russian"\n  ],\n  "address": {\n    "street": "Main",\n    "house": 1,\n    "apt": "2A"\n  },\n  "birth_date": "1984-08-01"\n}\n```\n\n## API Overview\n\ntypjson API is similar to [json](https://docs.python.org/3/library/json.html) module. Main functions are defined in `typ.json` module. In fact `typ.json` functions are using `json` module under the hood for final conversion of python structures into JSON.\n\n### typ.json.dumps\n\n`typ.json.dumps(value: M, typ: Optional[Type[M]] = None, encoders: List[EncodeFunc] = [], indent: Optional[int] = None) -> str`\n\nSerialize value to a JSON formatted str using specified type.\n\n`value` Python object to be serialized to JSON.\n\n`typ` type information for `value`. If `None` is provided then actual type of `value` is used otherwise `value` is checked to be valid instance of `typ`.\n\n`encoders` list of custom encoders, see [custom encoding](#custom-encoding).\n\n`indent` optional non-negative indent level for JSON. If `None` is provided then JSON is represented as single line without indentation.\n\nReturns JSON string or raises `JsonError`.\n\n### typ.json.dump\n\n`typ.json.dump(fp: IO[str], value: M, typ: Optional[Type[M]] = None, encoders: List[EncodeFunc] = [], indent: Optional[int] = None)`\n\nSerialize value as a JSON formatted stream.\n\n`fp` stream to write JSON to.\n\nOther arguments have the same meaning as in [typ.json.dumps](#typjsondumps).\n\n### typ.json.loads\n\n`typ.json.loads(typ: Type[M], json_str: str, decoders: List[DecodeFunc] = []) -> M`\n\nDeserialize json_str to a Python object of specified type.\n\n`typ` type to deserialize JSON into.\n\n`json_str` string containing JSON.\n\n`decoders` list of custom decoders, see [custom encoding](#custom-encoding).\n\nReturns instance of `M` or raises `JsonError`.\n\n### typ.json.load\n\n`typ.json.load(fp: IO[str], typ: Type[M], decoders: List[DecodeFunc] = []) -> M`\n\nDeserialize stream to a Python object of specified type.\n\n`fp` stream to read JSON from.\n\nOther arguments have the same meaning as in [typ.json.loads](#typjsonloads)\n\n## Supported Types\n\n### Primitive Types\n\n| Python type                          | JSON type | Notes                                             |\n| :----------------------------------- | :-------- | :------------------------------------------------ |\n| int                                  | number    |                                                   |\n| float                                | number    |                                                   |\n| decimal.Decimal                      | number    |                                                   |\n| boolean                              | boolean   |                                                   |\n| typ.typing.char                      | string    | string with length 1                              |\n| str                                  | string    |                                                   |\n| uuid                                 | string    | lower case hex symbols with hyphens as 8-4-4-4-12 |\n| datetime.date                        | string    | ISO 8601 yyyy-mm-dd                               |\n| datetime.datetime                    | string    | ISO 8601 yyyy-mm-ddThh:mm:ss.ffffff               |\n| datetime.time                        | string    | ISO 8601 hh:mm:ss.ffffff                          |\n| typ.typing.NoneType <br/> type(None) | null      |                                                   |\n| Any                                  | any type  | represents nothing, similar to unit is some langs |\n\n### Structure Types\n\n| Python type           | JSON type     | Notes                                                             |\n| :-------------------- | :------------ | ----------------------------------------------------------------- |\n| List[T]               | array         | homogeneous, items of T                                           |\n| Dict[str, T]          | object        | with field names corresponding to dictionary keys and values of T |\n| Set[T]                | array         | homogeneous, items of T                                           |\n| Tuple[T, ...]         | array         | homogeneous, items of T                                           |\n| Union[T, K]           | either T or K |                                                                   |\n| list                  | array         | heterogeneous                                                     |\n| dict                  | object        |                                                                   |\n| tuple                 | array         | heterogeneous                                                     |\n| dataclasses.dataclass | object        | field types are respected                                         |\n\n### Null-safety\n\nAll types can not have `None` value besides `NoneType` aka `type(None)`. `Optional[T]` allows `None` value. So if nullable `str` is needed `Optional[str]` would be a good fit.\n`Optional[T]` type is in fact `Union[T, NoneType]` therefore in typjson it\'s supported via `Union[]` support. Because of this `Optional[T]` is not listed above since it\'s just a `Union`.\n\n## Custom Encoding\n',
    'author': 'Vladimir Sapronov',
    'author_email': 'vladimir.sapronov@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': None,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
