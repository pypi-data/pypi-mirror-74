#!/usr/bin/env python
from setuptools import setup
setup(
  name = 'cs.progress',
  author = 'Cameron Simpson',
  author_email = 'cs@cskk.id.au',
  version = '20200718.3',
  url = 'https://bitbucket.org/cameron_simpson/css/commits/all',
  description =
    ('A progress tracker with methods for throughput, ETA and update notification; '    
 'also a compound progress meter composed from other progress meters.'),
  long_description =
    ('A progress tracker with methods for throughput, ETA and update '    
 'notification;\n'    
 'also a compound progress meter composed from other progress meters.\n'    
 '\n'    
 '*Latest release 20200718.3*:\n'    
 'BaseProgress.bar, progressbar: new optional report_print parameter for '    
 'reporting on completion.\n'    
 '\n'    
 '## Class `BaseProgress`\n'    
 '\n'    
 'The base class for `Progress` and `OverProcess`\n'    
 'with various common methods.\n'    
 '\n'    
 'Note that durations are in seconds\n'    
 'and that absolute time is in seconds since the UNIX epoch\n'    
 '(the basis of `time.time()`).\n'    
 '\n'    
 '### Method `BaseProgress.__init__(self, name=None, start_time=None, '    
 'units_scale=None)`\n'    
 '\n'    
 'Initialise a progress instance.\n'    
 '\n'    
 'Parameters:\n'    
 '* `name`: optional name\n'    
 '* `start_time`: optional UNIX epoch start time, default from `time.time()`\n'    
 '* `units_scale`: a scale for use with `cs.units.transcribe`,\n'    
 '  default `BINARY_BYTES_SCALE`\n'    
 '\n'    
 '## Class `CheckPoint(builtins.tuple)`\n'    
 '\n'    
 'CheckPoint(time, position)\n'    
 '\n'    
 '## Class `OverProgress(BaseProgress)`\n'    
 '\n'    
 'A `Progress`-like class computed from a set of subsidiary `Progress`es.\n'    
 '\n'    
 'Example:\n'    
 '\n'    
 '    >>> P = OverProgress(name="over")\n'    
 '    >>> P1 = Progress(name="progress1", position=12)\n'    
 '    >>> P1.total = 100\n'    
 '    >>> P1.advance(7)\n'    
 '    >>> P2 = Progress(name="progress2", position=20)\n'    
 '    >>> P2.total = 50\n'    
 '    >>> P2.advance(9)\n'    
 '    >>> P.add(P1)\n'    
 '    >>> P.add(P2)\n'    
 '    >>> P1.total\n'    
 '    100\n'    
 '    >>> P2.total\n'    
 '    50\n'    
 '    >>> P.total\n'    
 '    150\n'    
 '    >>> P1.start\n'    
 '    12\n'    
 '    >>> P2.start\n'    
 '    20\n'    
 '    >>> P.start\n'    
 '    0\n'    
 '    >>> P1.position\n'    
 '    19\n'    
 '    >>> P2.position\n'    
 '    29\n'    
 '    >>> P.position\n'    
 '    16\n'    
 '\n'    
 '## Class `Progress(BaseProgress)`\n'    
 '\n'    
 'A progress counter to track task completion with various utility methods.\n'    
 '\n'    
 'Example:\n'    
 '\n'    
 '    >>> P = Progress(name="example")\n'    
 '    >>> P                         #doctest: +ELLIPSIS\n'    
 '    '    
 "Progress(name='example',start=0,position=0,start_time=...,throughput_window=None,total=None):[CheckPoint(time=..., "    
 'position=0)]\n'    
 '    >>> P.advance(5)\n'    
 '    >>> P                         #doctest: +ELLIPSIS\n'    
 '    '    
 "Progress(name='example',start=0,position=5,start_time=...,throughput_window=None,total=None):[CheckPoint(time=..., "    
 'position=0), CheckPoint(time=..., position=5)]\n'    
 '    >>> P.total = 100\n'    
 '    >>> P                         #doctest: +ELLIPSIS\n'    
 '    '    
 "Progress(name='example',start=0,position=5,start_time=...,throughput_window=None,total=100):[CheckPoint(time=..., "    
 'position=0), CheckPoint(time=..., position=5)]\n'    
 '\n'    
 'A Progress instance has an attribute ``notify_update`` which\n'    
 'is a set of callables. Whenever the position is updated, each\n'    
 'of these will be called with the `Progress` instance and the\n'    
 'latest `CheckPoint`.\n'    
 '\n'    
 '`Progress` objects also make a small pretense of being an integer.\n'    
 'The expression `int(progress)` returns the current position,\n'    
 'and `+=` and `-=` adjust the position.\n'    
 '\n'    
 'This is convenient for coding, but importantly it is also\n'    
 'useful for discretionary use of a Progress with some other\n'    
 'object.\n'    
 'If you want to make a lightweight `Progress` capable class\n'    
 'you can set a position attribute to an `int`\n'    
 'and manipulate it carefully using `+=` and `-=` entirely.\n'    
 'If you decide to incur the cost of maintaining a `Progress` object\n'    
 'you can slot it in:\n'    
 '\n'    
 '    # initial setup with just an int\n'    
 '    my_thing.amount = 0\n'    
 '\n'    
 '    # later, or on some option, use a Progress instance\n'    
 '    my_thing.amount = Progress(my_thing.amount)\n'    
 '\n'    
 '### Method `Progress.__init__(self, position=None, name=None, start=None, '    
 'start_time=None, throughput_window=None, total=None, units_scale=None)`\n'    
 '\n'    
 'Initialise the Progesss object.\n'    
 '\n'    
 'Parameters:\n'    
 '* `position`: initial position, default `0`.\n'    
 '* `name`: optional name for this instance.\n'    
 '* `start`: starting position of progress range,\n'    
 '  default from `position`.\n'    
 '* `start_time`: start time of the process, default now.\n'    
 '* `throughput_window`: length of throughput time window in seconds,\n'    
 '  default None.\n'    
 '* `total`: expected completion value, default None.\n'    
 '\n'    
 "## Function `progressbar(it, label=None, total=None, units_scale=((0, ''),), "    
 '**kw)`\n'    
 '\n'    
 'Convenience function to construct and run a `Progress.bar`.\n'    
 '\n'    
 'Parameters:\n'    
 '* `it`: the iterable to consume\n'    
 '* `label`: optional label, doubles as the `Progress.name`\n'    
 '* `total`: optional value for `Progress.total`,\n'    
 '  default from `len(it)` if supported.\n'    
 '* `units_scale`: optional units scale for `Progress`,\n'    
 '  default `UNSCALED_SCALE`\n'    
 '\n'    
 'If `total` is `None` and `it` supports `len()`\n'    
 'then the `Progress.total` is set from it.\n'    
 '\n'    
 'All arguments are passed through to `Progress.bar`.\n'    
 '\n'    
 'Example use:\n'    
 '\n'    
 '    for row in progressbar(rows):\n'    
 '        ... do something with row ...\n'    
 '\n'    
 '# Release Log\n'    
 '\n'    
 '\n'    
 '\n'    
 '*Release 20200718.3*:\n'    
 'BaseProgress.bar, progressbar: new optional report_print parameter for '    
 'reporting on completion.\n'    
 '\n'    
 '*Release 20200718.2*:\n'    
 'Bugfix: BaseProgress.status: handle throughput=0 when total=None.\n'    
 '\n'    
 '*Release 20200718.1*:\n'    
 'BaseProgress.bar, progressbar: new optional update_frequency parameter for '    
 'less frequent updates.\n'    
 '\n'    
 '*Release 20200718*:\n'    
 '* Readability improvement for default status line.\n'    
 '* progressbar: default units_scale=UNSCALED_SCALE.\n'    
 '\n'    
 '*Release 20200716.1*:\n'    
 'BaseProgress.status: round throughput to an int if >=10.\n'    
 '\n'    
 '*Release 20200716*:\n'    
 '* BaseProgress.status: distinguish "idle" (position >= total) from "stalled" '    
 '(position < total).\n'    
 '* BaseProgress.status: make the status very short if the progress is idle.\n'    
 '\n'    
 '*Release 20200627*:\n'    
 '* BaseProgress.status: handle throughput=None (before any activity).\n'    
 '* BaseProgress: drop count_of_total_bytes_text, superceded by format_counter '    
 '(which honours the units_scale).\n'    
 '\n'    
 '*Release 20200626*:\n'    
 '* New Progress.bar generator method iterating over an iterable while '    
 'displaying a progress bar.\n'    
 '* New convenience function progressbar(it,...) which rolls its own Progress '    
 'instance.\n'    
 '* Progress: always support a throughput window, default to '    
 'DEFAULT_THROUGHPUT_WINDOW = 5s.\n'    
 '* Improve the default progress bar render returned by Progress.status().\n'    
 '\n'    
 '*Release 20200613*:\n'    
 '* BaseProgress, Progress and OverProgress now accept an optional '    
 'units_scale, such as cs.units.UNSCALED_SCALE, to use when expressing '    
 'progress - the default remains BINARY_SCALE.\n'    
 '* New arrow(), format_counter() and text_pos_of_total() methods to produce '    
 'components of the status string for tuning or external reuse.\n'    
 '\n'    
 '*Release 20200520*:\n'    
 'OverProgress: throughput and eta implementations.\n'    
 '\n'    
 '*Release 20200129.3*:\n'    
 'Test __version__ machinery again.\n'    
 '\n'    
 '*Release 20200129.2*:\n'    
 "set __version__ to '20200129.2'\n"    
 '\n'    
 '*Release 20200129.1*:\n'    
 'Dummy release to test new __version__.\n'    
 '\n'    
 '*Release 20200129*:\n'    
 'New Progress.count_of_total_bytes_text property presenting "3kB/40MB" style '    
 'text.\n'    
 '\n'    
 '*Release 20190812*:\n'    
 '* New OverProgress class which is a composite of a set of subsidiary '    
 'Progress instances.\n'    
 '* Assorted other small updates.\n'    
 '\n'    
 '*Release 20190220*:\n'    
 '* Progress: be somewhat like an int.\n'    
 '* New status() method returning a convenient one line progress status '    
 'report.\n'    
 '\n'    
 '*Release 20180703.2*:\n'    
 'Progress: make .total into a property in order to fire the update '    
 'notifications.\n'    
 '\n'    
 '*Release 20180703.1*:\n'    
 'Progress: additions and changes to API: new .ratio, .elapsed_time, rename '    
 '.projected to .remaining_time.\n'    
 '\n'    
 '*Release 20180703*:\n'    
 'Initial release of cs.progress.'),
  classifiers = ['Programming Language :: Python', 'Programming Language :: Python :: 3', 'Development Status :: 4 - Beta', 'Intended Audience :: Developers', 'Operating System :: OS Independent', 'Topic :: Software Development :: Libraries :: Python Modules', 'License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)'],
  install_requires = ['cs.logutils', 'cs.seq', 'cs.units', 'cs.upd'],
  keywords = ['python2', 'python3'],
  license = 'GNU General Public License v3 or later (GPLv3+)',
  long_description_content_type = 'text/markdown',
  package_dir = {'': 'lib/python'},
  py_modules = ['cs.progress'],
)
