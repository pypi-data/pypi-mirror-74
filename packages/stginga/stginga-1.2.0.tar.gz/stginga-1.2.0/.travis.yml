# We set the language to c because python isn't supported on the MacOS X nodes
# on Travis. However, the language ends up being irrelevant anyway, since we
# install Python ourselves using conda.
language: c

compiler: gcc

os:
    - linux

# Setting sudo to false opts in to Travis-CI container-based builds.
sudo: false

env:
    global:
        # The following versions are the 'default' for tests, unless
        # overidden underneath. They are defined here in order to save having
        # to repeat them for all configurations.
        - PYTHON_VERSION=3.7
        - NUMPY_VERSION=stable
        - ASTROPY_VERSION=stable
        - GINGA_VERSION=stable
        - INSTALL_CMD='pip install -e .'
        - TEST_CMD='pytest --pyargs stginga docs'
        - PIP_DEPENDENCIES=''

        # For this package-template, we include examples of Cython modules,
        # so Cython is required for testing. If your package does not include
        # Cython code, you can set CONDA_DEPENDENCIES=''
        - CONDA_DEPENDENCIES='scipy'

        # If there are matplotlib or other GUI tests, uncomment the following
        # line to use the X virtual framebuffer.
        # - SETUP_XVFB=True

matrix:
    include:

        - os: linux

        # Try Astropy and Ginga development versions
        - os: linux
          env: PYTHON_VERSION=3.8 ASTROPY_VERSION=development GINGA_VERSION=development

        # Try on Windows
        - os: windows

        # Do a PEP 8 check with flake8
        - os: linux
          env: TEST_CMD='flake8 stginga --count' INSTALL_CMD=''
               CONDA_DEPENDENCIES=''
               PIP_DEPENDENCIES='flake8'

        # Do a PEP 517 check
        - os: linux
          env: INSTALL_CMD='python -m pep517.build --source .'
               TEST_CMD='twine check dist/*'
               CONDA_DEPENDENCIES=''
               PIP_DEPENDENCIES='pep517 twine'

install:

    # We now use the ci-helpers package to set up our testing environment.
    # This is done by using Miniconda and then using conda and pip to install
    # dependencies. Which dependencies are installed using conda and pip is
    # determined by the CONDA_DEPDENDENCIES and PIP_DEPENDENCIES variables,
    # which should be space-delimited lists of package names. See the README
    # in https://github.com/astropy/ci-helpers for information about the full
    # list of environment variables that can be used to customize your
    # environment. In some cases, ci-helpers may not offer enough flexibility
    # in how to install a package, in which case you can have additional
    # commands in the install: section below.

    - git clone git://github.com/astropy/ci-helpers.git
    - source ci-helpers/travis/setup_conda.sh

    # As described above, using ci-helpers, you should be able to set up an
    # environment with dependencies installed using conda and pip, but in some
    # cases this may not provide enough flexibility in how to install a
    # specific dependency (and it will not be able to install non-Python
    # dependencies). Therefore, you can also include commands below (as
    # well as at the start of the install section or in the before_install
    # section if they are needed before setting up conda) to install any
    # other dependencies.

    # GINGA
    - if [[ $GINGA_VERSION == development ]]; then pip -q install git+https://github.com/ejeschke/ginga; fi
    - if [[ $GINGA_VERSION == stable ]]; then pip -q install ginga; fi

script:
   - $INSTALL_CMD
   - $TEST_CMD
