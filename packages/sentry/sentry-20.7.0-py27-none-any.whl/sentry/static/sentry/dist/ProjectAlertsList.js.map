{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/utils/environment.tsx","webpack:///./app/views/settings/projectAlerts/onboardingHovercard.tsx","webpack:///./app/views/settings/projectAlerts/ruleRow.tsx","webpack:///./app/views/settings/projectAlerts/list.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","SettingsPageHeading","props","icon","action","tabs","noTitleStyles","TitleAndActions","Icon","Title","styled","Action","React","Component","defaultProps","p","space","StyledSettingsPageHeading","routeTitleGen","routeName","orgSlug","withSentry","tmpl","recreateRoute","to","options","lastRootIndex","routeIndex","routes","params","location","stepBack","paths","map","path","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","PermissionAlert","access","hasAccess","type","t","getUrlRoutingName","env","encodeURIComponent","name","getDisplayName","OnboardingHovercard","state","dismissed","skipTask","api","organization","updateOnboardingTask","task","OnboardingTaskKey","ALERT_RULE","status","data","accepted_defaults","setState","children","shouldShowHovercard","hovercardBody","HovercardBody","size","onClick","show","position","body","hasCompletedTask","onboardingTasks","find","query","Object","prototype","hasOwnProperty","call","theme","fontSizeLarge","fontSizeMedium","withApi","RuleRow","loading","error","canEdit","editLink","id","environmentName","environment","Fragment","RuleType","RuleName","RuleDescription","ConditionsWithHeader","MatchTypeHeader","tct","matchType","actionMatch","conditions","length","Conditions","condition","i","key","Actions","actions","numberOfTriggers","triggers","rowSpans","RuleNameAndDescription","trigger","hideBorder","Trigger","StatusBadge","label","TriggerDescription","aggregate","thresholdType","alertThreshold","timeWindow","j","desc","isIssueAlert","renderIssueRule","renderMetricRule","gray600","fontSizeSmall","Link","listingCss","css","gray500","gray300","gray700","borderRadius","fontSizeRelativeSmall","ProjectAlertRules","orgId","projectId","routeTitle","canEditRule","rules","rule","renderBody","rulesPageLinks","basePath","HeaderActions","disabled","priority","isCircled","ScrollWrapper","StyledPanelTable","isLoading","isEmpty","emptyMessage","headers","renderResults","pageLinks","PanelTable"],"mappings":"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","file":"ProjectAlertsList.js","sourcesContent":["import DocumentTitle from 'react-document-title';\nimport React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport {HeaderTitle} from 'app/styles/organization';\n\ntype Props = {\n  // The title\n  title: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n\n  className?: string;\n\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // Actions on opposite end of title bar from the title\n  action?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass SettingsPageHeading extends React.Component<Props> {\n  static propTypes = {\n    icon: PropTypes.node,\n    title: PropTypes.node.isRequired,\n    action: PropTypes.node,\n    tabs: PropTypes.node,\n    // Disables font styles in the title. Allows for more custom titles.\n    noTitleStyles: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {icon, title, action, tabs, noTitleStyles, ...props} = this.props;\n    return (\n      <div {...props}>\n        <TitleAndActions>\n          {icon && <Icon>{icon}</Icon>}\n          {title && (\n            <Title tabs={tabs} styled={noTitleStyles}>\n              <HeaderTitle>{title}</HeaderTitle>\n            </Title>\n          )}\n          {action && <Action tabs={tabs}>{action}</Action>}\n        </TitleAndActions>\n\n        {tabs && <div>{tabs}</div>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p =>\n    !p.styled &&\n    `\n    font-size: 20px;\n    font-weight: bold;`};\n  margin: ${p =>\n    p.tabs\n      ? `${space(4)} ${space(2)} ${space(2)} 0`\n      : `${space(4)} ${space(2)} ${space(4)} 0`};\n  flex: 1;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{tabs?: React.ReactNode}>`\n  ${p => (p.tabs ? `margin-top: ${space(2)}` : null)};\n`;\n\nconst StyledSettingsPageHeading = styled(SettingsPageHeading)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nexport default StyledSettingsPageHeading;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true\n): string {\n  const tmpl = `${routeName} - ${orgSlug}`;\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import {Location} from 'history';\nimport {PlainRoute} from 'react-router/lib/Route';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\n\ntype Options = {\n  routes: PlainRoute[];\n  location: Location;\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(to: string | PlainRoute, options: Options): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {t} from 'app/locale';\nimport Access from 'app/components/acl/access';\nimport Alert from 'app/components/alert';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access = ['project:write'], ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert type=\"warning\" icon=\"icon-warning-sm\" {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner, manager, or admin role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nPermissionAlert.propTypes = {\n  access: PropTypes.arrayOf(PropTypes.string),\n};\n\nexport default PermissionAlert;\n","import {Environment} from 'app/types';\n\nconst DEFAULT_EMPTY_ROUTING_NAME = 'none';\nconst DEFAULT_EMPTY_ENV_NAME = '(No Environment)';\n\nexport function getUrlRoutingName(env: Omit<Environment, 'id'>) {\n  return encodeURIComponent(env.name) || DEFAULT_EMPTY_ROUTING_NAME;\n}\n\nexport function getDisplayName(env: Omit<Environment, 'id'>) {\n  return env.name || DEFAULT_EMPTY_ENV_NAME;\n}\n","import React from 'react';\nimport {Location} from 'history';\nimport styled from '@emotion/styled';\n\nimport Button from 'app/components/button';\nimport Hovercard from 'app/components/hovercard';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport withApi from 'app/utils/withApi';\nimport {Client} from 'app/api';\nimport {Organization, OnboardingTaskKey} from 'app/types';\nimport {updateOnboardingTask} from 'app/actionCreators/onboardingTasks';\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n  location: Location;\n  children: React.ReactNode;\n};\n\ntype State = {\n  dismissed: boolean;\n};\n\nclass OnboardingHovercard extends React.Component<Props, State> {\n  state: State = {\n    dismissed: false,\n  };\n\n  get shouldShowHovercard() {\n    const {organization} = this.props;\n    const {dismissed} = this.state;\n\n    const hasCompletedTask = organization.onboardingTasks.find(\n      task => task.task === OnboardingTaskKey.ALERT_RULE && task.status === 'complete'\n    );\n\n    const query = this.props.location?.query || {};\n\n    return (\n      !hasCompletedTask &&\n      !dismissed &&\n      Object.prototype.hasOwnProperty.call(query, 'onboardingTask')\n    );\n  }\n\n  skipTask = () => {\n    const {api, organization} = this.props;\n\n    updateOnboardingTask(api, organization, {\n      task: OnboardingTaskKey.ALERT_RULE,\n      status: 'complete',\n      data: {accepted_defaults: true},\n    });\n\n    this.setState({dismissed: true});\n  };\n\n  render() {\n    const {children, organization: _org, location: _location, ...props} = this.props;\n\n    if (!this.shouldShowHovercard) {\n      return children;\n    }\n\n    const hovercardBody = (\n      <HovercardBody>\n        <h1>{t('Configure custom alerting')}</h1>\n\n        <p>\n          {t(\n            `Add custom alert rules to configure under what conditions\n             you receive notifications from Sentry.`\n          )}\n        </p>\n\n        <Button size=\"xsmall\" onClick={this.skipTask}>\n          {t('The default rule looks good!')}\n        </Button>\n      </HovercardBody>\n    );\n\n    return (\n      <Hovercard show position=\"left\" body={hovercardBody} {...props}>\n        {children}\n      </Hovercard>\n    );\n  }\n}\n\nconst HovercardBody = styled('div')`\n  h1 {\n    font-size: ${p => p.theme.fontSizeLarge};\n    margin-bottom: ${space(1.5)};\n  }\n  p {\n    font-size: ${p => p.theme.fontSizeMedium};\n  }\n`;\n\nexport default withApi(OnboardingHovercard);\n","import {Link} from 'react-router';\nimport {RouteComponentProps} from 'react-router/lib/Router';\nimport {css} from '@emotion/core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport {IssueAlertRule} from 'app/types/alerts';\nimport {SavedIncidentRule} from 'app/views/settings/incidentRules/types';\nimport {getDisplayName} from 'app/utils/environment';\nimport {t, tct} from 'app/locale';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport space from 'app/styles/space';\n\nfunction isIssueAlert(data: IssueAlertRule | SavedIncidentRule): data is IssueAlertRule {\n  return !data.hasOwnProperty('triggers');\n}\n\ntype Props = {\n  data: IssueAlertRule | SavedIncidentRule;\n  type: 'issue' | 'metric';\n\n  // Is the alert rule editable?\n  canEdit?: boolean;\n} & Pick<\n  RouteComponentProps<{orgId: string; projectId: string}, {}>,\n  'params' | 'routes' | 'location'\n>;\n\ntype State = {\n  loading: boolean;\n  error: boolean;\n};\n\nclass RuleRow extends React.Component<Props, State> {\n  static propTypes: any = {\n    data: PropTypes.object.isRequired,\n    canEdit: PropTypes.bool,\n  };\n\n  state = {loading: false, error: false};\n\n  renderIssueRule(data: IssueAlertRule) {\n    const {params, routes, location, canEdit} = this.props;\n    const editLink = recreateRoute(`rules/${data.id}/`, {\n      params,\n      routes,\n      location,\n    });\n\n    const environmentName = data.environment\n      ? getDisplayName({name: data.environment})\n      : t('All Environments');\n\n    return (\n      <React.Fragment>\n        <RuleType>{t('Issue')}</RuleType>\n        <div>\n          {canEdit ? <RuleName to={editLink}>{data.name}</RuleName> : data.name}\n          <RuleDescription>\n            {t('Environment')}: {environmentName}\n          </RuleDescription>\n        </div>\n\n        <ConditionsWithHeader>\n          <MatchTypeHeader>\n            {tct('[matchType] of the following:', {\n              matchType: data.actionMatch,\n            })}\n          </MatchTypeHeader>\n          {data.conditions.length !== 0 && (\n            <Conditions>\n              {data.conditions.map((condition, i) => (\n                <div key={i}>{condition.name}</div>\n              ))}\n            </Conditions>\n          )}\n        </ConditionsWithHeader>\n\n        <Actions>\n          {data.actions.map((action, i) => (\n            <Action key={i}>{action.name}</Action>\n          ))}\n        </Actions>\n      </React.Fragment>\n    );\n  }\n\n  renderMetricRule(data: SavedIncidentRule) {\n    const {params, routes, location, canEdit} = this.props;\n    const editLink = recreateRoute(`metric-rules/${data.id}/`, {\n      params,\n      routes,\n      location,\n    });\n\n    const numberOfTriggers = data.triggers.length;\n\n    return (\n      <React.Fragment>\n        <RuleType rowSpans={numberOfTriggers}>{t('Metric')}</RuleType>\n        <RuleNameAndDescription rowSpans={numberOfTriggers}>\n          {canEdit ? <RuleName to={editLink}>{data.name}</RuleName> : data.name}\n          <RuleDescription />\n        </RuleNameAndDescription>\n\n        {numberOfTriggers !== 0 &&\n          data.triggers.map((trigger, i) => {\n            const hideBorder = i !== numberOfTriggers - 1;\n            return (\n              <React.Fragment key={i}>\n                <Trigger key={`trigger-${i}`} hideBorder={hideBorder}>\n                  <StatusBadge>{trigger.label}</StatusBadge>\n                  <TriggerDescription>\n                    {data.aggregate}{' '}\n                    {trigger.thresholdType === 0 ? t('above') : t('below')}{' '}\n                    {trigger.alertThreshold}/{data.timeWindow}\n                    {t('min')}\n                  </TriggerDescription>\n                </Trigger>\n                <Actions key={`actions-${i}`} hideBorder={hideBorder}>\n                  {trigger.actions?.map((action, j) => (\n                    <Action key={j}>{action.desc}</Action>\n                  ))}\n                </Actions>\n              </React.Fragment>\n            );\n          })}\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    const {data} = this.props;\n\n    return isIssueAlert(data) ? this.renderIssueRule(data) : this.renderMetricRule(data);\n  }\n}\n\nexport default RuleRow;\n\ntype RowSpansProp = {\n  rowSpans?: number;\n};\n\ntype HasBorderProp = {\n  hideBorder?: boolean;\n};\n\nconst RuleType = styled('div')<RowSpansProp>`\n  color: ${p => p.theme.gray600};\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-weight: bold;\n  text-transform: uppercase;\n  ${p => p.rowSpans && `grid-row: auto / span ${p.rowSpans}`};\n`;\n\nconst RuleNameAndDescription = styled('div')<RowSpansProp>`\n  ${p => p.rowSpans && `grid-row: auto / span ${p.rowSpans}`};\n`;\n\nconst RuleName = styled(Link)`\n  font-weight: bold;\n`;\n\nconst listingCss = css`\n  display: grid;\n  grid-gap: ${space(1)};\n`;\n\nconst Conditions = styled('div')`\n  ${listingCss};\n`;\n\nconst Actions = styled('div')<HasBorderProp>`\n  font-size: ${p => p.theme.fontSizeSmall};\n  ${listingCss};\n\n  ${p => p.hideBorder && `border-bottom: none`};\n`;\n\nconst Action = styled('div')`\n  line-height: 14px;\n`;\n\nconst ConditionsWithHeader = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n\nconst MatchTypeHeader = styled('div')`\n  font-weight: bold;\n  text-transform: uppercase;\n  color: ${p => p.theme.gray500};\n  margin-bottom: ${space(1)};\n`;\n\nconst RuleDescription = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  margin: ${space(0.5)} 0;\n  white-space: nowrap;\n`;\n\nconst Trigger = styled('div')<HasBorderProp>`\n  display: flex;\n  align-items: flex-start;\n  font-size: ${p => p.theme.fontSizeSmall};\n\n  ${p => p.hideBorder && `border-bottom: none`};\n`;\n\nconst TriggerDescription = styled('div')`\n  white-space: nowrap;\n`;\n\nconst StatusBadge = styled('div')`\n  background-color: ${p => p.theme.gray300};\n  color: ${p => p.theme.gray700};\n  text-transform: uppercase;\n  padding: ${space(0.25)} ${space(0.5)};\n  font-weight: 600;\n  margin-right: ${space(0.5)};\n  border-radius: ${p => p.theme.borderRadius};\n  font-size: ${p => p.theme.fontSizeRelativeSmall};\n`;\n","import {RouteComponentProps} from 'react-router/lib/Router';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport {IconAdd, IconSettings} from 'app/icons';\nimport {IssueAlertRule} from 'app/types/alerts';\nimport {Organization} from 'app/types';\nimport {PanelTable} from 'app/components/panels';\nimport {SavedIncidentRule} from 'app/views/settings/incidentRules/types';\nimport {t} from 'app/locale';\nimport AsyncView from 'app/views/asyncView';\nimport Button from 'app/components/button';\nimport OnboardingHovercard from 'app/views/settings/projectAlerts/onboardingHovercard';\nimport Pagination from 'app/components/pagination';\nimport PermissionAlert from 'app/views/settings/project/permissionAlert';\nimport RuleRow from 'app/views/settings/projectAlerts/ruleRow';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport Tooltip from 'app/components/tooltip';\nimport routeTitle from 'app/utils/routeTitle';\nimport space from 'app/styles/space';\n\ntype Props = {\n  canEditRule: boolean;\n  organization: Organization;\n} & RouteComponentProps<\n  {\n    orgId: string;\n    projectId: string;\n  },\n  {}\n>;\n\ntype State = {\n  rules: Array<\n    ({type: 'alert_rule'} & IssueAlertRule) | ({type: 'rule'} & SavedIncidentRule)\n  >;\n} & AsyncView['state'];\n\nclass ProjectAlertRules extends AsyncView<Props, State> {\n  getEndpoints(): [string, string][] {\n    const {orgId, projectId} = this.props.params;\n    return [['rules', `/projects/${orgId}/${projectId}/combined-rules/`]];\n  }\n\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitle(t('Alert Rules'), projectId);\n  }\n\n  renderResults() {\n    const {canEditRule, params} = this.props;\n    const {orgId, projectId} = params;\n\n    return (\n      <React.Fragment>\n        {this.state.rules.map(rule => (\n          <RuleRow\n            type={rule.type === 'alert_rule' ? 'issue' : 'metric'}\n            api={this.api}\n            key={`${rule.type}-${rule.id}`}\n            data={rule}\n            orgId={orgId}\n            projectId={projectId}\n            params={this.props.params}\n            location={this.props.location}\n            routes={this.props.routes}\n            canEdit={canEditRule}\n          />\n        ))}\n      </React.Fragment>\n    );\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderBody() {\n    const {canEditRule, location, organization, params} = this.props;\n    const {orgId, projectId} = params;\n    const {loading, rules, rulesPageLinks} = this.state;\n\n    const basePath = `/settings/${orgId}/projects/${projectId}/alerts/`;\n\n    return (\n      <React.Fragment>\n        <SettingsPageHeader\n          title={t('Alert Rules')}\n          action={\n            <HeaderActions>\n              <Button to={`${basePath}settings/`} size=\"small\" icon={<IconSettings />}>\n                {t('Settings')}\n              </Button>\n              <OnboardingHovercard organization={organization} location={location}>\n                <Tooltip\n                  disabled={canEditRule}\n                  title={t('You do not have permission to edit alert rules.')}\n                >\n                  <Button\n                    to={`${basePath}new/?referrer=project_alerts`}\n                    disabled={!canEditRule}\n                    priority=\"primary\"\n                    size=\"small\"\n                    icon={<IconAdd size=\"xs\" isCircled />}\n                  >\n                    {t('New Alert Rule')}\n                  </Button>\n                </Tooltip>\n              </OnboardingHovercard>\n            </HeaderActions>\n          }\n        />\n        <PermissionAlert />\n\n        <ScrollWrapper>\n          <StyledPanelTable\n            isLoading={loading}\n            isEmpty={!loading && !rules.length}\n            emptyMessage={t('There are no alerts configured for this project.')}\n            headers={[\n              <div key=\"type\">{t('Type')}</div>,\n              <div key=\"name\">{t('Name')}</div>,\n              <div key=\"conditions\">{t('Conditions/Triggers')}</div>,\n              <div key=\"actions\">{t('Action(s)')}</div>,\n            ]}\n          >\n            {() => this.renderResults()}\n          </StyledPanelTable>\n        </ScrollWrapper>\n\n        <Pagination pageLinks={rulesPageLinks} />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ProjectAlertRules;\n\nconst ScrollWrapper = styled('div')`\n  width: 100%;\n  overflow-x: auto;\n`;\n\n/**\n * TODO(billy): Not sure if this should be default for PanelTable or not\n */\nconst StyledPanelTable = styled(PanelTable)`\n  width: fit-content;\n  min-width: 100%;\n`;\n\nconst HeaderActions = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  grid-gap: ${space(1)};\n`;\n"],"sourceRoot":""}