{"version":3,"sources":["webpack:///./app/components/modals/createTeamModal.jsx","webpack:///./app/views/settings/components/forms/textField.tsx","webpack:///./app/actionCreators/teams.jsx","webpack:///./app/utils/slugify.tsx","webpack:///./app/components/createTeamForm.jsx"],"names":["CreateTeamModal","handleSubmit","data","onSuccess","onError","createTeam","Client","orgId","props","organization","slug","then","resp","handleSuccess","err","onClose","closeModal","this","Body","Header","Fragment","closeButton","onHide","t","onSubmit","React","Component","TextField","type","doCallback","params","name","args","fetchTeamDetails","api","options","TeamActions","fetchDetails","teamId","request","success","fetchDetailsSuccess","error","fetchDetailsError","updateTeamSuccess","updateSuccess","updateTeam","endpoint","update","method","updateError","joinTeam","memberId","id","uniqueId","leaveTeam","team","requestPromise","createTeamSuccess","addSuccessMessage","tct","createTeamError","addErrorMessage","removeTeam","removeTeamSuccess","removeTeamError","slugify","str","toLowerCase","replace","CreateTeamForm","handleCreateTeamSuccess","submitLabel","apiEndpoint","apiMethod","onSubmitSuccess","requireChanges","data-test-id","formProps","label","placeholder","help","required","stacked","flexibleControlStateSize","inline","transformInput"],"mappings":"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","file":"CreateTeamModal.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {Client} from 'app/api';\nimport {createTeam} from 'app/actionCreators/teams';\nimport {t} from 'app/locale';\nimport CreateTeamForm from 'app/components/createTeamForm';\nimport SentryTypes from 'app/sentryTypes';\n\nclass CreateTeamModal extends React.Component {\n  static propTypes = {\n    closeModal: PropTypes.func,\n    onClose: PropTypes.func,\n    Body: PropTypes.oneOfType([PropTypes.func, PropTypes.node]).isRequired,\n    Header: PropTypes.oneOfType([PropTypes.func, PropTypes.node]).isRequired,\n    organization: SentryTypes.Organization.isRequired,\n    project: SentryTypes.Project,\n  };\n\n  handleSubmit = (data, onSuccess, onError) => {\n    createTeam(new Client(), data, {orgId: this.props.organization.slug})\n      .then(resp => {\n        this.handleSuccess(resp);\n        onSuccess(resp);\n      })\n      .catch(err => {\n        onError(err);\n      });\n  };\n\n  handleSuccess = data => {\n    if (this.props.onClose) {\n      this.props.onClose(data);\n    }\n\n    this.props.closeModal();\n  };\n\n  render() {\n    const {Body, Header, closeModal, ...props} = this.props;\n\n    return (\n      <React.Fragment>\n        <Header closeButton onHide={closeModal}>\n          {t('Create Team')}\n        </Header>\n        <Body>\n          <CreateTeamForm {...props} onSubmit={this.handleSubmit} />\n        </Body>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default CreateTeamModal;\n","import React from 'react';\n\nimport InputField from 'app/views/settings/components/forms/inputField';\n\ntype Props = InputField['props'];\n\nexport default function TextField(props: Omit<Props, 'type'>) {\n  return <InputField {...props} type=\"text\" />;\n}\n\nTextField.propTypes = {...InputField.propTypes};\n","import TeamActions from 'app/actions/teamActions';\nimport {tct} from 'app/locale';\nimport {addSuccessMessage, addErrorMessage} from 'app/actionCreators/indicator';\nimport {uniqueId} from 'app/utils/guid';\n\nconst doCallback = (params = {}, name, ...args) => {\n  if (typeof params[name] === 'function') {\n    params[name](...args);\n  }\n};\n\n// Fetch teams for org\nexport function fetchTeams(api, params, options) {\n  TeamActions.fetchAll(params.orgId);\n  return api.request(`/teams/${params.orgId}/`, {\n    success: data => {\n      TeamActions.fetchAllSuccess(params.orgId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchAllError(params.orgId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function fetchTeamDetails(api, params, options) {\n  TeamActions.fetchDetails(params.teamId);\n  return api.request(`/teams/${params.orgId}/${params.teamId}/`, {\n    success: data => {\n      TeamActions.fetchDetailsSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchDetailsError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function updateTeamSuccess(teamId, data) {\n  TeamActions.updateSuccess(teamId, data);\n}\n\nexport function updateTeam(api, params, options) {\n  const endpoint = `/teams/${params.orgId}/${params.teamId}/`;\n  TeamActions.update(params.teamId, params.data);\n\n  return api.request(endpoint, {\n    method: 'PUT',\n    data: params.data,\n    success: data => {\n      updateTeamSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function joinTeam(api, params, options) {\n  const endpoint = `/organizations/${params.orgId}/members/${params.memberId ||\n    'me'}/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'POST',\n    data: params.data,\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function leaveTeam(api, params, options) {\n  const endpoint = `/organizations/${params.orgId}/members/${params.memberId ||\n    'me'}/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'DELETE',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function createTeam(api, team, params) {\n  TeamActions.createTeam(team);\n\n  return api\n    .requestPromise(`/organizations/${params.orgId}/teams/`, {\n      method: 'POST',\n      data: team,\n    })\n    .then(\n      data => {\n        TeamActions.createTeamSuccess(data);\n        addSuccessMessage(\n          tct('[team] has been added to the [organization] organization', {\n            team: `#${data.slug}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.createTeamError(team.slug || team.name, err);\n        addErrorMessage(\n          tct('Unable to create [team] in the [organization] organization', {\n            team: `#${team.slug || team.name}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n\nexport function removeTeam(api, params) {\n  TeamActions.removeTeam(params.teamId);\n\n  return api\n    .requestPromise(`/teams/${params.orgId}/${params.teamId}/`, {\n      method: 'DELETE',\n    })\n    .then(\n      data => {\n        TeamActions.removeTeamSuccess(params.teamId, data);\n        addSuccessMessage(\n          tct('[team] has been removed from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.removeTeamError(params.teamId, err);\n        addErrorMessage(\n          tct('Unable to remove [team] from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n","// XXX: This is NOT an exhaustive slugify function\n// Only forces lowercase and replaces spaces with hyphens\nexport default function slugify(str: any): string {\n  return typeof str === 'string' ? str.toLowerCase().replace(' ', '-') : '';\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {t} from 'app/locale';\nimport Form from 'app/views/settings/components/forms/form';\nimport SentryTypes from 'app/sentryTypes';\nimport TextField from 'app/views/settings/components/forms/textField';\nimport slugify from 'app/utils/slugify';\n\nexport default class CreateTeamForm extends React.Component {\n  static propTypes = {\n    organization: SentryTypes.Organization.isRequired,\n    onSuccess: PropTypes.func,\n    onSubmit: PropTypes.func,\n    formProps: PropTypes.object,\n  };\n\n  handleCreateTeamSuccess = data => {\n    const {onSuccess} = this.props;\n\n    if (typeof onSuccess !== 'function') {\n      return;\n    }\n\n    onSuccess(data);\n  };\n\n  render() {\n    const {organization} = this.props;\n\n    return (\n      <React.Fragment>\n        <p>\n          {t(\n            \"Teams group members' access to a specific focus, e.g. a major product or application that may have sub-projects.\"\n          )}\n        </p>\n\n        <Form\n          submitLabel={t('Create Team')}\n          apiEndpoint={`/organizations/${organization.slug}/teams/`}\n          apiMethod=\"POST\"\n          onSubmit={this.props.onSubmit}\n          onSubmitSuccess={this.handleCreateTeamSuccess}\n          requireChanges\n          data-test-id=\"create-team-form\"\n          {...this.props.formProps}\n        >\n          <TextField\n            name=\"slug\"\n            label={t('Team Slug')}\n            placeholder={t('e.g. operations, web-frontend, desktop')}\n            help={t('May contain lowercase letters, numbers, dashes and underscores.')}\n            required\n            stacked\n            flexibleControlStateSize\n            inline={false}\n            transformInput={slugify}\n          />\n        </Form>\n      </React.Fragment>\n    );\n  }\n}\n"],"sourceRoot":""}