{"version":3,"sources":["webpack:///./app/components/events/errorLevel.tsx","webpack:///./app/components/events/eventMessage.tsx","webpack:///./app/views/sharedGroupDetails/sharedGroupHeader.tsx","webpack:///./app/views/sharedGroupDetails/sharedGroupDetails.jsx"],"names":["getLevelColor","level","theme","COLORS","error","orange400","info","blue400","warning","orange300","fatal","red400","sample","purple400","ErrorLevel","p","size","EventMessage","className","levelIndicatorSize","message","annotations","StyledErrorLevel","Message","StyledEventMessage","breakpoints","space","overflowEllipsis","SharedGroupHeader","group","Wrapper","Details","Title","title","culprit","borderLight","fontSizeExtraLarge","props","headerFontSize","SharedGroupDetails","createReactClass","displayName","childContextTypes","SentryTypes","Group","getInitialState","loading","getChildContext","this","state","componentWillMount","fetchData","document","body","classList","add","componentWillUnmount","remove","getTitle","setState","api","request","getGroupDetailsEndpoint","success","data","params","shareId","render","onRetry","evt","latestEvent","href","permalink","t","Container","organization","project","event","isShare","withApi"],"mappings":"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","file":"SharedGroupDetails.js","sourcesContent":["import styled from '@emotion/styled';\n\nimport {Level} from 'app/types';\n\nconst DEFAULT_SIZE = '13px';\n\nfunction getLevelColor({level = '', theme}) {\n  const COLORS = {\n    error: theme.orange400,\n    info: theme.blue400,\n    warning: theme.orange300,\n    fatal: theme.red400,\n    sample: theme.purple400,\n  };\n\n  return `background-color: ${COLORS[level] || theme.orange400};`;\n}\n\ntype Props = {\n  size?: string;\n  level?: Level;\n};\n\nconst ErrorLevel = styled('span')<Props>`\n  padding: 0;\n  position: relative;\n  width: ${p => p.size || DEFAULT_SIZE};\n  height: ${p => p.size || DEFAULT_SIZE};\n  text-indent: -9999em;\n  display: inline-block;\n  border-radius: 50%;\n  flex-shrink: 0;\n\n  ${getLevelColor}\n`;\n\nexport default ErrorLevel;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Level} from 'app/types';\nimport ErrorLevel from 'app/components/events/errorLevel';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\n\ntype Props = {\n  level?: Level;\n  levelIndicatorSize?: string;\n  message?: React.ReactNode;\n  annotations?: React.ReactNode;\n  className?: string;\n  hasGuideAnchor?: boolean;\n};\n\nconst EventMessage = ({\n  className,\n  level,\n  levelIndicatorSize,\n  message,\n  annotations,\n}: Props) => (\n  <div className={className}>\n    {level && (\n      <StyledErrorLevel size={levelIndicatorSize} level={level}>\n        {level}\n      </StyledErrorLevel>\n    )}\n\n    {message && <Message>{message}</Message>}\n\n    {annotations}\n  </div>\n);\n\nEventMessage.propTypes = {\n  level: PropTypes.oneOf(['error', 'fatal', 'info', 'warning', 'sample']),\n  levelIndicatorSize: PropTypes.string,\n  message: PropTypes.node,\n  annotations: PropTypes.node,\n  className: PropTypes.string,\n};\n\nconst StyledEventMessage = styled(EventMessage)`\n  display: flex;\n  align-items: center;\n  position: relative;\n  line-height: 1.2;\n\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    margin-bottom: ${space(2)};\n  }\n`;\n\nconst StyledErrorLevel = styled(ErrorLevel)`\n  margin-right: ${space(1)};\n`;\n\nconst Message = styled('span')`\n  ${overflowEllipsis}\n  width: auto;\n  max-height: 38px;\n`;\n\nexport default StyledEventMessage;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport EventMessage from 'app/components/events/eventMessage';\nimport space from 'app/styles/space';\nimport {Group} from 'app/types';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\n\ntype Props = {\n  group: Group;\n};\n\nconst SharedGroupHeader = ({group}: Props) => (\n  <Wrapper>\n    <Details>\n      <Title>{group.title}</Title>\n      <EventMessage message={group.culprit} />\n    </Details>\n  </Wrapper>\n);\n\nexport default SharedGroupHeader;\n\nconst Wrapper = styled('div')`\n  padding: ${space(3)} ${space(4)} ${space(3)} ${space(4)};\n  border-bottom: ${p => `1px solid ${p.theme.borderLight}`};\n  box-shadow: 0 2px 0 rgba(0, 0, 0, 0.03);\n  position: relative;\n  margin: 0 0 ${space(3)};\n`;\n\nconst Details = styled('div')`\n  max-width: 960px;\n  margin: 0 auto;\n`;\n\n// TODO(style): the color #161319 is not yet in the color object of the theme\nconst Title = styled('h3')`\n  color: #161319;\n  margin: 0 0 ${space(1)};\n  overflow-wrap: break-word;\n  line-height: 1.2;\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  @media (min-width: ${props => props.theme.breakpoints[0]}) {\n    font-size: ${p => p.theme.headerFontSize};\n    line-height: 1.1;\n    ${overflowEllipsis};\n  }\n`;\n","import PropTypes from 'prop-types';\nimport DocumentTitle from 'react-document-title';\nimport React from 'react';\nimport createReactClass from 'create-react-class';\nimport styled from '@emotion/styled';\n\nimport {t} from 'app/locale';\nimport withApi from 'app/utils/withApi';\nimport {BorderlessEventEntries} from 'app/components/events/eventEntries';\nimport Footer from 'app/components/footer';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport NotFound from 'app/components/errors/notFound';\nimport SentryTypes from 'app/sentryTypes';\nimport SharedGroupHeader from 'app/views/sharedGroupDetails/sharedGroupHeader';\nimport space from 'app/styles/space';\n\nconst SharedGroupDetails = createReactClass({\n  displayName: 'SharedGroupDetails',\n\n  propTypes: {\n    api: PropTypes.object,\n  },\n\n  childContextTypes: {\n    group: SentryTypes.Group,\n  },\n\n  getInitialState() {\n    return {\n      group: null,\n      loading: true,\n      error: false,\n    };\n  },\n\n  getChildContext() {\n    return {\n      group: this.state.group,\n    };\n  },\n\n  componentWillMount() {\n    this.fetchData();\n    document.body.classList.add('shared-group');\n  },\n\n  componentWillUnmount() {\n    document.body.classList.remove('shared-group');\n  },\n\n  getTitle() {\n    if (this.state.group) {\n      return this.state.group.title;\n    }\n    return 'Sentry';\n  },\n\n  fetchData() {\n    this.setState({\n      loading: true,\n      error: false,\n    });\n\n    this.props.api.request(this.getGroupDetailsEndpoint(), {\n      success: data => {\n        this.setState({\n          loading: false,\n          group: data,\n        });\n      },\n      error: () => {\n        this.setState({\n          loading: false,\n          error: true,\n        });\n      },\n    });\n  },\n\n  getGroupDetailsEndpoint() {\n    const id = this.props.params.shareId;\n\n    return '/shared/issues/' + id + '/';\n  },\n\n  render() {\n    const group = this.state.group;\n\n    if (this.state.loading) {\n      return <LoadingIndicator />;\n    }\n\n    if (!group) {\n      return <NotFound />;\n    }\n\n    if (this.state.error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    const evt = this.state.group.latestEvent;\n\n    return (\n      <DocumentTitle title={this.getTitle()}>\n        <div className=\"app\">\n          <div className=\"pattern-bg\" />\n          <div className=\"container\">\n            <div className=\"box box-modal\">\n              <div className=\"box-header\">\n                <a className=\"logo\" href=\"/\">\n                  <span className=\"icon-sentry-logo-full\" />\n                </a>\n                {this.state.group.permalink && (\n                  <a className=\"details\" href={this.state.group.permalink}>\n                    {t('Details')}\n                  </a>\n                )}\n              </div>\n              <div className=\"content\">\n                <SharedGroupHeader group={group} />\n                <Container className=\"group-overview event-details-container\">\n                  <BorderlessEventEntries\n                    organization={group.project.organization}\n                    group={group}\n                    event={evt}\n                    project={group.project}\n                    isShare\n                  />\n                </Container>\n                <Footer />\n              </div>\n            </div>\n          </div>\n        </div>\n      </DocumentTitle>\n    );\n  },\n});\n\nconst Container = styled('div')`\n  padding: 0 ${space(4)};\n`;\n\nexport {SharedGroupDetails};\n\nexport default withApi(SharedGroupDetails);\n"],"sourceRoot":""}