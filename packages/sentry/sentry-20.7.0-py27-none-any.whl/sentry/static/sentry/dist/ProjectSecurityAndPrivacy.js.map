{"version":3,"sources":["webpack:///./app/data/platforms.tsx","webpack:///./app/utils/slugify.tsx","webpack:///./app/components/panels/hintPanelItem.tsx","webpack:///./app/data/forms/projectGeneralSettings.tsx","webpack:///./app/views/settings/projectSecurityAndPrivacy/index.tsx"],"names":["otherPlatform","integrations","link","type","id","name","t","concat","platforms","map","platform","i","language","slugify","str","toLowerCase","replace","HintPanelItem","space","p","theme","borderLighter","borderLight","gray100","fontSizeMedium","fontSizeLarge","RESOLVE_AGE_ALLOWED_VALUES","values","push","getResolveAgeAllowedValues","ORG_DISABLED_REASON","hasOrgOverride","organization","fields","slug","required","label","placeholder","help","transformInput","saveOnBlur","saveMessageAlertType","saveMessage","choices","PlatformWrapper","key","StyledPlatformIcon","size","subjectPrefix","resolveAge","allowedValues","formatLabel","val","Number","tn","tct","Caution","groupingConfig","selectionInfoFunction","args","groupingConfigs","value","selection","find","changelog","dangerouslySetInnerHTML","__html","marked","hidden","toString","isHidden","visible","features","has","groupingEnhancementsBase","groupingEnhancementBases","groupingEnhancements","multiline","monospace","autosize","inline","maxRows","formatMessageValue","Fragment","style","marginBottom","pattern","validate","fingerprintingRules","dataScrubber","disabled","disabledReason","setValue","props","confirm","false","dataScrubberDefaults","scrubIPAddresses","sensitiveFields","getValue","extractMultilineFields","convertMultilineFieldValue","safeFields","storeCrashReports","formatStoreCrashReports","STORE_CRASH_REPORTS_VALUES","allowedDomains","scrapeJavaScript","securityToken","getDynamicText","fixed","securityTokenHeader","verifySSL","PlatformIcon","ProjectSecurityAndPrivacy","handleUpdateProject","data","ProjectActions","updateSuccess","this","project","initialData","endpoint","access","Set","relayPiiConfig","title","allowUndo","apiMethod","apiEndpoint","onSubmitSuccess","onSubmitError","addErrorMessage","additionalFieldProps","additionalContext","linkToOrganizationSecurityAndPrivacy","to","projectId","AsyncView","withProject"],"mappings":"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","file":"ProjectSecurityAndPrivacy.js","sourcesContent":["/* eslint import/no-unresolved:0 import/order:0 */\nimport {PlatformIntegration} from 'app/types';\nimport {platforms} from 'integration-docs-platforms';\nimport {t} from 'app/locale';\n\nconst otherPlatform = {\n  integrations: [\n    {\n      link: 'https://docs.getsentry.com/hosted/clients/',\n      type: 'language',\n      id: 'other',\n      name: t('Other'),\n    },\n  ],\n  id: 'other',\n  name: t('Other'),\n};\n\nexport default ([] as PlatformIntegration[]).concat(\n  [],\n  ...[...platforms, otherPlatform].map(platform =>\n    platform.integrations.map(i => ({...i, language: platform.id}))\n  )\n);\n","// XXX: This is NOT an exhaustive slugify function\n// Only forces lowercase and replaces spaces with hyphens\nexport default function slugify(str: any): string {\n  return typeof str === 'string' ? str.toLowerCase().replace(' ', '-') : '';\n}\n","import styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\n\nconst HintPanelItem = styled('div')`\n  display: flex;\n  padding: ${space(2)};\n  border-top: 1px solid ${p => p.theme.borderLighter};\n  border-left: 1px solid ${p => p.theme.borderLighter};\n  border-bottom: 1px solid ${p => p.theme.borderLight};\n  background: ${p => p.theme.gray100};\n  font-size: ${p => p.theme.fontSizeMedium};\n\n  h2 {\n    font-size: ${p => p.theme.fontSizeLarge};\n    margin-bottom: 0;\n  }\n\n  &:last-child {\n    border: 0;\n  }\n`;\n\nexport default HintPanelItem;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {extractMultilineFields, convertMultilineFieldValue} from 'app/utils';\nimport {t, tct, tn} from 'app/locale';\nimport HintPanelItem from 'app/components/panels/hintPanelItem';\nimport PlatformIcon from 'app/components/platformIcon';\nimport getDynamicText from 'app/utils/getDynamicText';\nimport marked from 'app/utils/marked';\nimport platforms from 'app/data/platforms';\nimport slugify from 'app/utils/slugify';\nimport {\n  STORE_CRASH_REPORTS_VALUES,\n  formatStoreCrashReports,\n} from 'app/utils/crashReports';\nimport space from 'app/styles/space';\nimport {GroupingConfigItem} from 'app/components/events/groupingInfo';\nimport {Field} from 'app/views/settings/components/forms/type';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/projects/:projectId/';\n\nconst getResolveAgeAllowedValues = () => {\n  let i = 0;\n  const values: number[] = [];\n  while (i <= 720) {\n    values.push(i);\n    if (i < 12) {\n      i += 1;\n    } else if (i < 24) {\n      i += 3;\n    } else if (i < 36) {\n      i += 6;\n    } else if (i < 48) {\n      i += 12;\n    } else {\n      i += 24;\n    }\n  }\n  return values;\n};\n\nconst RESOLVE_AGE_ALLOWED_VALUES = getResolveAgeAllowedValues();\n\nconst ORG_DISABLED_REASON = t(\n  \"This option is enforced by your organization's settings and cannot be customized per-project.\"\n);\n\n// Check if a field has been set AND IS TRUTHY at the organization level.\nconst hasOrgOverride = ({organization, name}) => organization[name];\n\nexport const fields: {[key: string]: Field} = {\n  slug: {\n    name: 'slug',\n    type: 'string',\n    required: true,\n    label: t('Name'),\n    placeholder: t('my-service-name'),\n    help: t('A unique ID used to identify this project'),\n    transformInput: slugify,\n\n    saveOnBlur: false,\n    saveMessageAlertType: 'info',\n    saveMessage: t('You will be redirected to the new project slug after saving'),\n  },\n\n  platform: {\n    name: 'platform',\n    type: 'array',\n    label: t('Platform'),\n    choices: () =>\n      platforms.map(({id, name}) => [\n        id,\n        <PlatformWrapper key={id}>\n          <StyledPlatformIcon platform={id} size=\"20\" />\n          {name}\n        </PlatformWrapper>,\n      ]),\n    help: t('The primary platform for this project, used only for aesthetics'),\n  },\n\n  subjectPrefix: {\n    name: 'subjectPrefix',\n    type: 'string',\n    label: t('Subject Prefix'),\n    placeholder: t('e.g. [my-org]'),\n    help: t('Choose a custom prefix for emails from this project'),\n  },\n\n  resolveAge: {\n    name: 'resolveAge',\n    type: 'range',\n    allowedValues: RESOLVE_AGE_ALLOWED_VALUES,\n    label: t('Auto Resolve'),\n    help: t(\n      \"Automatically resolve an issue if it hasn't been seen for this amount of time\"\n    ),\n    formatLabel: val => {\n      val = Number(val);\n      if (val === 0) {\n        return t('Disabled');\n      }\n\n      if (val > 23 && val % 24 === 0) {\n        // Based on allowed values, val % 24 should always be true\n        val = val / 24;\n        return tn('%s day', '%s days', val);\n      }\n\n      return tn('%s hour', '%s hours', val);\n    },\n    saveOnBlur: false,\n    saveMessage: tct(\n      '[Caution]: Enabling auto resolve will immediately resolve anything that has ' +\n        'not been seen within this period of time. There is no undo!',\n      {\n        Caution: <strong>Caution</strong>,\n      }\n    ),\n    saveMessageAlertType: 'warning',\n  },\n\n  groupingConfig: {\n    name: 'groupingConfig',\n    type: 'array',\n    label: t('Grouping Config'),\n    saveOnBlur: false,\n    saveMessageAlertType: 'info',\n    saveMessage: t('Changing grouping config will apply to future events only.'),\n    selectionInfoFunction: args => {\n      const {groupingConfigs, value} = args;\n      const selection = groupingConfigs.find(({id}) => id === value);\n      const changelog = (selection && selection.changelog) || '';\n      if (!changelog) {\n        return null;\n      }\n      return (\n        <HintPanelItem>\n          <div>\n            <h2>{selection.id}:</h2>\n            <div dangerouslySetInnerHTML={{__html: marked(changelog)}} />\n          </div>\n        </HintPanelItem>\n      );\n    },\n    choices: ({groupingConfigs}) =>\n      groupingConfigs.map(({id, hidden}) => [\n        id.toString(),\n        <GroupingConfigItem key={id} isHidden={hidden}>\n          {id}\n        </GroupingConfigItem>,\n      ]),\n    help: t('Sets the grouping algorithm to be used for new events.'),\n    visible: ({features}) => features.has('set-grouping-config'),\n  },\n  groupingEnhancementsBase: {\n    name: 'groupingEnhancementsBase',\n    type: 'array',\n    label: t('Grouping Enhancements Base'),\n    saveOnBlur: false,\n    saveMessageAlertType: 'info',\n    saveMessage: t('Changing grouping enhancements will apply to future events only.'),\n    selectionInfoFunction: args => {\n      const {groupingEnhancementBases, value} = args;\n      const selection = groupingEnhancementBases.find(({id}) => id === value);\n      const changelog = (selection && selection.changelog) || '';\n      if (!changelog) {\n        return null;\n      }\n      return (\n        <HintPanelItem>\n          <div>\n            <h2>{selection.id}:</h2>\n            <div dangerouslySetInnerHTML={{__html: marked(changelog)}} />\n          </div>\n        </HintPanelItem>\n      );\n    },\n    choices: ({groupingEnhancementBases}) =>\n      groupingEnhancementBases.map(({id}) => [\n        id.toString(),\n        <GroupingConfigItem key={id}>{id}</GroupingConfigItem>,\n      ]),\n    help: t('The built-in base version of grouping enhancements.'),\n    visible: ({features}) => features.has('set-grouping-config'),\n  },\n  groupingEnhancements: {\n    name: 'groupingEnhancements',\n    type: 'string',\n    label: t('Custom Grouping Enhancements'),\n    placeholder: t('function:raise_an_exception ^-group\\nfunction:namespace::* +app'),\n    multiline: true,\n    monospace: true,\n    autosize: true,\n    inline: false,\n    maxRows: 20,\n    saveOnBlur: false,\n    saveMessageAlertType: 'info',\n    saveMessage: t('Changing grouping enhancements will apply to future events only.'),\n    formatMessageValue: false,\n    help: (\n      <React.Fragment>\n        <div style={{marginBottom: 3}}>\n          {tct(\n            `This can be used to enhance the grouping algorithm with custom rules.\n        Rules follow the pattern [pattern].`,\n            {\n              pattern: <code>matcher:glob [^v]?[+-]flag</code>,\n            }\n          )}\n        </div>\n        <pre>\n          {'# remove all frames above a certain function from grouping\\n' +\n            'function:panic_handler      ^-group\\n' +\n            '# mark all functions following a prefix in-app\\n' +\n            'function:mylibrary_*        +app\\n'}\n        </pre>\n      </React.Fragment>\n    ),\n    validate: () => [],\n    visible: ({features}) =>\n      features.has('set-grouping-config') || features.has('tweak-grouping-config'),\n  },\n  fingerprintingRules: {\n    name: 'fingerprintingRules',\n    type: 'string',\n    label: t('Server Side Fingerprinting'),\n    placeholder: t(\n      'type:MyException -> fingerprint-value\\nfunction:some_panic_function -> fingerprint-value'\n    ),\n    multiline: true,\n    monospace: true,\n    autosize: true,\n    inline: false,\n    maxRows: 20,\n    saveOnBlur: false,\n    saveMessageAlertType: 'info',\n    saveMessage: t('Changing fingerprinting rules will apply to future events only.'),\n    formatMessageValue: false,\n    help: (\n      <React.Fragment>\n        <div style={{marginBottom: 3}}>\n          {tct(\n            `This can be used to modify the fingerprinting rules on the server with custom rules.\n        Rules follow the pattern [pattern].`,\n            {\n              pattern: <code>matcher:glob -> fingerprint, values</code>,\n            }\n          )}\n        </div>\n        <pre>\n          {'# force all errors of the same type to have the same fingerprint\\n' +\n            'type:DatabaseUnavailable -> system-down\\n' +\n            '# force all memory allocation errors to be grouped together\\n' +\n            'family:native function:malloc -> memory-allocation-error\\n'}\n        </pre>\n      </React.Fragment>\n    ),\n    visible: ({features}) =>\n      features.has('set-grouping-config') || features.has('tweak-grouping-config'),\n  },\n\n  dataScrubber: {\n    name: 'dataScrubber',\n    type: 'boolean',\n    label: t('Data Scrubber'),\n    disabled: hasOrgOverride,\n    disabledReason: ORG_DISABLED_REASON,\n    help: t('Enable server-side data scrubbing'),\n    // `props` are the props given to FormField\n    setValue: (val, props) =>\n      (props.organization && props.organization[props.name]) || val,\n    confirm: {\n      false: t('Are you sure you want to disable server-side data scrubbing?'),\n    },\n  },\n  dataScrubberDefaults: {\n    name: 'dataScrubberDefaults',\n    type: 'boolean',\n    disabled: hasOrgOverride,\n    disabledReason: ORG_DISABLED_REASON,\n    label: t('Use Default Scrubbers'),\n    help: t(\n      'Apply default scrubbers to prevent things like passwords and credit cards from being stored'\n    ),\n    // `props` are the props given to FormField\n    setValue: (val, props) =>\n      (props.organization && props.organization[props.name]) || val,\n    confirm: {\n      false: t('Are you sure you want to disable using default scrubbers?'),\n    },\n  },\n  scrubIPAddresses: {\n    name: 'scrubIPAddresses',\n    type: 'boolean',\n    disabled: hasOrgOverride,\n    disabledReason: ORG_DISABLED_REASON,\n    // `props` are the props given to FormField\n    setValue: (val, props) =>\n      (props.organization && props.organization[props.name]) || val,\n    label: t('Prevent Storing of IP Addresses'),\n    help: t('Preventing IP addresses from being stored for new events'),\n    confirm: {\n      false: t('Are you sure you want to disable scrubbing IP addresses?'),\n    },\n  },\n  sensitiveFields: {\n    name: 'sensitiveFields',\n    type: 'string',\n    multiline: true,\n    autosize: true,\n    maxRows: 10,\n    placeholder: t('email'),\n    label: t('Additional Sensitive Fields'),\n    help: t(\n      'Additional field names to match against when scrubbing data. Separate multiple entries with a newline'\n    ),\n    getValue: val => extractMultilineFields(val),\n    setValue: val => convertMultilineFieldValue(val),\n  },\n  safeFields: {\n    name: 'safeFields',\n    type: 'string',\n    multiline: true,\n    autosize: true,\n    maxRows: 10,\n    placeholder: t('business-email'),\n    label: t('Safe Fields'),\n    help: t(\n      'Field names which data scrubbers should ignore. Separate multiple entries with a newline'\n    ),\n    getValue: val => extractMultilineFields(val),\n    setValue: val => convertMultilineFieldValue(val),\n  },\n  storeCrashReports: {\n    name: 'storeCrashReports',\n    type: 'range',\n    label: t('Store Native Crash Reports'),\n    help: t(\n      'Store native crash reports such as Minidumps for improved processing and download in issue details.  Overrides organization settings when enabled.'\n    ),\n    visible: ({features}) => features.has('event-attachments'),\n    formatLabel: formatStoreCrashReports,\n    allowedValues: STORE_CRASH_REPORTS_VALUES,\n  },\n  allowedDomains: {\n    name: 'allowedDomains',\n    type: 'string',\n    multiline: true,\n    autosize: true,\n    maxRows: 10,\n    placeholder: t('https://example.com or example.com'),\n    label: t('Allowed Domains'),\n    help: t('Separate multiple entries with a newline'),\n    getValue: val => extractMultilineFields(val),\n    setValue: val => convertMultilineFieldValue(val),\n  },\n  scrapeJavaScript: {\n    name: 'scrapeJavaScript',\n    type: 'boolean',\n    // if this is off for the organization, it cannot be enabled for the project\n    disabled: ({organization, name}) => !organization[name],\n    disabledReason: ORG_DISABLED_REASON,\n    // `props` are the props given to FormField\n    setValue: (val, props) => props.organization && props.organization[props.name] && val,\n    label: t('Enable JavaScript source fetching'),\n    help: t('Allow Sentry to scrape missing JavaScript source context when possible'),\n  },\n  securityToken: {\n    name: 'securityToken',\n    type: 'string',\n    label: t('Security Token'),\n    help: t(\n      'Outbound requests matching Allowed Domains will have the header \"{token_header}: {token}\" appended'\n    ),\n    setValue: value => getDynamicText({value, fixed: '__SECURITY_TOKEN__'}),\n  },\n  securityTokenHeader: {\n    name: 'securityTokenHeader',\n    type: 'string',\n    placeholder: t('X-Sentry-Token'),\n    label: t('Security Token Header'),\n    help: t(\n      'Outbound requests matching Allowed Domains will have the header \"{token_header}: {token}\" appended'\n    ),\n  },\n  verifySSL: {\n    name: 'verifySSL',\n    type: 'boolean',\n    label: t('Verify TLS/SSL'),\n    help: t('Outbound requests will verify TLS (sometimes known as SSL) connections'),\n  },\n};\n\nconst PlatformWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n`;\nconst StyledPlatformIcon = styled(PlatformIcon)`\n  border-radius: 3px;\n  margin-right: ${space(1)};\n`;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router/lib/Router';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport Link from 'app/components/links/link';\nimport {t, tct} from 'app/locale';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport Form from 'app/views/settings/components/forms/form';\nimport {fields} from 'app/data/forms/projectGeneralSettings';\nimport AsyncView from 'app/views/asyncView';\nimport ProjectActions from 'app/actions/projectActions';\nimport {Organization, Project} from 'app/types';\nimport withProject from 'app/utils/withProject';\n\nimport DataScrubbing from '../components/dataScrubbing';\n\nexport type ProjectSecurityAndPrivacyProps = RouteComponentProps<\n  {orgId: string; projectId: string},\n  {}\n> & {\n  organization: Organization;\n  project: Project;\n};\n\nclass ProjectSecurityAndPrivacy extends AsyncView<ProjectSecurityAndPrivacyProps> {\n  handleUpdateProject = (data: Project) => {\n    // This will update our project global state\n    ProjectActions.updateSuccess(data);\n  };\n\n  renderBody() {\n    const {organization, project} = this.props;\n    const initialData = project;\n    const endpoint = `/projects/${organization.slug}/${project.slug}/`;\n    const access = new Set(organization.access);\n    const features = new Set(organization.features);\n    const relayPiiConfig = project.relayPiiConfig;\n    const apiMethod = 'PUT';\n\n    return (\n      <React.Fragment>\n        <SettingsPageHeader title={t('Security & Privacy')} />\n        <Form\n          saveOnBlur\n          allowUndo\n          initialData={initialData}\n          apiMethod={apiMethod}\n          apiEndpoint={endpoint}\n          onSubmitSuccess={this.handleUpdateProject}\n          onSubmitError={() => addErrorMessage('Unable to save change')}\n        >\n          <JsonForm\n            title={t('Security & Privacy')}\n            additionalFieldProps={{\n              organization,\n            }}\n            features={features}\n            disabled={!access.has('project:write')}\n            fields={[fields.storeCrashReports]}\n          />\n          <JsonForm\n            title={t('Data Scrubbing')}\n            additionalFieldProps={{\n              organization,\n            }}\n            features={features}\n            disabled={!access.has('project:write')}\n            fields={[\n              fields.dataScrubber,\n              fields.dataScrubberDefaults,\n              fields.scrubIPAddresses,\n              fields.sensitiveFields,\n              fields.safeFields,\n            ]}\n          />\n        </Form>\n        <DataScrubbing\n          additionalContext={\n            <span>\n              {tct(\n                'These rules can be configured at the organization level in [linkToOrganizationSecurityAndPrivacy].',\n                {\n                  linkToOrganizationSecurityAndPrivacy: (\n                    <Link to={`/settings/${organization.slug}/security-and-privacy/`}>\n                      {t('Security and Privacy')}\n                    </Link>\n                  ),\n                }\n              )}\n            </span>\n          }\n          endpoint={endpoint}\n          relayPiiConfig={relayPiiConfig}\n          disabled={!access.has('project:write')}\n          organization={organization}\n          projectId={project.id}\n          onSubmitSuccess={this.handleUpdateProject}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withProject(ProjectSecurityAndPrivacy);\n"],"sourceRoot":""}