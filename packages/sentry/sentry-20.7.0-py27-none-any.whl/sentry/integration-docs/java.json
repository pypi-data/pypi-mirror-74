{
  "html": "<h2 id=\"installation\">Installation</h2>\n\n<p>Using Maven:</p>\n\n<pre class=\"highlight\"><code><span class=\"nt\">&lt;dependency&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>io.sentry<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>sentry<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;version&gt;</span>1.7.30<span class=\"nt\">&lt;/version&gt;</span>\n<span class=\"nt\">&lt;/dependency&gt;</span>\n</code></pre>\n\n<p>Using Gradle:</p>\n\n<pre class=\"highlight\"><code><span class=\"n\">compile</span> <span class=\"s1\">'io.sentry:sentry:1.7.30'</span>\n</code></pre>\n\n<p>Using SBT:</p>\n\n<pre class=\"highlight\"><code><span class=\"n\">libraryDependencies</span> <span class=\"o\">+=</span> <span class=\"s\">\"io.sentry\"</span> <span class=\"o\">%</span> <span class=\"s\">\"sentry\"</span> <span class=\"o\">%</span> <span class=\"s\">\"1.7.30\"</span>\n</code></pre>\n\n<p>For other dependency managers see the <a href=\"https://search.maven.org/#artifactdetails%7Cio.sentry%7Csentry%7C1.7.30%7Cjar\">central Maven repository</a>.\n\n</p>\n<h2 id=\"capture-an-error\">Capture an Error</h2>\n\n<p>To report an event manually you need to initialize a <code class=\"highlighter-rouge\">SentryClient</code>. It is recommended that you use the static API via the <code class=\"highlighter-rouge\">Sentry</code> class, but you can also construct and manage your own <code class=\"highlighter-rouge\">SentryClient</code> instance. An example of each style is shown below:</p>\n\n<pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">io.sentry.context.Context</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">io.sentry.event.BreadcrumbBuilder</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">io.sentry.event.UserBuilder</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">MyClass</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"n\">SentryClient</span> <span class=\"n\">sentry</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">...</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"cm\">/*\n         It is recommended that you use the DSN detection system, which\n         will check the environment variable \"SENTRY_DSN\", the Java\n         System Property \"sentry.dsn\", or the \"sentry.properties\" file\n         in your classpath. This makes it easier to provide and adjust\n         your DSN without needing to change your code. See the configuration\n         page for more information.\n\n         For example, using an environment variable\n\n         export SENTRY_DSN=\"___PUBLIC_DSN___\"\n         */</span>\n        <span class=\"n\">Sentry</span><span class=\"o\">.</span><span class=\"na\">init</span><span class=\"o\">();</span>\n\n        <span class=\"c1\">// You can also manually provide the DSN to the ``init`` method.</span>\n        <span class=\"c1\">// Sentry.init(\"___PUBLIC_DSN___\");</span>\n\n        <span class=\"cm\">/*\n         It is possible to go around the static ``Sentry`` API, which means\n         you are responsible for making the SentryClient instance available\n         to your code.\n         */</span>\n        <span class=\"n\">sentry</span> <span class=\"o\">=</span> <span class=\"n\">SentryClientFactory</span><span class=\"o\">.</span><span class=\"na\">sentryClient</span><span class=\"o\">();</span>\n\n        <span class=\"n\">MyClass</span> <span class=\"n\">myClass</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">MyClass</span><span class=\"o\">();</span>\n        <span class=\"n\">myClass</span><span class=\"o\">.</span><span class=\"na\">logWithStaticAPI</span><span class=\"o\">();</span>\n        <span class=\"n\">myClass</span><span class=\"o\">.</span><span class=\"na\">logWithInstanceAPI</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n      * An example method that throws an exception.\n      */</span>\n    <span class=\"kt\">void</span> <span class=\"nf\">unsafeMethod</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">UnsupportedOperationException</span><span class=\"o\">(</span><span class=\"s\">\"You shouldn't call this!\"</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n      * Examples using the (recommended) static API.\n      */</span>\n    <span class=\"kt\">void</span> <span class=\"nf\">logWithStaticAPI</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// Note that all fields set on the context are optional. Context data is copied onto</span>\n        <span class=\"c1\">// all future events in the current context (until the context is cleared).</span>\n\n        <span class=\"c1\">// Record a breadcrumb in the current context. By default the last 100 breadcrumbs are kept.</span>\n        <span class=\"n\">Sentry</span><span class=\"o\">.</span><span class=\"na\">getContext</span><span class=\"o\">().</span><span class=\"na\">recordBreadcrumb</span><span class=\"o\">(</span>\n            <span class=\"k\">new</span> <span class=\"nf\">BreadcrumbBuilder</span><span class=\"o\">().</span><span class=\"na\">setMessage</span><span class=\"o\">(</span><span class=\"s\">\"User made an action\"</span><span class=\"o\">).</span><span class=\"na\">build</span><span class=\"o\">()</span>\n        <span class=\"o\">);</span>\n\n        <span class=\"c1\">// Set the user in the current context.</span>\n        <span class=\"n\">Sentry</span><span class=\"o\">.</span><span class=\"na\">getContext</span><span class=\"o\">().</span><span class=\"na\">setUser</span><span class=\"o\">(</span>\n            <span class=\"k\">new</span> <span class=\"nf\">UserBuilder</span><span class=\"o\">().</span><span class=\"na\">setEmail</span><span class=\"o\">(</span><span class=\"s\">\"hello@sentry.io\"</span><span class=\"o\">).</span><span class=\"na\">build</span><span class=\"o\">()</span>\n        <span class=\"o\">);</span>\n\n        <span class=\"c1\">// Add extra data to future events in this context.</span>\n        <span class=\"n\">Sentry</span><span class=\"o\">.</span><span class=\"na\">getContext</span><span class=\"o\">().</span><span class=\"na\">addExtra</span><span class=\"o\">(</span><span class=\"s\">\"extra\"</span><span class=\"o\">,</span> <span class=\"s\">\"thing\"</span><span class=\"o\">);</span>\n\n        <span class=\"c1\">// Add an additional tag to future events in this context.</span>\n        <span class=\"n\">Sentry</span><span class=\"o\">.</span><span class=\"na\">getContext</span><span class=\"o\">().</span><span class=\"na\">addTag</span><span class=\"o\">(</span><span class=\"s\">\"tagName\"</span><span class=\"o\">,</span> <span class=\"s\">\"tagValue\"</span><span class=\"o\">);</span>\n\n        <span class=\"cm\">/*\n         This sends a simple event to Sentry using the statically stored instance\n         that was created in the ``main`` method.\n         */</span>\n        <span class=\"n\">Sentry</span><span class=\"o\">.</span><span class=\"na\">capture</span><span class=\"o\">(</span><span class=\"s\">\"This is a test\"</span><span class=\"o\">);</span>\n\n        <span class=\"k\">try</span> <span class=\"o\">{</span>\n            <span class=\"n\">unsafeMethod</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">Exception</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// This sends an exception event to Sentry using the statically stored instance</span>\n            <span class=\"c1\">// that was created in the ``main`` method.</span>\n            <span class=\"n\">Sentry</span><span class=\"o\">.</span><span class=\"na\">capture</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n      * Examples that use the SentryClient instance directly.\n      */</span>\n    <span class=\"kt\">void</span> <span class=\"nf\">logWithInstanceAPI</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// Retrieve the current context.</span>\n        <span class=\"n\">Context</span> <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">sentry</span><span class=\"o\">.</span><span class=\"na\">getContext</span><span class=\"o\">();</span>\n\n        <span class=\"c1\">// Record a breadcrumb in the current context. By default the last 100 breadcrumbs are kept.</span>\n        <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"na\">recordBreadcrumb</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">BreadcrumbBuilder</span><span class=\"o\">().</span><span class=\"na\">setMessage</span><span class=\"o\">(</span><span class=\"s\">\"User made an action\"</span><span class=\"o\">).</span><span class=\"na\">build</span><span class=\"o\">());</span>\n\n        <span class=\"c1\">// Set the user in the current context.</span>\n        <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"na\">setUser</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">UserBuilder</span><span class=\"o\">().</span><span class=\"na\">setEmail</span><span class=\"o\">(</span><span class=\"s\">\"hello@sentry.io\"</span><span class=\"o\">).</span><span class=\"na\">build</span><span class=\"o\">());</span>\n\n        <span class=\"c1\">// This sends a simple event to Sentry.</span>\n        <span class=\"n\">sentry</span><span class=\"o\">.</span><span class=\"na\">sendMessage</span><span class=\"o\">(</span><span class=\"s\">\"This is a test\"</span><span class=\"o\">);</span>\n\n        <span class=\"k\">try</span> <span class=\"o\">{</span>\n            <span class=\"n\">unsafeMethod</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">Exception</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// This sends an exception event to Sentry.</span>\n            <span class=\"n\">sentry</span><span class=\"o\">.</span><span class=\"na\">sendException</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre>", 
  "link": "https://docs.sentry.io/clients/java/", 
  "id": "java", 
  "name": "Java"
}
