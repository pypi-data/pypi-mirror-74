{
  "html": "<p>On its own, <code class=\"highlighter-rouge\">@sentry/browser</code> will report any uncaught exceptions triggered from your application. Additionally, you can configure <code class=\"highlighter-rouge\">@sentry/browser</code> to catch any Angular-specific exceptions reported through the <a href=\"https://angular.io/api/core/ErrorHandler\">@angular/core/ErrorHandler</a> component. This is also a great opportunity to collect user feedback by using <code class=\"highlighter-rouge\">Sentry.showReportDialog</code>.</p>\n\n<p>First, install <code class=\"highlighter-rouge\">@sentry/browser</code>:</p>\n\n<pre class=\"highlight\"><code><span class=\"c\"># Using yarn</span>\nyarn add @sentry/browser\n\n<span class=\"c\"># Using npm</span>\nnpm <span class=\"nb\">install</span> @sentry/browser\n</code></pre>\n\n<p>Then initialize a new Sentry instance and configure Angular with the <code class=\"highlighter-rouge\">ErrorHandler</code> provided and explained below:</p>\n\n<pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">BrowserModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s2\">\"@angular/platform-browser\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">NgModule</span><span class=\"p\">,</span> <span class=\"nx\">ErrorHandler</span><span class=\"p\">,</span> <span class=\"nx\">Injectable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s2\">\"@angular/core\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">HttpErrorResponse</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s2\">\"@angular/common/http\"</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">environment</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s2\">\"../environments/environment\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">AppComponent</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s2\">\"./app.component\"</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">Sentry</span> <span class=\"k\">from</span> <span class=\"s2\">\"@sentry/browser\"</span><span class=\"p\">;</span>\n\n<span class=\"nx\">Sentry</span><span class=\"p\">.</span><span class=\"nx\">init</span><span class=\"p\">({</span>\n  <span class=\"na\">dsn</span><span class=\"p\">:</span> <span class=\"s2\">\"___PUBLIC_DSN___\"</span><span class=\"p\">,</span>\n  <span class=\"c1\">// TryCatch has to be configured to disable XMLHttpRequest wrapping, as we are going to handle</span>\n  <span class=\"c1\">// http module exceptions manually in Angular's ErrorHandler and we don't want it to capture the same error twice.</span>\n  <span class=\"c1\">// Please note that TryCatch configuration requires at least @sentry/browser v5.16.0.</span>\n  <span class=\"na\">integrations</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"k\">new</span> <span class=\"nx\">Sentry</span><span class=\"p\">.</span><span class=\"nx\">Integrations</span><span class=\"p\">.</span><span class=\"nx\">TryCatch</span><span class=\"p\">({</span>\n    <span class=\"na\">XMLHttpRequest</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n  <span class=\"p\">})],</span>\n<span class=\"p\">});</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">SentryErrorHandler</span> <span class=\"kr\">implements</span> <span class=\"nx\">ErrorHandler</span> <span class=\"p\">{</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n\n  <span class=\"nx\">extractError</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// Try to unwrap zone.js error.</span>\n    <span class=\"c1\">// https://github.com/angular/angular/blob/master/packages/core/src/util/errors.ts</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">error</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">ngOriginalError</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">error</span> <span class=\"o\">=</span> <span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">ngOriginalError</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// We can handle messages and Error objects directly.</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">error</span> <span class=\"o\">===</span> <span class=\"s2\">\"string\"</span> <span class=\"o\">||</span> <span class=\"nx\">error</span> <span class=\"k\">instanceof</span> <span class=\"nb\">Error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"nx\">error</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// If it's http module error, extract as much information from it as we can.</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">error</span> <span class=\"k\">instanceof</span> <span class=\"nx\">HttpErrorResponse</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// The `error` property of http exception can be either an `Error` object, which we can use directly...</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">error</span> <span class=\"k\">instanceof</span> <span class=\"nb\">Error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"c1\">// ... or an`ErrorEvent`, which can provide us with the message but no stack...</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">error</span> <span class=\"k\">instanceof</span> <span class=\"nx\">ErrorEvent</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"c1\">// ...or the request body itself, which we can use as a message instead.</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">error</span> <span class=\"o\">===</span> <span class=\"s2\">\"string\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"s2\">`Server returned code </span><span class=\"p\">${</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">}</span><span class=\"s2\"> with body \"</span><span class=\"p\">${</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">}</span><span class=\"s2\">\"`</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"c1\">// If we don't have any detailed information, fallback to the request message itself.</span>\n      <span class=\"k\">return</span> <span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// Skip if there's no error, and let user decide what to do with it.</span>\n    <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">handleError</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">extractedError</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">extractError</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"s2\">\"Handled unknown error\"</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// Capture handled exception and send it to Sentry.</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">eventId</span> <span class=\"o\">=</span> <span class=\"nx\">Sentry</span><span class=\"p\">.</span><span class=\"nx\">captureException</span><span class=\"p\">(</span><span class=\"nx\">extractedError</span><span class=\"p\">);</span>\n    \n    <span class=\"c1\">// When in development mode, log the error to console for immediate feedback.</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">environment</span><span class=\"p\">.</span><span class=\"nx\">production</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"nx\">extractedError</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"c1\">// Optionally show user dialog to provide details on what happened.</span>\n    <span class=\"nx\">Sentry</span><span class=\"p\">.</span><span class=\"nx\">showReportDialog</span><span class=\"p\">({</span> <span class=\"nx\">eventId</span> <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">@</span><span class=\"nd\">NgModule</span><span class=\"p\">({</span>\n  <span class=\"na\">declarations</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">AppComponent</span><span class=\"p\">],</span>\n  <span class=\"na\">imports</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">BrowserModule</span><span class=\"p\">],</span>\n  <span class=\"na\">providers</span><span class=\"p\">:</span> <span class=\"p\">[{</span> <span class=\"na\">provide</span><span class=\"p\">:</span> <span class=\"nx\">ErrorHandler</span><span class=\"p\">,</span> <span class=\"na\">useClass</span><span class=\"p\">:</span> <span class=\"nx\">SentryErrorHandler</span> <span class=\"p\">}],</span>\n  <span class=\"na\">bootstrap</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">AppComponent</span><span class=\"p\">]</span>\n<span class=\"p\">})</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppModule</span> <span class=\"p\">{}</span>\n</code></pre>\n\n<p>When using your own <code class=\"highlighter-rouge\">ErrorHandler</code>, make sure that whenever you use <code class=\"highlighter-rouge\">HttpInterceptor</code> alongside it,\nthe interceptor doesn\u2019t modify the error captured originally.\nThe same goes for writing your own API services with built-in <code class=\"highlighter-rouge\">http</code> methods.</p>\n\n<p>For example, the service below makes it impossible for the SDK to extract the correct data, because the full, original error <code class=\"highlighter-rouge\">e</code> is not propagated.</p>\n\n<pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">ApiService</span> <span class=\"p\">{</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">http</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">formatErrors</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'Captured service error'</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"nx\">throwError</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">http</span>\n      <span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"nx\">pipe</span><span class=\"p\">(</span><span class=\"nx\">catchError</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formatErrors</span><span class=\"p\">));</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n<p>Instead, make sure that you always rethrow or directly pass the original error. For example:</p>\n\n<pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">ApiService</span> <span class=\"p\">{</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">http</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  \n  <span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">http</span>\n      <span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"nx\">pipe</span><span class=\"p\">(</span><span class=\"nx\">catchError</span><span class=\"p\">((</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">throwError</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)));</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n<h2 id=\"angularjs-1x\">AngularJS 1.x</h2>\n\n<p>If you\u2019re using <code class=\"highlighter-rouge\">AngularJS 1.x</code>, you can use Sentry\u2019s AngularJS integration.</p>\n\n<p>First, install <code class=\"highlighter-rouge\">@sentry/browser</code> and <code class=\"highlighter-rouge\">@sentry/integrations</code>:</p>\n\n<pre class=\"highlight\"><code><span class=\"c\"># Using yarn</span>\nyarn add @sentry/browser @sentry/integrations\n\n<span class=\"c\"># Using npm</span>\nnpm <span class=\"nb\">install</span> @sentry/browser @sentry/integrations\n</code></pre>\n\n<pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"nx\">angular</span> <span class=\"k\">from</span> <span class=\"s1\">'angular'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">Sentry</span> <span class=\"k\">from</span> <span class=\"s1\">'@sentry/browser'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Angular</span> <span class=\"k\">as</span> <span class=\"nx\">AngularIntegration</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@sentry/integrations'</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Make sure to call Sentry.init after importing AngularJS. </span>\n<span class=\"c1\">// You can also pass {angular: AngularInstance} to the Integrations.Angular() constructor.</span>\n<span class=\"nx\">Sentry</span><span class=\"p\">.</span><span class=\"nx\">init</span><span class=\"p\">({</span>\n  <span class=\"na\">dsn</span><span class=\"p\">:</span> <span class=\"s1\">'___PUBLIC_DSN___'</span><span class=\"p\">,</span>\n  <span class=\"na\">integrations</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"k\">new</span> <span class=\"nx\">AngularIntegration</span><span class=\"p\">(),</span>\n  <span class=\"p\">],</span>\n<span class=\"p\">});</span>\n\n<span class=\"c1\">// Finally require ngSentry as a dependency in your application module.</span>\n<span class=\"nx\">angular</span><span class=\"p\">.</span><span class=\"nx\">module</span><span class=\"p\">(</span><span class=\"s1\">'yourApplicationModule'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'ngSentry'</span><span class=\"p\">]);</span>\n\n</code></pre>\n\n<p>In case you\u2019re using the CDN version or the Loader, Sentry provides a standalone file for every integration:</p>\n\n<pre class=\"highlight\"><code><span class=\"c\">&lt;!-- Note that we now also provide a es6 build only --&gt;</span>\n<span class=\"c\">&lt;!-- &lt;script src=\"https://browser.sentry-cdn.com/5.19.2/bundle.es6.min.js\" integrity=\"sha384-l7FJjMdvFEw0yHY/eelUliZXu1y7B9847u2G/j30B+HA6SIVHPAmKfDY5bccSRSe\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; --&gt;</span>\n<span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">\"https://browser.sentry-cdn.com/5.19.2/bundle.min.js\"</span> <span class=\"na\">integrity=</span><span class=\"s\">\"sha384-JpEWxJ7oLRn+baXBgcCKEv73uYWsgouzEResgJneOXvTjDZ+1crAXcNAKZoiL96Z\"</span> <span class=\"na\">crossorigin=</span><span class=\"s\">\"anonymous\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n\n<span class=\"c\">&lt;!-- If you include the integration it will be available under Sentry.Integrations.Angular --&gt;</span>\n<span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">\"https://browser.sentry-cdn.com/5.19.2/angular.min.js\"</span> <span class=\"na\">crossorigin=</span><span class=\"s\">\"anonymous\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n\n<span class=\"nt\">&lt;script&gt;</span>\n  <span class=\"nx\">Sentry</span><span class=\"p\">.</span><span class=\"nx\">init</span><span class=\"p\">({</span>\n    <span class=\"na\">dsn</span><span class=\"p\">:</span> <span class=\"s1\">'___PUBLIC_DSN___'</span><span class=\"p\">,</span>\n    <span class=\"na\">integrations</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"k\">new</span> <span class=\"nx\">Sentry</span><span class=\"p\">.</span><span class=\"nx\">Integrations</span><span class=\"p\">.</span><span class=\"nx\">Angular</span><span class=\"p\">(),</span>\n    <span class=\"p\">],</span>\n  <span class=\"p\">});</span>\n<span class=\"nt\">&lt;/script&gt;</span>\n</code></pre>\n<!-- TODO-ADD-VERIFICATION-EXAMPLE -->", 
  "link": "https://docs.sentry.io/platforms/javascript/angular/", 
  "id": "javascript-angular", 
  "name": "Angular"
}
