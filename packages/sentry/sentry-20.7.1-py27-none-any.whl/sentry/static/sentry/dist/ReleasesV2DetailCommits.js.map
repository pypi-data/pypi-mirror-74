{"version":3,"sources":["webpack:///./app/components/commitLink.tsx","webpack:///./app/components/well.tsx","webpack:///./app/components/commitRow.tsx","webpack:///./app/styles/overflowEllipsisLeft.tsx","webpack:///./app/views/releasesV2/detail/releaseNoCommitData.tsx","webpack:///./app/views/releasesV2/detail/commits/index.tsx"],"names":["SUPPORTED_PROVIDERS","icon","size","providerIds","commitUrl","baseUrl","commitId","CommitLink","inline","repository","t","shortId","getShortCommitHash","providerData","find","provider","includes","id","undefined","url","className","href","external","Well","p","theme","borderLight","gray100","hasImage","centered","propTypes","PropTypes","bool","CommitRow","message","split","author","EmailWarning","tct","actorEmail","email","accountSettings","StyledLink","to","inviteUser","onClick","openInviteMembersModal","initialData","emails","Set","source","this","props","commit","customAvatar","dateCreated","nonMemberEmail","key","AvatarWrapper","body","renderHovercardBody","user","EmailWarningIcon","src","CommitMessage","Message","renderMessage","Meta","name","timeago","date","React","Component","space","fontSizeSmall","Link","textColor","InlineSvg","white","yellow300","TextOverflow","gray600","ReleaseNoCommitData","orgId","StyledWell","priority","ALL_REPOSITORIES_LABEL","ReleaseCommits","handleRepoFilterChange","repo","setState","activeRepo","params","organization","routeTitleGen","formatVersion","release","slug","project","context","encodeURIComponent","commitsByRepository","repos","Object","keys","state","RepoSwitcher","label","Fragment","FilterText","map","repoName","onSelect","eventKey","isActive","RepoLabel","commits","getCommitsByRepository","reposToRender","length","small","renderRepoSwitcher","renderCommitsForRepo","fullWidth","AsyncView","contextType","ReleaseContext","gray500","overflowEllipsisLeft","withOrganization"],"mappings":"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","file":"ReleasesV2DetailCommits.js","sourcesContent":["import React from 'react';\n\nimport {Repository} from 'app/types';\nimport {t} from 'app/locale';\nimport {getShortCommitHash} from 'app/utils';\nimport Button from 'app/components/button';\nimport {IconBitbucket, IconGithub, IconGitlab, IconVsts} from 'app/icons';\nimport ExternalLink from 'app/components/links/externalLink';\n\ntype CommitFormatterParameters = {\n  baseUrl: string;\n  commitId: string;\n};\n\ntype CommitProvider = {\n  icon: React.ReactNode;\n  providerIds: string[];\n  commitUrl: (CommitFormatterParameters) => string;\n};\n\n// TODO(epurkhiser, jess): This should be moved into plugins.\nconst SUPPORTED_PROVIDERS: Readonly<CommitProvider[]> = [\n  {\n    icon: <IconGithub size=\"xs\" />,\n    providerIds: ['github', 'integrations:github', 'integrations:github_enterprise'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commit/${commitId}`,\n  },\n  {\n    icon: <IconBitbucket size=\"xs\" />,\n    providerIds: ['bitbucket', 'integrations:bitbucket'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commits/${commitId}`,\n  },\n  {\n    icon: <IconVsts size=\"xs\" />,\n    providerIds: ['visualstudio', 'integrations:vsts'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commit/${commitId}`,\n  },\n  {\n    icon: <IconGitlab size=\"xs\" />,\n    providerIds: ['gitlab', 'integrations:gitlab'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commit/${commitId}`,\n  },\n];\n\ntype Props = {\n  commitId: string;\n  repository?: Repository;\n  inline?: boolean;\n};\n\nfunction CommitLink({inline, commitId, repository}: Props) {\n  if (!commitId || !repository) {\n    return <span>{t('Unknown Commit')}</span>;\n  }\n\n  const shortId = getShortCommitHash(commitId);\n\n  const providerData = SUPPORTED_PROVIDERS.find(provider => {\n    if (!repository.provider) {\n      return false;\n    }\n    return provider.providerIds.includes(repository.provider.id);\n  });\n\n  if (providerData === undefined) {\n    return <span>{shortId}</span>;\n  }\n\n  const commitUrl =\n    repository.url &&\n    providerData.commitUrl({\n      commitId,\n      baseUrl: repository.url,\n    });\n\n  return !inline ? (\n    <Button external href={commitUrl} size=\"small\" icon={providerData.icon}>\n      {shortId}\n    </Button>\n  ) : (\n    <ExternalLink className=\"inline-commit\" href={commitUrl}>\n      {providerData.icon}\n      {' ' + shortId}\n    </ExternalLink>\n  );\n}\n\nexport default CommitLink;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\n\ntype Props = {\n  hasImage?: boolean;\n  centered?: boolean;\n  children: React.ReactNode;\n  theme?: any;\n};\n\ntype WellProps = Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props;\n\nconst Well = styled('div')<WellProps>`\n  border: 1px solid ${p => p.theme.borderLight};\n  box-shadow: none;\n  background: ${p => p.theme.gray100};\n  padding: ${p => (p.hasImage ? '80px 30px' : '15px 20px')};\n  margin-bottom: 20px;\n  border-radius: 3px;\n  ${p => p.centered && 'text-align: center'};\n`;\n\nWell.propTypes = {\n  hasImage: PropTypes.bool,\n  centered: PropTypes.bool,\n};\n\nexport default Well;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Commit} from 'app/types';\nimport {openInviteMembersModal} from 'app/actionCreators/modal';\nimport {PanelItem} from 'app/components/panels';\nimport {t, tct} from 'app/locale';\nimport UserAvatar from 'app/components/avatar/userAvatar';\nimport CommitLink from 'app/components/commitLink';\nimport Hovercard from 'app/components/hovercard';\nimport InlineSvg from 'app/components/inlineSvg';\nimport Link from 'app/components/links/link';\nimport TextOverflow from 'app/components/textOverflow';\nimport TimeSince from 'app/components/timeSince';\nimport space from 'app/styles/space';\n\ntype Props = {\n  commit: Commit;\n  customAvatar?: React.ReactNode;\n};\n\nclass CommitRow extends React.Component<Props> {\n  static propTypes = {\n    commit: PropTypes.object,\n    customAvatar: PropTypes.node,\n  };\n\n  renderMessage(message: string): string {\n    if (!message) {\n      return t('No message provided');\n    }\n\n    const firstLine = message.split(/\\n/)[0];\n\n    return firstLine;\n  }\n\n  renderHovercardBody(author) {\n    return (\n      <EmailWarning>\n        {tct(\n          'The email [actorEmail] is not a member of your organization. [inviteUser:Invite] them or link additional emails in [accountSettings:account settings].',\n          {\n            actorEmail: <strong>{author.email}</strong>,\n            accountSettings: <StyledLink to=\"/settings/account/emails/\" />,\n            inviteUser: (\n              <StyledLink\n                to=\"\"\n                onClick={() =>\n                  openInviteMembersModal({\n                    initialData: [\n                      {\n                        emails: new Set([author.email]),\n                      },\n                    ],\n                    source: 'suspect_commit',\n                  })\n                }\n              />\n            ),\n          }\n        )}\n      </EmailWarning>\n    );\n  }\n\n  render() {\n    const {commit, customAvatar, ...props} = this.props;\n    const {id, dateCreated, message, author, repository} = commit;\n    const nonMemberEmail = author && author.id === undefined;\n\n    return (\n      <PanelItem key={id} {...props}>\n        {customAvatar ? (\n          customAvatar\n        ) : nonMemberEmail ? (\n          <AvatarWrapper>\n            <Hovercard body={this.renderHovercardBody(author)}>\n              <UserAvatar size={36} user={author} />\n              <EmailWarningIcon src=\"icon-circle-exclamation\" />\n            </Hovercard>\n          </AvatarWrapper>\n        ) : (\n          <AvatarWrapper>\n            <UserAvatar size={36} user={author} />\n          </AvatarWrapper>\n        )}\n\n        <CommitMessage>\n          <Message>{this.renderMessage(message)}</Message>\n          <Meta>\n            {tct('[author] committed [timeago]', {\n              author: <strong>{(author && author.name) || t('Unknown author')}</strong>,\n              timeago: <TimeSince date={dateCreated} />,\n            })}\n          </Meta>\n        </CommitMessage>\n\n        <div>\n          <CommitLink commitId={id} repository={repository} />\n        </div>\n      </PanelItem>\n    );\n  }\n}\n\nconst AvatarWrapper = styled('div')`\n  align-self: flex-start;\n  margin-right: ${space(2)};\n`;\n\nconst EmailWarning = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  line-height: 1.4;\n  margin: -4px;\n`;\n\nconst StyledLink = styled(Link)`\n  color: ${p => p.theme.textColor};\n  border-bottom: 1px dotted ${p => p.theme.textColor};\n\n  &:hover {\n    color: ${p => p.theme.textColor};\n  }\n`;\n\nconst EmailWarningIcon = styled(InlineSvg)`\n  position: relative;\n  margin-left: -11px;\n  border-radius: 11px;\n  margin-bottom: -25px;\n  border: 1px solid ${p => p.theme.white};\n  background: ${p => p.theme.yellow300};\n`;\n\nconst CommitMessage = styled('div')`\n  flex: 1;\n  flex-direction: column;\n  min-width: 0;\n  margin-right: ${space(2)};\n`;\n\nconst Message = styled(TextOverflow)`\n  font-size: 15px;\n  line-height: 1.1;\n  font-weight: bold;\n`;\n\nconst Meta = styled(TextOverflow)`\n  font-size: 13px;\n  line-height: 1.5;\n  margin: 0;\n  color: ${p => p.theme.gray600};\n`;\n\nexport default styled(CommitRow)`\n  align-items: center;\n`;\n","export default `\n  display: block;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  width: 100%;\n  direction: rtl;\n  text-align: left;\n`;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport Button from 'app/components/button';\nimport Well from 'app/components/well';\nimport {IconCommit} from 'app/icons';\n\ntype Props = {\n  orgId: string;\n};\n\nconst ReleaseNoCommitData = ({orgId}: Props) => (\n  <StyledWell centered>\n    <IconCommit size=\"xl\" />\n    <h4>{t('Releases are better with commit data!')}</h4>\n    <p>\n      {t(\n        'Connect a repository to see commit info, files changed, and authors involved in future releases.'\n      )}\n    </p>\n    <Button priority=\"primary\" to={`/settings/${orgId}/repos/`}>\n      {t('Connect a repository')}\n    </Button>\n  </StyledWell>\n);\n\nconst StyledWell = styled(Well)`\n  background-color: ${p => p.theme.white};\n  padding-top: ${space(2)};\n  padding-bottom: ${space(4)};\n`;\n\nexport default ReleaseNoCommitData;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router/lib/Router';\nimport styled from '@emotion/styled';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport CommitRow from 'app/components/commitRow';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Repository, Commit, Organization} from 'app/types';\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport {PanelHeader, Panel, PanelBody} from 'app/components/panels';\nimport DropdownControl, {DropdownItem} from 'app/components/dropdownControl';\nimport overflowEllipsisLeft from 'app/styles/overflowEllipsisLeft';\nimport AsyncView from 'app/views/asyncView';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport {formatVersion} from 'app/utils/formatters';\nimport withOrganization from 'app/utils/withOrganization';\nimport {Main} from 'app/components/layouts/thirds';\n\nimport {getCommitsByRepository, CommitsByRepository} from '../utils';\nimport ReleaseNoCommitData from '../releaseNoCommitData';\nimport {ReleaseContext} from '../';\n\nconst ALL_REPOSITORIES_LABEL = t('All Repositories');\n\ntype RouteParams = {\n  orgId: string;\n  release: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  organization: Organization;\n};\n\ntype State = {\n  commits: Commit[];\n  repos: Repository[];\n  activeRepo: string;\n} & AsyncComponent['state'];\n\nclass ReleaseCommits extends AsyncView<Props, State> {\n  static contextType = ReleaseContext;\n\n  getTitle() {\n    const {params, organization} = this.props;\n    return routeTitleGen(\n      t('Commits - Release %s', formatVersion(params.release)),\n      organization.slug,\n      false\n    );\n  }\n\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      activeRepo: ALL_REPOSITORIES_LABEL,\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {params} = this.props;\n    const {orgId, release} = params;\n\n    const {project} = this.context;\n\n    return [\n      [\n        'commits',\n        `/projects/${orgId}/${project.slug}/releases/${encodeURIComponent(\n          release\n        )}/commits/`,\n      ],\n      ['repos', `/organizations/${orgId}/repos/`],\n    ];\n  }\n\n  handleRepoFilterChange = (repo: string) => {\n    this.setState({activeRepo: repo});\n  };\n\n  renderRepoSwitcher(commitsByRepository: CommitsByRepository) {\n    const repos = Object.keys(commitsByRepository);\n    const {activeRepo} = this.state;\n\n    return (\n      <RepoSwitcher>\n        <DropdownControl\n          label={\n            <React.Fragment>\n              <FilterText>{t('Filter')}: &nbsp; </FilterText>\n              {activeRepo}\n            </React.Fragment>\n          }\n        >\n          {[ALL_REPOSITORIES_LABEL, ...repos].map(repoName => (\n            <DropdownItem\n              key={repoName}\n              onSelect={this.handleRepoFilterChange}\n              eventKey={repoName}\n              isActive={repoName === activeRepo}\n            >\n              <RepoLabel>{repoName}</RepoLabel>\n            </DropdownItem>\n          ))}\n        </DropdownControl>\n      </RepoSwitcher>\n    );\n  }\n\n  renderCommitsForRepo(repo: string, commitsByRepository: CommitsByRepository) {\n    return (\n      <Panel key={repo}>\n        <PanelHeader>{repo}</PanelHeader>\n        <PanelBody>\n          {commitsByRepository[repo].map(commit => (\n            <CommitRow key={commit.id} commit={commit} />\n          ))}\n        </PanelBody>\n      </Panel>\n    );\n  }\n\n  renderBody() {\n    const {orgId} = this.props.params;\n    const {commits, repos, activeRepo} = this.state;\n\n    const commitsByRepository = getCommitsByRepository(commits);\n    const reposToRender =\n      activeRepo === ALL_REPOSITORIES_LABEL\n        ? Object.keys(commitsByRepository)\n        : [activeRepo];\n\n    if (repos.length === 0) {\n      return <ReleaseNoCommitData orgId={orgId} />;\n    }\n\n    if (commits.length === 0) {\n      return (\n        <Panel>\n          <PanelBody>\n            <EmptyStateWarning small>\n              {t('There are no commits associated with this release.')}\n            </EmptyStateWarning>\n          </PanelBody>\n        </Panel>\n      );\n    }\n\n    return (\n      <React.Fragment>\n        {Object.keys(commitsByRepository).length > 1 &&\n          this.renderRepoSwitcher(commitsByRepository)}\n        {reposToRender.map(repoName =>\n          this.renderCommitsForRepo(repoName, commitsByRepository)\n        )}\n      </React.Fragment>\n    );\n  }\n\n  renderComponent() {\n    return <Main fullWidth>{super.renderComponent()}</Main>;\n  }\n}\n\nconst RepoSwitcher = styled('div')`\n  margin-bottom: ${space(1)};\n`;\n\nconst FilterText = styled('em')`\n  font-style: normal;\n  color: ${p => p.theme.gray500};\n`;\n\nconst RepoLabel = styled('div')`\n  ${overflowEllipsisLeft}\n`;\n\nexport default withOrganization(ReleaseCommits);\n"],"sourceRoot":""}