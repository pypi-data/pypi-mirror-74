{"version":3,"sources":["webpack:///./app/components/commitLink.tsx","webpack:///./app/components/commitRow.tsx","webpack:///./app/views/releases/detail/releaseCommits.jsx"],"names":["SUPPORTED_PROVIDERS","icon","size","providerIds","commitUrl","baseUrl","commitId","CommitLink","inline","repository","t","shortId","getShortCommitHash","providerData","find","provider","includes","id","undefined","url","className","href","external","CommitRow","message","split","author","EmailWarning","tct","actorEmail","email","accountSettings","StyledLink","to","inviteUser","onClick","openInviteMembersModal","initialData","emails","Set","source","this","props","commit","customAvatar","dateCreated","nonMemberEmail","key","AvatarWrapper","body","renderHovercardBody","user","EmailWarningIcon","src","CommitMessage","Message","renderMessage","Meta","name","timeago","date","React","Component","space","p","theme","fontSizeSmall","Link","textColor","InlineSvg","white","yellow300","TextOverflow","gray600","ReleaseCommits","state","loading","error","commitList","activeRepo","api","request","getPath","method","data","omit","location","query","Object","values","URL_PARAM","success","_","jqXHR","setState","pageLinks","getResponseHeader","params","orgId","projectId","release","encodedVersion","encodeURIComponent","repo","reduce","cbr","hasOwnProperty","push","activeCommits","getCommitsByRepository","map","length","emptyState","commitsByRepository","keys","caret","title","noAnchor","setActiveRepo","isActive","renderCommitsForRepo","withApi"],"mappings":"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","file":"ReleaseCommits.js","sourcesContent":["import React from 'react';\n\nimport {Repository} from 'app/types';\nimport {t} from 'app/locale';\nimport {getShortCommitHash} from 'app/utils';\nimport Button from 'app/components/button';\nimport {IconBitbucket, IconGithub, IconGitlab, IconVsts} from 'app/icons';\nimport ExternalLink from 'app/components/links/externalLink';\n\ntype CommitFormatterParameters = {\n  baseUrl: string;\n  commitId: string;\n};\n\ntype CommitProvider = {\n  icon: React.ReactNode;\n  providerIds: string[];\n  commitUrl: (CommitFormatterParameters) => string;\n};\n\n// TODO(epurkhiser, jess): This should be moved into plugins.\nconst SUPPORTED_PROVIDERS: Readonly<CommitProvider[]> = [\n  {\n    icon: <IconGithub size=\"xs\" />,\n    providerIds: ['github', 'integrations:github', 'integrations:github_enterprise'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commit/${commitId}`,\n  },\n  {\n    icon: <IconBitbucket size=\"xs\" />,\n    providerIds: ['bitbucket', 'integrations:bitbucket'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commits/${commitId}`,\n  },\n  {\n    icon: <IconVsts size=\"xs\" />,\n    providerIds: ['visualstudio', 'integrations:vsts'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commit/${commitId}`,\n  },\n  {\n    icon: <IconGitlab size=\"xs\" />,\n    providerIds: ['gitlab', 'integrations:gitlab'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commit/${commitId}`,\n  },\n];\n\ntype Props = {\n  commitId: string;\n  repository?: Repository;\n  inline?: boolean;\n};\n\nfunction CommitLink({inline, commitId, repository}: Props) {\n  if (!commitId || !repository) {\n    return <span>{t('Unknown Commit')}</span>;\n  }\n\n  const shortId = getShortCommitHash(commitId);\n\n  const providerData = SUPPORTED_PROVIDERS.find(provider => {\n    if (!repository.provider) {\n      return false;\n    }\n    return provider.providerIds.includes(repository.provider.id);\n  });\n\n  if (providerData === undefined) {\n    return <span>{shortId}</span>;\n  }\n\n  const commitUrl =\n    repository.url &&\n    providerData.commitUrl({\n      commitId,\n      baseUrl: repository.url,\n    });\n\n  return !inline ? (\n    <Button external href={commitUrl} size=\"small\" icon={providerData.icon}>\n      {shortId}\n    </Button>\n  ) : (\n    <ExternalLink className=\"inline-commit\" href={commitUrl}>\n      {providerData.icon}\n      {' ' + shortId}\n    </ExternalLink>\n  );\n}\n\nexport default CommitLink;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Commit} from 'app/types';\nimport {openInviteMembersModal} from 'app/actionCreators/modal';\nimport {PanelItem} from 'app/components/panels';\nimport {t, tct} from 'app/locale';\nimport UserAvatar from 'app/components/avatar/userAvatar';\nimport CommitLink from 'app/components/commitLink';\nimport Hovercard from 'app/components/hovercard';\nimport InlineSvg from 'app/components/inlineSvg';\nimport Link from 'app/components/links/link';\nimport TextOverflow from 'app/components/textOverflow';\nimport TimeSince from 'app/components/timeSince';\nimport space from 'app/styles/space';\n\ntype Props = {\n  commit: Commit;\n  customAvatar?: React.ReactNode;\n};\n\nclass CommitRow extends React.Component<Props> {\n  static propTypes = {\n    commit: PropTypes.object,\n    customAvatar: PropTypes.node,\n  };\n\n  renderMessage(message: string): string {\n    if (!message) {\n      return t('No message provided');\n    }\n\n    const firstLine = message.split(/\\n/)[0];\n\n    return firstLine;\n  }\n\n  renderHovercardBody(author) {\n    return (\n      <EmailWarning>\n        {tct(\n          'The email [actorEmail] is not a member of your organization. [inviteUser:Invite] them or link additional emails in [accountSettings:account settings].',\n          {\n            actorEmail: <strong>{author.email}</strong>,\n            accountSettings: <StyledLink to=\"/settings/account/emails/\" />,\n            inviteUser: (\n              <StyledLink\n                to=\"\"\n                onClick={() =>\n                  openInviteMembersModal({\n                    initialData: [\n                      {\n                        emails: new Set([author.email]),\n                      },\n                    ],\n                    source: 'suspect_commit',\n                  })\n                }\n              />\n            ),\n          }\n        )}\n      </EmailWarning>\n    );\n  }\n\n  render() {\n    const {commit, customAvatar, ...props} = this.props;\n    const {id, dateCreated, message, author, repository} = commit;\n    const nonMemberEmail = author && author.id === undefined;\n\n    return (\n      <PanelItem key={id} {...props}>\n        {customAvatar ? (\n          customAvatar\n        ) : nonMemberEmail ? (\n          <AvatarWrapper>\n            <Hovercard body={this.renderHovercardBody(author)}>\n              <UserAvatar size={36} user={author} />\n              <EmailWarningIcon src=\"icon-circle-exclamation\" />\n            </Hovercard>\n          </AvatarWrapper>\n        ) : (\n          <AvatarWrapper>\n            <UserAvatar size={36} user={author} />\n          </AvatarWrapper>\n        )}\n\n        <CommitMessage>\n          <Message>{this.renderMessage(message)}</Message>\n          <Meta>\n            {tct('[author] committed [timeago]', {\n              author: <strong>{(author && author.name) || t('Unknown author')}</strong>,\n              timeago: <TimeSince date={dateCreated} />,\n            })}\n          </Meta>\n        </CommitMessage>\n\n        <div>\n          <CommitLink commitId={id} repository={repository} />\n        </div>\n      </PanelItem>\n    );\n  }\n}\n\nconst AvatarWrapper = styled('div')`\n  align-self: flex-start;\n  margin-right: ${space(2)};\n`;\n\nconst EmailWarning = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  line-height: 1.4;\n  margin: -4px;\n`;\n\nconst StyledLink = styled(Link)`\n  color: ${p => p.theme.textColor};\n  border-bottom: 1px dotted ${p => p.theme.textColor};\n\n  &:hover {\n    color: ${p => p.theme.textColor};\n  }\n`;\n\nconst EmailWarningIcon = styled(InlineSvg)`\n  position: relative;\n  margin-left: -11px;\n  border-radius: 11px;\n  margin-bottom: -25px;\n  border: 1px solid ${p => p.theme.white};\n  background: ${p => p.theme.yellow300};\n`;\n\nconst CommitMessage = styled('div')`\n  flex: 1;\n  flex-direction: column;\n  min-width: 0;\n  margin-right: ${space(2)};\n`;\n\nconst Message = styled(TextOverflow)`\n  font-size: 15px;\n  line-height: 1.1;\n  font-weight: bold;\n`;\n\nconst Meta = styled(TextOverflow)`\n  font-size: 13px;\n  line-height: 1.5;\n  margin: 0;\n  color: ${p => p.theme.gray600};\n`;\n\nexport default styled(CommitRow)`\n  align-items: center;\n`;\n","import PropTypes from 'prop-types';\nimport omit from 'lodash/omit';\nimport React from 'react';\n\nimport {Panel, PanelHeader, PanelBody} from 'app/components/panels';\nimport {URL_PARAM} from 'app/constants/globalSelectionHeader';\nimport {t} from 'app/locale';\nimport withApi from 'app/utils/withApi';\nimport CommitRow from 'app/components/commitRow';\nimport DropdownLink from 'app/components/dropdownLink';\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport MenuItem from 'app/components/menuItem';\n\nclass ReleaseCommits extends React.Component {\n  static propTypes = {\n    api: PropTypes.object,\n  };\n\n  state = {\n    loading: true,\n    error: false,\n    commitList: [],\n    activeRepo: null,\n  };\n\n  componentDidMount() {\n    this.props.api.request(this.getPath(), {\n      method: 'GET',\n      // We need to omit global selection header url params because they are not supported\n      data: omit(this.props.location.query, Object.values(URL_PARAM)),\n      success: (data, _, jqXHR) => {\n        this.setState({\n          error: false,\n          loading: false,\n          commitList: data,\n          pageLinks: jqXHR.getResponseHeader('Link'),\n        });\n      },\n      error: () => {\n        this.setState({\n          error: true,\n          loading: false,\n        });\n      },\n    });\n  }\n\n  getPath() {\n    const {orgId, projectId, release} = this.props.params;\n\n    const encodedVersion = encodeURIComponent(release);\n\n    return projectId\n      ? `/projects/${orgId}/${projectId}/releases/${encodedVersion}/commits/`\n      : `/organizations/${orgId}/releases/${encodedVersion}/commits/`;\n  }\n\n  emptyState() {\n    return (\n      <Panel>\n        <EmptyStateWarning>\n          <p>{t('There are no commits associated with this release.')}</p>\n          {/* Todo: Should we link to repo settings from here?  */}\n        </EmptyStateWarning>\n      </Panel>\n    );\n  }\n\n  setActiveRepo(repo) {\n    this.setState({\n      activeRepo: repo,\n    });\n  }\n\n  getCommitsByRepository() {\n    const {commitList} = this.state;\n    const commitsByRepository = commitList.reduce(function(cbr, commit) {\n      const {repository} = commit;\n      if (!cbr.hasOwnProperty(repository.name)) {\n        cbr[repository.name] = [];\n      }\n\n      cbr[repository.name].push(commit);\n      return cbr;\n    }, {});\n    return commitsByRepository;\n  }\n\n  renderCommitsForRepo(repo) {\n    const commitsByRepository = this.getCommitsByRepository();\n    const activeCommits = commitsByRepository[repo];\n\n    return (\n      <Panel key={repo}>\n        <PanelHeader>{repo}</PanelHeader>\n        <PanelBody>\n          {activeCommits.map(commit => (\n            <CommitRow key={commit.id} commit={commit} />\n          ))}\n        </PanelBody>\n      </Panel>\n    );\n  }\n\n  render() {\n    if (this.state.loading) {\n      return <LoadingIndicator />;\n    }\n\n    if (this.state.error) {\n      return <LoadingError />;\n    }\n\n    const {commitList, activeRepo} = this.state;\n\n    if (!commitList.length) {\n      return this.emptyState();\n    }\n    const commitsByRepository = this.getCommitsByRepository();\n    return (\n      <div>\n        <div className=\"heading\">\n          {Object.keys(commitsByRepository).length > 1 ? (\n            <div className=\"commits-dropdown align-left\">\n              <div className=\"commits-dropdowng\">\n                <DropdownLink caret title={this.state.activeRepo || 'All Repositories'}>\n                  <MenuItem\n                    key=\"all\"\n                    noAnchor\n                    onClick={() => {\n                      this.setActiveRepo(null);\n                    }}\n                    isActive={this.state.activeRepo === null}\n                  >\n                    <a>{t('All Repositories')}</a>\n                  </MenuItem>\n                  {Object.keys(commitsByRepository).map(repository => (\n                    <MenuItem\n                      key={commitsByRepository[repository].id}\n                      noAnchor\n                      onClick={() => {\n                        this.setActiveRepo(repository);\n                      }}\n                      isActive={this.state.activeRepo === repository}\n                    >\n                      <a>{repository}</a>\n                    </MenuItem>\n                  ))}\n                </DropdownLink>\n              </div>\n            </div>\n          ) : null}\n        </div>\n        {activeRepo\n          ? this.renderCommitsForRepo(activeRepo)\n          : Object.keys(commitsByRepository).map(repository =>\n              this.renderCommitsForRepo(repository)\n            )}\n      </div>\n    );\n  }\n}\n\nexport {ReleaseCommits};\n\nexport default withApi(ReleaseCommits);\n"],"sourceRoot":""}