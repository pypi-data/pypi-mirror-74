{"version":3,"sources":["webpack:///./app/components/commitLink.tsx","webpack:///./app/components/commitRow.tsx","webpack:///./app/views/releases/detail/releaseCommits.jsx"],"names":["SUPPORTED_PROVIDERS","icon","providerIds","commitUrl","baseUrl","commitId","CommitIcon","p","size","src","className","inline","repository","shortId","providerData","find","provider","includes","id","undefined","url","href","external","renderMessage","message","split","renderHovercardBody","author","EmailWarning","actorEmail","email","accountSettings","StyledLink","to","inviteUser","onClick","initialData","emails","Set","source","render","commit","customAvatar","dateCreated","nonMemberEmail","key","align","AvatarWrapper","body","this","user","EmailWarningIcon","CommitMessage","Message","Meta","name","timeago","date","propTypes","object","node","Component","theme","ReleaseCommits","state","loading","error","commitList","activeRepo","props","api","request","getPath","method","data","omit","location","query","Object","values","URL_PARAM","success","_","jqXHR","setState","pageLinks","getResponseHeader","params","orgId","projectId","version","encodedVersion","encodeURIComponent","t","repo","reduce","cbr","hasOwnProperty","push","activeCommits","getCommitsByRepository","map","length","emptyState","commitsByRepository","keys","caret","title","noAnchor","setActiveRepo","isActive","renderCommitsForRepo","React","withApi"],"mappings":"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","file":"ReleaseCommits.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport {Repository} from 'app/types';\nimport {t} from 'app/locale';\nimport {getShortCommitHash} from 'app/utils';\nimport Button from 'app/components/button';\nimport ExternalLink from 'app/components/links/externalLink';\nimport InlineSvg from 'app/components/inlineSvg';\n\ntype CommitFormatterParameters = {\n  baseUrl: string;\n  commitId: string;\n};\n\ntype CommitProvider = {\n  icon: string;\n  providerIds: string[];\n  commitUrl: (CommitFormatterParameters) => string;\n};\n\n// TODO(epurkhiser, jess): This should be moved into plugins.\nconst SUPPORTED_PROVIDERS: Readonly<CommitProvider[]> = [\n  {\n    icon: 'icon-github',\n    providerIds: ['github', 'integrations:github', 'integrations:github_enterprise'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commit/${commitId}`,\n  },\n  {\n    icon: 'icon-bitbucket',\n    providerIds: ['bitbucket', 'integrations:bitbucket'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commits/${commitId}`,\n  },\n  {\n    icon: 'icon-vsts',\n    providerIds: ['visualstudio', 'integrations:vsts'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commit/${commitId}`,\n  },\n  {\n    icon: 'icon-gitlab',\n    providerIds: ['gitlab', 'integrations:gitlab'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commit/${commitId}`,\n  },\n];\n\ntype Props = {\n  commitId: string;\n  repository?: Repository;\n  inline?: boolean;\n};\n\nfunction CommitLink({inline, commitId, repository}: Props) {\n  if (!commitId || !repository) {\n    return <span>{t('Unknown Commit')}</span>;\n  }\n\n  const shortId = getShortCommitHash(commitId);\n\n  const providerData = SUPPORTED_PROVIDERS.find(provider => {\n    if (!repository.provider) {\n      return false;\n    }\n    return provider.providerIds.includes(repository.provider.id);\n  });\n\n  if (providerData === undefined) {\n    return <span>{shortId}</span>;\n  }\n\n  const commitUrl =\n    repository.url &&\n    providerData.commitUrl({\n      commitId,\n      baseUrl: repository.url,\n    });\n\n  return !inline ? (\n    <Button external href={commitUrl} size=\"small\" icon={providerData.icon}>\n      {shortId}\n    </Button>\n  ) : (\n    <ExternalLink className=\"inline-commit\" href={commitUrl}>\n      <CommitIcon src={providerData.icon} />\n      {' ' + shortId}\n    </ExternalLink>\n  );\n}\n\nCommitLink.propTypes = {\n  commitId: PropTypes.string,\n  repository: PropTypes.object,\n  inline: PropTypes.bool,\n};\n\ntype CommitIconProps = {\n  src: string;\n  className?: string;\n};\nconst CommitIcon = styled((p: CommitIconProps) => (\n  <InlineSvg size=\"14px\" src={p.src} className={p.className} />\n))`\n  vertical-align: text-top;\n  margin-top: 2px;\n`;\n\nexport default CommitLink;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport {Commit} from 'app/types';\nimport {openInviteMembersModal} from 'app/actionCreators/modal';\nimport {PanelItem} from 'app/components/panels';\nimport {t, tct} from 'app/locale';\nimport UserAvatar from 'app/components/avatar/userAvatar';\nimport CommitLink from 'app/components/commitLink';\nimport Hovercard from 'app/components/hovercard';\nimport InlineSvg from 'app/components/inlineSvg';\nimport Link from 'app/components/links/link';\nimport TextOverflow from 'app/components/textOverflow';\nimport TimeSince from 'app/components/timeSince';\nimport space from 'app/styles/space';\n\ntype Props = {\n  commit: Commit;\n  customAvatar?: React.ReactNode;\n};\n\nexport default class CommitRow extends React.Component<Props> {\n  static propTypes = {\n    commit: PropTypes.object,\n    customAvatar: PropTypes.node,\n  };\n\n  renderMessage(message: string): string {\n    if (!message) {\n      return t('No message provided');\n    }\n\n    const firstLine = message.split(/\\n/)[0];\n\n    return firstLine;\n  }\n\n  renderHovercardBody(author) {\n    return (\n      <EmailWarning>\n        {tct(\n          'The email [actorEmail] is not a member of your organization. [inviteUser:Invite] them or link additional emails in [accountSettings:account settings].',\n          {\n            actorEmail: <strong>{author.email}</strong>,\n            accountSettings: <StyledLink to=\"/settings/account/emails/\" />,\n            inviteUser: (\n              <StyledLink\n                onClick={() =>\n                  openInviteMembersModal({\n                    initialData: [\n                      {\n                        emails: new Set([author.email]),\n                      },\n                    ],\n                    source: 'suspect_commit',\n                  })\n                }\n              />\n            ),\n          }\n        )}\n      </EmailWarning>\n    );\n  }\n\n  render() {\n    const {commit, customAvatar} = this.props;\n    const {id, dateCreated, message, author, repository} = commit;\n    const nonMemberEmail = author && author.id === undefined;\n\n    return (\n      <PanelItem key={id} align=\"center\">\n        {customAvatar ? (\n          customAvatar\n        ) : nonMemberEmail ? (\n          <AvatarWrapper>\n            <Hovercard body={this.renderHovercardBody(author)}>\n              <UserAvatar size={36} user={author} />\n              <EmailWarningIcon src=\"icon-circle-exclamation\" />\n            </Hovercard>\n          </AvatarWrapper>\n        ) : (\n          <AvatarWrapper>\n            <UserAvatar size={36} user={author} />\n          </AvatarWrapper>\n        )}\n\n        <CommitMessage>\n          <Message>{this.renderMessage(message)}</Message>\n          <Meta>\n            {tct('[author] committed [timeago]', {\n              author: <strong>{(author && author.name) || t('Unknown author')}</strong>,\n              timeago: <TimeSince date={dateCreated} />,\n            })}\n          </Meta>\n        </CommitMessage>\n\n        <div>\n          <CommitLink commitId={id} repository={repository} />\n        </div>\n      </PanelItem>\n    );\n  }\n}\n\nconst AvatarWrapper = styled('div')`\n  align-self: flex-start;\n  margin-right: ${space(2)};\n`;\n\nconst EmailWarning = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  line-height: 1.4;\n  margin: -4px;\n`;\n\nconst StyledLink = styled(Link)`\n  color: ${p => p.theme.textColor};\n  border-bottom: 1px dotted ${p => p.theme.textColor};\n\n  &:hover {\n    color: ${p => p.theme.textColor};\n  }\n`;\n\nconst EmailWarningIcon = styled(InlineSvg)`\n  position: relative;\n  margin-left: -11px;\n  border-radius: 11px;\n  margin-bottom: -25px;\n  border: 1px solid ${p => p.theme.white};\n  background: ${p => p.theme.yellowLight};\n`;\n\nconst CommitMessage = styled('div')`\n  flex: 1;\n  flex-direction: column;\n  min-width: 0;\n  margin-right: ${space(2)};\n`;\n\nconst Message = styled(TextOverflow)`\n  font-size: 15px;\n  line-height: 1.1;\n  font-weight: bold;\n`;\n\nconst Meta = styled(TextOverflow)`\n  font-size: 13px;\n  line-height: 1.5;\n  margin: 0;\n  color: ${p => p.theme.gray3};\n`;\n","import PropTypes from 'prop-types';\nimport omit from 'lodash/omit';\nimport React from 'react';\n\nimport {Panel, PanelHeader, PanelBody} from 'app/components/panels';\nimport {URL_PARAM} from 'app/constants/globalSelectionHeader';\nimport {t} from 'app/locale';\nimport withApi from 'app/utils/withApi';\nimport CommitRow from 'app/components/commitRow';\nimport DropdownLink from 'app/components/dropdownLink';\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport MenuItem from 'app/components/menuItem';\n\nclass ReleaseCommits extends React.Component {\n  static propTypes = {\n    api: PropTypes.object,\n  };\n\n  state = {\n    loading: true,\n    error: false,\n    commitList: [],\n    activeRepo: null,\n  };\n\n  componentDidMount() {\n    this.props.api.request(this.getPath(), {\n      method: 'GET',\n      // We need to omit global selection header url params because they are not supported\n      data: omit(this.props.location.query, Object.values(URL_PARAM)),\n      success: (data, _, jqXHR) => {\n        this.setState({\n          error: false,\n          loading: false,\n          commitList: data,\n          pageLinks: jqXHR.getResponseHeader('Link'),\n        });\n      },\n      error: () => {\n        this.setState({\n          error: true,\n          loading: false,\n        });\n      },\n    });\n  }\n\n  getPath() {\n    const {orgId, projectId, version} = this.props.params;\n\n    const encodedVersion = encodeURIComponent(version);\n\n    return projectId\n      ? `/projects/${orgId}/${projectId}/releases/${encodedVersion}/commits/`\n      : `/organizations/${orgId}/releases/${encodedVersion}/commits/`;\n  }\n\n  emptyState() {\n    return (\n      <Panel>\n        <EmptyStateWarning>\n          <p>{t('There are no commits associated with this release.')}</p>\n          {/* Todo: Should we link to repo settings from here?  */}\n        </EmptyStateWarning>\n      </Panel>\n    );\n  }\n\n  setActiveRepo(repo) {\n    this.setState({\n      activeRepo: repo,\n    });\n  }\n\n  getCommitsByRepository() {\n    const {commitList} = this.state;\n    const commitsByRepository = commitList.reduce(function(cbr, commit) {\n      const {repository} = commit;\n      if (!cbr.hasOwnProperty(repository.name)) {\n        cbr[repository.name] = [];\n      }\n\n      cbr[repository.name].push(commit);\n      return cbr;\n    }, {});\n    return commitsByRepository;\n  }\n\n  renderCommitsForRepo(repo) {\n    const commitsByRepository = this.getCommitsByRepository();\n    const activeCommits = commitsByRepository[repo];\n\n    return (\n      <Panel key={repo}>\n        <PanelHeader>{repo}</PanelHeader>\n        <PanelBody>\n          {activeCommits.map(commit => {\n            return <CommitRow key={commit.id} commit={commit} />;\n          })}\n        </PanelBody>\n      </Panel>\n    );\n  }\n\n  render() {\n    if (this.state.loading) {\n      return <LoadingIndicator />;\n    }\n\n    if (this.state.error) {\n      return <LoadingError />;\n    }\n\n    const {commitList, activeRepo} = this.state;\n\n    if (!commitList.length) {\n      return this.emptyState();\n    }\n    const commitsByRepository = this.getCommitsByRepository();\n    return (\n      <div>\n        <div className=\"heading\">\n          {Object.keys(commitsByRepository).length > 1 ? (\n            <div className=\"commits-dropdown align-left\">\n              <div className=\"commits-dropdowng\">\n                <DropdownLink caret title={this.state.activeRepo || 'All Repositories'}>\n                  <MenuItem\n                    key=\"all\"\n                    noAnchor\n                    onClick={() => {\n                      this.setActiveRepo(null);\n                    }}\n                    isActive={this.state.activeRepo === null}\n                  >\n                    <a>{t('All Repositories')}</a>\n                  </MenuItem>\n                  {Object.keys(commitsByRepository).map(repository => {\n                    return (\n                      <MenuItem\n                        key={commitsByRepository[repository].id}\n                        noAnchor\n                        onClick={() => {\n                          this.setActiveRepo(repository);\n                        }}\n                        isActive={this.state.activeRepo === repository}\n                      >\n                        <a>{repository}</a>\n                      </MenuItem>\n                    );\n                  })}\n                </DropdownLink>\n              </div>\n            </div>\n          ) : null}\n        </div>\n        {activeRepo\n          ? this.renderCommitsForRepo(activeRepo)\n          : Object.keys(commitsByRepository).map(repository => {\n              return this.renderCommitsForRepo(repository);\n            })}\n      </div>\n    );\n  }\n}\n\nexport {ReleaseCommits};\n\nexport default withApi(ReleaseCommits);\n"],"sourceRoot":""}