{"version":3,"sources":["webpack:///./app/views/installWizard.jsx"],"names":["InstallWizard","document","body","classList","add","remove","options","this","state","data","missingOptions","Set","Object","keys","filter","option","field","isSet","size","fields","key","disabled","getOptionField","getForm","forEach","optionName","displayValue","value","getOptionDefault","undefined","t","version","ConfigStore","get","title","getTitle","className","current","loading","renderLoading","error","renderError","Error","renderBody","apiMethod","apiEndpoint","getEndpoints","submitLabel","initialData","getInitialData","onSubmitSuccess","props","onConfigured","renderFormFields","AsyncView"],"mappings":"+TAUqBA,E,qJAMjB,2DACAC,SAASC,KAAKC,UAAUC,IAAI,oB,6CAI5B,6DACAH,SAASC,KAAKC,UAAUE,OAAO,oB,qCAI/B,MAAO,CAAC,CAAC,OAAQ,2C,yCAIjB,IAAMC,EAAUC,KAAKC,MAAMC,KAEvBC,EAAiB,IAAIC,IACvBC,OAAOC,KAAKP,GAASQ,QAAO,SAAAC,GAAM,OAAKT,EAAQS,GAAQC,MAAMC,UAOnC,IAAxBP,EAAeQ,OACjBR,EAAiB,IAAIC,IAAIC,OAAOC,KAAKP,KAIvC,IAAMa,EAAS,GAhBE,uBAkBjB,YAAkBT,EAAlB,+CAAkC,KAAvBU,EAAuB,QAC1BL,EAAST,EAAQc,GACnBL,EAAOC,MAAMK,WAGjBF,EAAOC,GAAOE,YAAeF,EAAKL,EAAOC,SAvB1B,kFA0BjB,OAAOO,YAAQJ,K,uCAIf,IAAMb,EAAUC,KAAKC,MAAMC,KACrBA,EAAO,GAuBb,OAtBAG,OAAOC,KAAKP,GAASkB,SAAQ,SAAAC,GAC3B,IAAMV,EAAST,EAAQmB,GACvB,IAAIV,EAAOC,MAAMK,SAAjB,CAOA,IAAMK,EAAeX,EAAOY,OAASC,YAAiBH,GAIrC,qBAAfA,GAGCV,EAAOC,MAAMC,YACGY,IAAjBH,IAEAjB,EAAKgB,GAAcC,OAGhBjB,I,iCAIP,OAAOqB,YAAE,kB,+BAIT,IAAMC,EAAUC,UAAYC,IAAI,WAChC,OACE,kBAAC,IAAD,CAAeC,MAAO3B,KAAK4B,YACzB,yBAAKC,UAAU,OACb,yBAAKA,UAAU,YACf,yBAAKA,UAAU,gBACb,4BACE,8BAAON,YAAE,sBACT,+BAAQC,EAAQM,UAEjB9B,KAAKC,MAAM8B,QACR/B,KAAKgC,gBACLhC,KAAKC,MAAMgC,MACXjC,KAAKkC,YAAY,IAAIC,MAAM,0CAC3BnC,KAAKoC,kB,oCAQjB,OACE,yBAAKP,UAAU,iBACb,0BAAMA,UAAU,qBACfN,YACC,wH,mCAON,OACE,kBAAC,UAAD,CACEc,UAAU,MACVC,YAAatC,KAAKuC,eAAe,GAAG,GACpCC,YAAajB,YAAE,YACfkB,YAAazC,KAAK0C,iBAClBC,gBAAiB3C,KAAK4C,MAAMC,cAE5B,2BAAItB,YAAE,8DAELvB,KAAK8C,wB,GA5H6BC,KAAtBtD,E","file":"InstallWizard.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncView from 'app/views/asyncView';\nimport {t} from 'app/locale';\nimport ConfigStore from 'app/stores/configStore';\nimport {ApiForm} from 'app/components/forms';\nimport {getOptionDefault, getOptionField, getForm} from 'app/options';\n\nexport default class InstallWizard extends AsyncView {\n  static propTypes = {\n    onConfigured: PropTypes.func.isRequired,\n  };\n\n  componentWillMount() {\n    super.componentWillMount();\n    document.body.classList.add('install-wizard');\n  }\n\n  componentWillUnmount() {\n    super.componentWillUnmount();\n    document.body.classList.remove('install-wizard');\n  }\n\n  getEndpoints() {\n    return [['data', '/internal/options/?query=is:required']];\n  }\n\n  renderFormFields() {\n    const options = this.state.data;\n\n    let missingOptions = new Set(\n      Object.keys(options).filter(option => !options[option].field.isSet)\n    );\n    // This is to handle the initial installation case.\n    // Even if all options are filled out, we want to prompt to confirm\n    // them. This is a bit of a hack because we're assuming that\n    // the backend only spit back all filled out options for\n    // this case.\n    if (missingOptions.size === 0) {\n      missingOptions = new Set(Object.keys(options));\n    }\n\n    // A mapping of option name to Field object\n    const fields = {};\n\n    for (const key of missingOptions) {\n      const option = options[key];\n      if (option.field.disabled) {\n        continue;\n      }\n      fields[key] = getOptionField(key, option.field);\n    }\n\n    return getForm(fields);\n  }\n\n  getInitialData() {\n    const options = this.state.data;\n    const data = {};\n    Object.keys(options).forEach(optionName => {\n      const option = options[optionName];\n      if (option.field.disabled) {\n        return;\n      }\n\n      // TODO(dcramer): we need to rethink this logic as doing multiple \"is this value actually set\"\n      // is problematic\n      // all values to their server-defaults (as client-side defaults dont really work)\n      const displayValue = option.value || getOptionDefault(optionName);\n      if (\n        // XXX(dcramer): we need the user to explicitly choose beacon.anonymous\n        // vs using an implied default so effectively this is binding\n        optionName !== 'beacon.anonymous' &&\n        // XXX(byk): if we don't have a set value but have a default value filled\n        // instead, from the client, set it on the data so it is sent to the server\n        !option.field.isSet &&\n        displayValue !== undefined\n      ) {\n        data[optionName] = displayValue;\n      }\n    });\n    return data;\n  }\n\n  getTitle() {\n    return t('Setup Sentry');\n  }\n\n  render() {\n    const version = ConfigStore.get('version');\n    return (\n      <DocumentTitle title={this.getTitle()}>\n        <div className=\"app\">\n          <div className=\"pattern\" />\n          <div className=\"setup-wizard\">\n            <h1>\n              <span>{t('Welcome to Sentry')}</span>\n              <small>{version.current}</small>\n            </h1>\n            {this.state.loading\n              ? this.renderLoading()\n              : this.state.error\n              ? this.renderError(new Error('Unable to load all required endpoints'))\n              : this.renderBody()}\n          </div>\n        </div>\n      </DocumentTitle>\n    );\n  }\n\n  renderError() {\n    return (\n      <div className=\"loading-error\">\n        <span className=\"icon-exclamation\" />\n        {t(\n          'We were unable to load the required configuration from the Sentry server. Please take a look at the service logs.'\n        )}\n      </div>\n    );\n  }\n\n  renderBody() {\n    return (\n      <ApiForm\n        apiMethod=\"PUT\"\n        apiEndpoint={this.getEndpoints()[0][1]}\n        submitLabel={t('Continue')}\n        initialData={this.getInitialData()}\n        onSubmitSuccess={this.props.onConfigured}\n      >\n        <p>{t('Complete setup by filling out the required configuration.')}</p>\n\n        {this.renderFormFields()}\n      </ApiForm>\n    );\n  }\n}\n"],"sourceRoot":""}