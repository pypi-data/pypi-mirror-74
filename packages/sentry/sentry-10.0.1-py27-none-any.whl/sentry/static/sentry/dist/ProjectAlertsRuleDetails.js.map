{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/utils/environment.tsx","webpack:///./app/views/settings/components/forms/controls/radioGroup.tsx","webpack:///./app/views/settings/incidentRules/create.tsx","webpack:///./app/views/settings/projectAlerts/issueEditor/ruleNode.tsx","webpack:///./app/views/settings/projectAlerts/issueEditor/ruleNodeList.tsx","webpack:///./app/views/settings/projectAlerts/issueEditor/index.tsx","webpack:///./app/views/settings/projectAlerts/ruleDetailsNew/index.tsx"],"names":["getTitle","render","title","this","renderComponent","props","_title","objSlug","children","DEFAULT_EMPTY_ROUTING_NAME","DEFAULT_EMPTY_ENV_NAME","getUrlRoutingName","env","encodeURIComponent","name","getDisplayName","RadioLineButton","p","theme","shouldForwardProp","includes","RadioLineItem","disabled","index","RadioLineButtonFill","animate","RadioLineText","Description","value","choices","label","onChange","role","map","id","description","isSelected","key","onClick","e","type","Fragment","handleSubmitSuccess","params","routes","router","location","push","stepBack","project","onSubmitSuccess","rule","projects","slug","Component","getChoiceField","fieldConfig","initialVal","data","onPropertyChange","undefined","length","initial","SelectWrapper","clearable","placeholder","noResultsText","height","val","getTextField","InlineInput","target","getNumberField","getField","choice","number","string","getComponent","node","formFields","parts","split","part","test","slice","match","hasOwnProperty","RuleNodeForm","inputs","onDelete","component","size","icon","space","getNode","nodes","find","onAddRow","onDeleteRow","items","options","filter","enabled","RuleNodes","item","idx","StyledSelectControl","obj","FREQUENCY_CHOICES","ACTION_MATCH_CHOICES","defaultRule","actionMatch","actions","conditions","frequency","environment","isSavedAlertRule","state","loading","error","environments","handleSubmit","ruleId","isNew","organization","endpoint","api","requestPromise","method","resp","setState","replace","recreateRoute","responseJSON","__all__","handleCancel","hasError","field","handleEnvironmentChange","handleChange","prop","handlePropertyChange","handleAddRow","handleDeleteRow","prevState","newTypeList","splice","componentDidMount","fetchData","projectId","orgId","promises","Promise","resolve","all","environmentChoices","StyledForm","onCancel","onSubmit","initialData","submitLabel","SemiTransparentLoadingMask","className","help","EmbeddedWrapper","EmbeddedSelectField","inline","search","required","flexibleControlStateSize","PanelRuleItem","defaultValue","withApi","handleChangeAlertType","alertType","getDefaultState","pathname","configs","getEndpoints","renderLoading","renderBody","withProject","withOrganization"],"mappings":"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","file":"ProjectAlertsRuleDetails.js","sourcesContent":["import DocumentTitle from 'react-document-title';\nimport React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import React, {FunctionComponent} from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype DocumentTitleProps = {\n  // Main page title\n  title: string;\n  // Organization or project slug to give title some context\n  objSlug: string;\n  children?: React.ReactNode;\n};\n\nconst SentryDocumentTitle: FunctionComponent<DocumentTitleProps> = (\n  props: DocumentTitleProps\n) => {\n  const _title = `${props.title} - ${props.objSlug} - Sentry`;\n  return <DocumentTitle title={_title}>{props.children}</DocumentTitle>;\n};\n\nexport default SentryDocumentTitle;\n","import {Environment} from 'app/types';\nimport {toTitleCase} from 'app/utils';\n\nconst DEFAULT_EMPTY_ROUTING_NAME = 'none';\nconst DEFAULT_EMPTY_ENV_NAME = '(No Environment)';\n\nexport function getUrlRoutingName(env: Omit<Environment, 'id'>) {\n  return encodeURIComponent(env.name) || DEFAULT_EMPTY_ROUTING_NAME;\n}\n\nexport function getDisplayName(env: Omit<Environment, 'id'>) {\n  return toTitleCase(env.name) || DEFAULT_EMPTY_ENV_NAME;\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\nimport isPropValid from '@emotion/is-prop-valid';\n\nimport {growIn} from 'app/styles/animations';\n\ntype Props = {\n  value: string | number | null;\n\n  // An array of [id, name, description]\n  choices: [string, string, string?][];\n  disabled?: boolean;\n  label: string;\n  onChange: (id: string, e: React.MouseEvent) => void;\n};\n\nconst RadioGroup: React.FC<Props> = ({\n  value,\n  disabled,\n  choices,\n  label,\n  onChange,\n  ...props\n}) => {\n  return (\n    <div {...props} role=\"radiogroup\" aria-labelledby={label}>\n      {(choices || []).map(([id, name, description], index) => {\n        const isSelected = value === id;\n\n        return (\n          <RadioLineItem\n            key={index}\n            onClick={e => !disabled && onChange(id, e)}\n            role=\"radio\"\n            index={index}\n            aria-checked={isSelected}\n            disabled={disabled}\n          >\n            <RadioLineButton type=\"button\" disabled={disabled}>\n              {isSelected && (\n                <RadioLineButtonFill disabled={disabled} animate={value !== ''} />\n              )}\n            </RadioLineButton>\n            <RadioLineText disabled={disabled}>{name}</RadioLineText>\n            {description && (\n              <React.Fragment>\n                {/* If there is a description then we want to have a 2x2 grid so the first column width aligns with Radio Button */}\n                <div />\n                <Description>{description}</Description>\n              </React.Fragment>\n            )}\n          </RadioLineItem>\n        );\n      })}\n    </div>\n  );\n};\n\nRadioGroup.propTypes = {\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  // TODO(ts): This is causing issues with ts\n  choices: PropTypes.any.isRequired,\n  disabled: PropTypes.bool,\n  label: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst RadioLineButton = styled('button')`\n  display: flex;\n  padding: 0;\n  width: 1.5em;\n  height: 1.5em;\n  position: relative;\n  border-radius: 50%;\n  align-items: center;\n  justify-content: center;\n  border: 1px solid ${p => p.theme.borderLight};\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.04);\n  background: none;\n\n  &:focus,\n  &.focus-visible {\n    outline: none;\n    border: 1px solid ${p => p.theme.borderDark};\n    box-shadow: rgba(209, 202, 216, 0.5) 0 0 0 3px;\n  }\n`;\n\nconst shouldForwardProp = p => !['disabled', 'animate'].includes(p) && isPropValid(p);\n\nconst RadioLineItem = styled('div', {shouldForwardProp})<{\n  disabled?: boolean;\n  index: number;\n}>`\n  display: grid;\n  grid-gap: 0.25em 0.5em;\n  grid-template-columns: max-content auto;\n  align-items: center;\n  cursor: ${p => (p.disabled ? 'default' : 'pointer')};\n  margin-top: ${p => (p.index > 0 ? '0.5em' : '0')};\n  outline: none;\n`;\n\nconst RadioLineButtonFill = styled('div', {shouldForwardProp})<{\n  animate: boolean;\n  disabled?: boolean;\n}>`\n  width: 1rem;\n  height: 1rem;\n  border-radius: 50%;\n  background-color: ${p => p.theme.green};\n  animation: ${p => (p.animate ? `0.2s ${growIn} ease` : 'none')};\n  opacity: ${p => (p.disabled ? 0.4 : null)};\n`;\n\nconst RadioLineText = styled('div', {shouldForwardProp})<{disabled?: boolean}>`\n  opacity: ${p => (p.disabled ? 0.4 : null)};\n`;\n\nconst Description = styled('div')`\n  color: ${p => p.theme.gray2};\n  font-size: ${p => p.theme.fontSizeRelativeSmall};\n  line-height: 1.4em;\n`;\n\nexport default RadioGroup;\n","import {RouteComponentProps} from 'react-router/lib/Router';\nimport React from 'react';\n\nimport {Organization, Project} from 'app/types';\nimport {createDefaultRule} from 'app/views/settings/incidentRules/constants';\nimport recreateRoute from 'app/utils/recreateRoute';\n\nimport RuleForm from './ruleForm';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n  incidentRuleId: string; //TODO(ts): make optional\n};\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n} & RouteComponentProps<RouteParams, {}>;\n\n/**\n * Show metric rules form with an empty rule. Redirects to alerts list after creation.\n */\nclass IncidentRulesCreate extends React.Component<Props> {\n  handleSubmitSuccess = () => {\n    const {params, routes, router, location} = this.props;\n\n    router.push(recreateRoute('metric-rules/', {params, routes, location, stepBack: -1}));\n  };\n\n  render() {\n    const {project, ...props} = this.props;\n\n    return (\n      <RuleForm\n        onSubmitSuccess={this.handleSubmitSuccess}\n        rule={{...createDefaultRule(), projects: [project.slug]}}\n        {...props}\n      />\n    );\n  }\n}\n\nexport default IncidentRulesCreate;\n","import React from 'react';\nimport styled from 'react-emotion';\n\nimport {\n  IssueAlertRuleAction,\n  IssueAlertRuleActionTemplate,\n  IssueAlertRuleCondition,\n  IssueAlertRuleConditionTemplate,\n} from 'app/types/alerts';\nimport {t} from 'app/locale';\nimport Button from 'app/components/button';\nimport Input from 'app/views/settings/components/forms/controls/input';\nimport SelectControl from 'app/components/forms/selectControl';\nimport space from 'app/styles/space';\n\ntype FormField = {\n  // Type of form fields\n  type: string;\n  // The rest is configuration for the form field\n  [key: string]: any;\n};\n\ntype Props = {\n  node?: IssueAlertRuleActionTemplate | IssueAlertRuleConditionTemplate | null;\n  data?: IssueAlertRuleAction | IssueAlertRuleCondition;\n  onDelete: () => void;\n  onPropertyChange: (name: string, value: string) => void;\n};\n\nclass RuleNode extends React.Component<Props> {\n  getChoiceField = (name: string, fieldConfig: FormField) => {\n    // Select the first item on this list\n    // If it's not yet defined, call onPropertyChange to make sure the value is set on state\n    const {data, onPropertyChange} = this.props;\n    let initialVal;\n\n    if (data) {\n      if (data[name] === undefined && !!fieldConfig.choices.length) {\n        if (fieldConfig.initial) {\n          initialVal = fieldConfig.initial;\n        } else {\n          initialVal = fieldConfig.choices[0][0];\n        }\n        onPropertyChange(name, initialVal);\n      } else {\n        initialVal = data[name];\n      }\n    }\n\n    return (\n      <SelectWrapper>\n        <SelectControl\n          clearable={false}\n          placeholder={t('Select integration')}\n          noResultsText={t('No integrations available')}\n          height=\"35\"\n          name={name}\n          value={initialVal}\n          choices={fieldConfig.choices}\n          key={name}\n          onChange={val => this.props.onPropertyChange(name, val)}\n        />\n      </SelectWrapper>\n    );\n  };\n\n  getTextField = (name: string, fieldConfig: FormField) => {\n    const {data, onPropertyChange} = this.props;\n\n    return (\n      <InlineInput\n        type=\"text\"\n        name={name}\n        value={data && data[name]}\n        placeholder={`${fieldConfig.placeholder}`}\n        key={name}\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n          onPropertyChange(name, e.target.value)\n        }\n      />\n    );\n  };\n\n  getNumberField = (name: string, fieldConfig: FormField) => {\n    const {data, onPropertyChange} = this.props;\n\n    return (\n      <InlineInput\n        type=\"number\"\n        name={name}\n        value={data && data[name]}\n        placeholder={`${fieldConfig.placeholder}`}\n        key={name}\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n          onPropertyChange(name, e.target.value)\n        }\n      />\n    );\n  };\n\n  getField = (name: string, fieldConfig: FormField) => {\n    const getFieldTypes = {\n      choice: this.getChoiceField,\n      number: this.getNumberField,\n      string: this.getTextField,\n    };\n    return getFieldTypes[fieldConfig.type](name, fieldConfig);\n  };\n\n  getComponent() {\n    const {data, node} = this.props;\n\n    if (!node) {\n      return null;\n    }\n\n    const {label, formFields} = node;\n\n    const parts = label.split(/({\\w+})/).map(part => {\n      if (!/^{\\w+}$/.test(part)) {\n        return part;\n      }\n\n      const key = part.slice(1, -1);\n\n      // If matcher is \"is set\" or \"is not set\", then we do not want to show the value input\n      // because it is not required\n      if (key === 'value' && (data && (data.match === 'is' || data.match === 'ns'))) {\n        return null;\n      }\n\n      return formFields && formFields.hasOwnProperty(key)\n        ? this.getField(key, formFields[key])\n        : part;\n    });\n\n    const [title, ...inputs] = parts;\n\n    // We return this so that it can be a grid\n    return (\n      <React.Fragment>\n        <div>{title}</div>\n        <RuleNodeForm>{inputs}</RuleNodeForm>\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    const {data, onDelete} = this.props;\n\n    const component = this.getComponent();\n\n    return (\n      <React.Fragment>\n        {data && <input type=\"hidden\" name=\"id\" value={data.id} />}\n        {component}\n        <div>\n          <Button onClick={onDelete} type=\"button\" size=\"small\" icon=\"icon-trash\" />\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default RuleNode;\n\nconst SelectWrapper = styled('div')`\n  width: 204px;\n`;\n\nconst InlineInput = styled(Input)`\n  width: auto;\n`;\n\nconst RuleNodeForm = styled('div')`\n  display: grid;\n  grid-gap: ${space(1)};\n  grid-auto-flow: column;\n  grid-auto-columns: min-content;\n  align-items: center;\n  white-space: nowrap;\n`;\n","import React from 'react';\nimport styled from 'react-emotion';\n\nimport {\n  IssueAlertRuleAction,\n  IssueAlertRuleActionTemplate,\n  IssueAlertRuleCondition,\n  IssueAlertRuleConditionTemplate,\n} from 'app/types/alerts';\nimport SelectControl from 'app/components/forms/selectControl';\nimport space from 'app/styles/space';\n\nimport RuleNode from './ruleNode';\n\ntype Props = {\n  // All available actions or conditions\n  nodes: IssueAlertRuleActionTemplate[] | IssueAlertRuleConditionTemplate[] | null;\n\n  // actions/conditions that have been added to the rule\n  items?: IssueAlertRuleAction[] | IssueAlertRuleCondition[];\n\n  // Placeholder for select control\n  placeholder: string;\n\n  onPropertyChange: (ruleIndex: number) => (prop: string, val: string) => void;\n\n  // TODO(ts): Type value\n  onAddRow: (value: unknown) => void;\n\n  onDeleteRow: (ruleIndex: number) => void;\n};\n\nclass RuleNodeList extends React.Component<Props> {\n  getNode = (\n    id: string\n  ):\n    | IssueAlertRuleActionTemplate\n    | IssueAlertRuleConditionTemplate\n    | null\n    | undefined => {\n    const {nodes} = this.props;\n    return nodes ? nodes.find(node => node.id === id) : null;\n  };\n\n  render() {\n    const {\n      onAddRow,\n      onDeleteRow,\n      onPropertyChange,\n      nodes,\n      placeholder,\n      items,\n    } = this.props;\n\n    const options = nodes\n      ? nodes\n          .filter(({enabled}) => enabled)\n          .map(node => ({\n            value: node.id,\n            label: node.label,\n          }))\n      : [];\n\n    return (\n      <React.Fragment>\n        {items && !!items.length && (\n          <RuleNodes>\n            {items.map((item, idx) => {\n              return (\n                <RuleNode\n                  key={idx}\n                  node={this.getNode(item.id)}\n                  onDelete={() => onDeleteRow(idx)}\n                  data={item}\n                  onPropertyChange={onPropertyChange(idx)}\n                />\n              );\n            })}\n          </RuleNodes>\n        )}\n        <StyledSelectControl\n          placeholder={placeholder}\n          onChange={obj => onAddRow(obj ? obj.value : obj)}\n          options={options}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default RuleNodeList;\n\nconst StyledSelectControl = styled(SelectControl)`\n  width: 100%;\n`;\n\nconst RuleNodes = styled('div')`\n  display: grid;\n  grid-template-columns: max-content auto min-content;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: ${space(2)};\n  grid-gap: ${space(1)};\n`;\n","import {RouteComponentProps} from 'react-router/lib/Router';\nimport {browserHistory} from 'react-router';\nimport React from 'react';\nimport classNames from 'classnames';\nimport styled from 'react-emotion';\n\nimport {ALL_ENVIRONMENTS_KEY} from 'app/constants';\nimport {Client} from 'app/api';\nimport {Environment, Organization, Project} from 'app/types';\nimport {\n  IssueAlertRule,\n  IssueAlertRuleActionTemplate,\n  IssueAlertRuleConditionTemplate,\n  UnsavedIssueAlertRule,\n} from 'app/types/alerts';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport {getDisplayName} from 'app/utils/environment';\nimport {t} from 'app/locale';\nimport Form from 'app/views/settings/components/forms/form';\nimport LoadingMask from 'app/components/loadingMask';\nimport PanelAlert from 'app/components/panels/panelAlert';\nimport PanelItem from 'app/components/panels/panelItem';\nimport PanelSubHeader from 'app/views/settings/incidentRules/triggers/panelSubHeader';\nimport SelectField from 'app/views/settings/components/forms/selectField';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport TextField from 'app/views/settings/components/forms/textField';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport space from 'app/styles/space';\nimport withApi from 'app/utils/withApi';\n\nimport RuleNodeList from './ruleNodeList';\n\nconst FREQUENCY_CHOICES = [\n  ['5', t('5 minutes')],\n  ['10', t('10 minutes')],\n  ['30', t('30 minutes')],\n  ['60', t('60 minutes')],\n  ['180', t('3 hours')],\n  ['720', t('12 hours')],\n  ['1440', t('24 hours')],\n  ['10080', t('one week')],\n  ['43200', t('30 days')],\n];\n\nconst ACTION_MATCH_CHOICES = [['all', t('all')], ['any', t('any')], ['none', t('none')]];\n\nconst defaultRule: UnsavedIssueAlertRule = {\n  actionMatch: 'all',\n  actions: [],\n  conditions: [],\n  name: '',\n  frequency: 30,\n  environment: ALL_ENVIRONMENTS_KEY,\n};\n\n// TODO(ts): I can't get this to work if I'm specific -- should be: 'condition' | 'action';\ntype ConditionOrAction = string;\n\ntype Props = {\n  api: Client;\n  actions: IssueAlertRuleActionTemplate[] | null;\n  conditions: IssueAlertRuleConditionTemplate[] | null;\n  project: Project;\n  organization: Organization;\n} & RouteComponentProps<{orgId: string; projectId: string; ruleId: string}, {}>;\n\ntype State = {\n  rule: UnsavedIssueAlertRule | IssueAlertRule;\n  loading: boolean;\n  error: null | {\n    [key: string]: string[];\n  };\n  environments: Environment[];\n};\n\nfunction isSavedAlertRule(\n  rule: UnsavedIssueAlertRule | IssueAlertRule\n): rule is IssueAlertRule {\n  return rule.hasOwnProperty('id');\n}\n\nclass IssueRuleEditor extends React.Component<Props, State> {\n  state: State = {\n    rule: {...defaultRule},\n    loading: false,\n    error: null,\n    environments: [],\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  async fetchData() {\n    const {\n      api,\n      params: {ruleId, projectId, orgId},\n    } = this.props;\n\n    const promises = [\n      api.requestPromise(`/projects/${orgId}/${projectId}/environments/`),\n      ruleId\n        ? api.requestPromise(`/projects/${orgId}/${projectId}/rules/${ruleId}/`)\n        : Promise.resolve(defaultRule),\n    ];\n\n    try {\n      const [environments, rule] = await Promise.all(promises);\n      this.setState({environments, rule});\n    } catch (_err) {\n      addErrorMessage(t('Unable to fetch data'));\n    }\n  }\n\n  handleSubmit = async () => {\n    const {rule} = this.state;\n    const ruleId = isSavedAlertRule(rule) ? `${rule.id}/` : '';\n    const isNew = !ruleId;\n    const {project, organization} = this.props;\n\n    const endpoint = `/projects/${organization.slug}/${project.slug}/rules/${ruleId}`;\n\n    if (rule && rule.environment === ALL_ENVIRONMENTS_KEY) {\n      delete rule.environment;\n    }\n\n    addLoadingMessage(t('Saving...'));\n\n    try {\n      const resp = await this.props.api.requestPromise(endpoint, {\n        method: isNew ? 'POST' : 'PUT',\n        data: rule,\n      });\n\n      this.setState({error: null, loading: false, rule: resp});\n\n      addSuccessMessage(isNew ? t('Created alert rule') : t('Updated alert rule'));\n      browserHistory.replace(recreateRoute('', {...this.props, stepBack: -1}));\n    } catch (err) {\n      this.setState({\n        error: err.responseJSON || {__all__: 'Unknown error'},\n        loading: false,\n      });\n      addErrorMessage(t('An error occurred'));\n    }\n  };\n\n  handleCancel = () => {\n    const {router} = this.props;\n\n    router.push(recreateRoute('', {...this.props, stepBack: -1}));\n  };\n\n  hasError = (field: string) => {\n    const {error} = this.state;\n\n    if (!error) {\n      return false;\n    }\n\n    return error.hasOwnProperty(field);\n  };\n\n  handleEnvironmentChange = (val: string) => {\n    // If 'All Environments' is selected the value should be null\n    if (val === ALL_ENVIRONMENTS_KEY) {\n      this.handleChange('environment', null);\n    } else {\n      this.handleChange('environment', val);\n    }\n  };\n\n  handleChange = (prop: string, val: string | null) => {\n    this.setState(state => {\n      const rule = {...state.rule} as IssueAlertRule;\n      rule[prop] = val;\n      return {rule};\n    });\n  };\n\n  handlePropertyChange = (type: ConditionOrAction) => {\n    return (idx: number) => {\n      return (prop: string, val: string) => {\n        const rule = {...this.state.rule} as IssueAlertRule;\n        rule[type][idx][prop] = val;\n        this.setState({rule});\n      };\n    };\n  };\n\n  handleAddRow = (type: ConditionOrAction) => {\n    return id => {\n      this.setState(state => {\n        const rule = {\n          ...state.rule,\n          [type]: [...(state.rule ? state.rule[type] : []), {id}],\n        } as IssueAlertRule;\n\n        return {\n          rule,\n        };\n      });\n    };\n  };\n\n  handleDeleteRow = (type: ConditionOrAction) => {\n    return (idx: number) => {\n      this.setState(prevState => {\n        const newTypeList = prevState.rule ? [...prevState.rule[type]] : [];\n\n        if (prevState.rule) {\n          newTypeList.splice(idx, 1);\n        }\n\n        const rule = {\n          ...prevState.rule,\n          [type]: newTypeList,\n        } as IssueAlertRule;\n\n        return {\n          rule,\n        };\n      });\n    };\n  };\n\n  render() {\n    const {projectId, ruleId} = this.props.params;\n    const {environments} = this.state;\n    const environmentChoices = [\n      [ALL_ENVIRONMENTS_KEY, t('All Environments')],\n      ...environments.map(env => [env.name, getDisplayName(env)]),\n    ];\n\n    const {rule, error} = this.state;\n    const {actionMatch, actions, conditions, frequency, name} = rule || {};\n\n    const environment =\n      !rule || !rule.environment ? ALL_ENVIRONMENTS_KEY : rule.environment;\n\n    const title = ruleId ? t('Edit Alert Rule') : t('New Alert Rule');\n\n    // Note `key` on `<Form>` below is so that on initial load, we show\n    // the form with a loading mask on top of it, but force a re-render by using\n    // a different key when we have fetched the rule so that form inputs are filled in\n    return (\n      <React.Fragment>\n        <SentryDocumentTitle title={title} objSlug={projectId} />\n        <StyledForm\n          key={isSavedAlertRule(rule) ? rule.id : undefined}\n          onCancel={this.handleCancel}\n          onSubmit={this.handleSubmit}\n          initialData={rule as object}\n          submitLabel={t('Save Rule')}\n        >\n          {ruleId && !this.state.rule && <SemiTransparentLoadingMask />}\n          <Panel>\n            <PanelHeader>{t('Configure Rule Conditions')}</PanelHeader>\n            <PanelBody>\n              {error && (\n                <PanelAlert type=\"error\">\n                  {t(\n                    'There was an error saving your changes. Make sure all fields are valid and try again.'\n                  )}\n                </PanelAlert>\n              )}\n              <SelectField\n                className={classNames({\n                  error: this.hasError('environment'),\n                })}\n                label={t('Environment')}\n                help={t('Choose an environment for these conditions to apply to')}\n                placeholder={t('Select an Environment')}\n                clearable={false}\n                name=\"environment\"\n                value={environment}\n                choices={environmentChoices}\n                onChange={val => this.handleEnvironmentChange(val)}\n              />\n\n              <PanelSubHeader>\n                {t(\n                  'Whenever %s of these conditions are met',\n                  <EmbeddedWrapper>\n                    <EmbeddedSelectField\n                      className={classNames({\n                        error: this.hasError('actionMatch'),\n                      })}\n                      inline={false}\n                      height=\"20\"\n                      clearable={false}\n                      search={false}\n                      name=\"actionMatch\"\n                      value={actionMatch}\n                      required\n                      flexibleControlStateSize\n                      choices={ACTION_MATCH_CHOICES}\n                      onChange={val => this.handleChange('actionMatch', val)}\n                    />\n                  </EmbeddedWrapper>\n                )}\n              </PanelSubHeader>\n\n              {this.hasError('conditions') && (\n                <PanelAlert type=\"error\">{this.state.error!.conditions[0]}</PanelAlert>\n              )}\n\n              <PanelRuleItem>\n                <RuleNodeList\n                  nodes={this.props.conditions}\n                  items={conditions || []}\n                  placeholder={t('Add a condition...')}\n                  onPropertyChange={this.handlePropertyChange('conditions')}\n                  onAddRow={this.handleAddRow('conditions')}\n                  onDeleteRow={this.handleDeleteRow('conditions' as const)}\n                />\n              </PanelRuleItem>\n\n              <PanelSubHeader>{t('Perform these actions')}</PanelSubHeader>\n\n              {this.hasError('actions') && (\n                <PanelAlert type=\"error\">{this.state.error!.actions[0]}</PanelAlert>\n              )}\n\n              <PanelRuleItem>\n                <RuleNodeList\n                  nodes={this.props.actions}\n                  items={actions || []}\n                  placeholder={t('Add an action...')}\n                  onPropertyChange={this.handlePropertyChange('actions')}\n                  onAddRow={this.handleAddRow('actions')}\n                  onDeleteRow={this.handleDeleteRow('actions')}\n                />\n              </PanelRuleItem>\n            </PanelBody>\n          </Panel>\n\n          <Panel>\n            <PanelHeader>{t('Rate Limit')}</PanelHeader>\n            <PanelBody>\n              <SelectField\n                label={t('Action Interval')}\n                help={t('Perform these actions once this often for an issue')}\n                clearable={false}\n                name=\"frequency\"\n                className={this.hasError('frequency') ? ' error' : ''}\n                value={frequency}\n                required\n                choices={FREQUENCY_CHOICES}\n                onChange={val => this.handleChange('frequency', val)}\n              />\n            </PanelBody>\n          </Panel>\n\n          <Panel>\n            <PanelHeader>{t('Give your rule a name')}</PanelHeader>\n            <PanelBody>\n              <TextField\n                label={t('Rule name')}\n                help={t('Give your rule a name so it is easy to manage later')}\n                name=\"name\"\n                defaultValue={name}\n                required\n                placeholder={t('My Rule Name')}\n                onChange={val => this.handleChange('name', val)}\n              />\n            </PanelBody>\n          </Panel>\n        </StyledForm>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withApi(IssueRuleEditor);\n\nconst StyledForm = styled(Form)`\n  position: relative;\n`;\n\nconst PanelRuleItem = styled(PanelItem)`\n  flex-direction: column;\n`;\n\nconst EmbeddedWrapper = styled('div')`\n  margin: 0 ${space(1)};\n  width: 72px;\n`;\n\nconst EmbeddedSelectField = styled(SelectField)`\n  padding: 0;\n  font-weight: normal;\n  text-transform: none;\n`;\n\nconst SemiTransparentLoadingMask = styled(LoadingMask)`\n  opacity: 0.6;\n  z-index: 1; /* Needed so that it sits above form elements */\n`;\n","import {RouteComponentProps} from 'react-router/lib/Router';\nimport React from 'react';\n\nimport {\n  IssueAlertRuleActionTemplate,\n  IssueAlertRuleConditionTemplate,\n} from 'app/types/alerts';\nimport {Organization, Project} from 'app/types';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport AsyncView from 'app/views/asyncView';\nimport IssueEditor from 'app/views/settings/projectAlerts/issueEditor';\nimport IncidentRulesCreate from 'app/views/settings/incidentRules/create';\nimport PanelItem from 'app/components/panels/panelItem';\nimport RadioGroup from 'app/views/settings/components/forms/controls/radioGroup';\nimport withOrganization from 'app/utils/withOrganization';\nimport withProject from 'app/utils/withProject';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n  incidentRuleId: string;\n  ruleId: string; //TODO(ts): Make ruleId optional\n};\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n} & RouteComponentProps<RouteParams, {}>;\n\ntype State = {\n  alertType: string | null;\n  configs: {\n    actions: IssueAlertRuleActionTemplate[];\n    conditions: IssueAlertRuleConditionTemplate[];\n  } | null;\n} & AsyncView['state'];\n\nclass RuleDetails extends AsyncView<Props, State> {\n  getDefaultState() {\n    const {pathname} = this.props.location;\n\n    return {\n      ...super.getDefaultState(),\n      alertType: pathname.includes('issue-rules')\n        ? 'issue'\n        : pathname.includes('metric-rules')\n        ? 'metric'\n        : null,\n      configs: null,\n    };\n  }\n\n  getEndpoints(): [string, string][] {\n    const {orgId, projectId} = this.props.params;\n\n    return [['configs', `/projects/${orgId}/${projectId}/rules/configuration/`]];\n  }\n\n  handleChangeAlertType = (alertType: string) => {\n    // alertType should be `issue` or `metric`\n    this.setState({\n      alertType,\n    });\n  };\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderBody() {\n    const {alertType, configs} = this.state;\n    return (\n      <React.Fragment>\n        <Panel>\n          <PanelHeader>{t('Choose an Alert Type')}</PanelHeader>\n          <PanelBody>\n            <PanelItem>\n              <RadioGroup\n                label={t('Select an Alert Type')}\n                value={this.state.alertType}\n                choices={[\n                  [\n                    'metric',\n                    t('Metric Alert'),\n                    t(\n                      'Alert on conditions defined over all events in the project. For example, more than 10 users affected by signup-page errors, database errors exceed 10 per minute, errors seen by our largest customers exceed 500 per hour.'\n                    ),\n                  ],\n                  [\n                    'issue',\n                    t('Issue Alert'),\n                    t(\n                      'Alert when any issue satisfies a set of conditions. For example, a new issue is seen, an issue occurs more than 100 times, an issue affects more than 100 users.'\n                    ),\n                  ],\n                ]}\n                onChange={this.handleChangeAlertType}\n              />\n            </PanelItem>\n          </PanelBody>\n        </Panel>\n\n        {alertType === 'issue' ? (\n          <IssueEditor\n            {...this.props}\n            actions={configs && configs.actions}\n            conditions={configs && configs.conditions}\n          />\n        ) : alertType === 'metric' ? (\n          <IncidentRulesCreate {...this.props} />\n        ) : null}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withProject(withOrganization(RuleDetails));\n"],"sourceRoot":""}