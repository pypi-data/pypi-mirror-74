{"version":3,"sources":["webpack:///./app/actionCreators/teams.jsx","webpack:///./app/components/badge.tsx","webpack:///./app/components/well.tsx","webpack:///./app/views/settings/components/settingsNavItem.tsx","webpack:///./app/views/settings/components/settingsNavigationGroup.tsx","webpack:///./app/views/settings/components/settingsNavigation.tsx","webpack:///./app/components/projects/missingProjectMembership.jsx","webpack:///./app/views/projects/projectContext.jsx","webpack:///./app/views/settings/project/projectSettingsNavigation.tsx","webpack:///./app/views/settings/project/projectSettingsLayout.jsx"],"names":["doCallback","params","name","args","fetchTeamDetails","api","options","TeamActions","fetchDetails","teamId","request","orgId","success","data","fetchDetailsSuccess","error","fetchDetailsError","updateTeamSuccess","updateSuccess","updateTeam","endpoint","update","method","updateError","joinTeam","memberId","id","uniqueId","leaveTeam","createTeam","team","requestPromise","then","createTeamSuccess","addSuccessMessage","tct","slug","organization","err","createTeamError","addErrorMessage","removeTeam","removeTeamSuccess","removeTeamError","priorityColors","new","red","strong","blue","highlight","green","Badge","priority","text","props","p","Well","theme","hasImage","centered","propTypes","bool","StyledTag","StyledNavItem","badge","label","index","LabelHook","hookName","defaultComponent","children","Fragment","renderedBadge","size","border","onlyActiveOnIndex","activeClassName","NavSection","SettingsHeading","project","items","map","path","title","show","badgeResult","to","replaceRouterParams","projectId","key","componentDidCatch","errorInfo","scope","Object","keys","forEach","setExtra","window","location","href","render","navigationObjects","hooks","hookConfigs","navWithHooks","concat","config","otherProps","Hook","i","cloneElement","defaultProps","Component","MissingProjectMembership","projects","find","state","loading","this","setState","IndicatorStore","add","t","features","className","isPending","has","onClick","bind","teams","length","renderJoinTeam","Set","StyledWell","StyledHeroIcon","src","renderExplanation","renderJoinTeams","React","styled","space","HeroIcon","withApi","ERROR_TYPES","ProjectContext","createReactClass","displayName","childContextTypes","SentryTypes","Project","mixins","Reflux","connect","MemberListStore","listenTo","ProjectsStore","getInitialState","errorType","memberList","projectNavSection","getChildContext","componentWillMount","fetchData","componentWillReceiveProps","nextProps","skipReload","remountComponent","componentDidUpdate","prevProps","prevState","docTitle","docTitleRef","forceUpdate","getTitle","onProjectChange","projectIds","getById","identifyProject","projectSlug","activeProject","hasAccess","setActiveProject","projectRequest","fetchOrgMembers","isMember","setProjectNavSection","section","renderBody","style","margin","onRetry","ref","withOrganization","withProjects","withRouter","withProject","access","ProjectSettingsLayout","renderNavigation","context","contextTypes","Organization"],"mappings":"6FAAA,mRAKMA,EAAa,WAAgC,IAA/BC,EAA+B,uDAAtB,GAAIC,EAAkB,uCACjD,GAA4B,mBAAjBD,EAAOC,GAAsB,4BADAC,EACA,iCADAA,EACA,kBACtCF,EAAOC,GAAP,MAAAD,EAAgBE,KAmBb,SAASC,EAAiBC,EAAKJ,EAAQK,GAE5C,OADAC,IAAYC,aAAaP,EAAOQ,QACzBJ,EAAIK,QAAJ,iBAAsBT,EAAOU,MAA7B,YAAsCV,EAAOQ,OAA7C,KAAwD,CAC7DG,QAAS,SAAAC,GACPN,IAAYO,oBAAoBb,EAAOQ,OAAQI,GAC/Cb,EAAWM,EAAS,UAAWO,IAEjCE,MAAO,SAAAA,GACLR,IAAYS,kBAAkBf,EAAOQ,OAAQM,GAC7Cf,EAAWM,EAAS,QAASS,MAK5B,SAASE,EAAkBR,EAAQI,GACxCN,IAAYW,cAAcT,EAAQI,GAG7B,SAASM,EAAWd,EAAKJ,EAAQK,GACtC,IAAMc,EAAW,UAAH,OAAanB,EAAOU,MAApB,YAA6BV,EAAOQ,OAApC,KAGd,OAFAF,IAAYc,OAAOpB,EAAOQ,OAAQR,EAAOY,MAElCR,EAAIK,QAAQU,EAAU,CAC3BE,OAAQ,MACRT,KAAMZ,EAAOY,KACbD,QAAS,SAAAC,GACPI,EAAkBhB,EAAOQ,OAAQI,GACjCb,EAAWM,EAAS,UAAWO,IAEjCE,MAAO,SAAAA,GACLR,IAAYgB,YAAYtB,EAAOQ,OAAQM,GACvCf,EAAWM,EAAS,QAASS,MAK5B,SAASS,EAASnB,EAAKJ,EAAQK,GACpC,IAAMc,EAAW,kBAAH,OAAqBnB,EAAOU,MAA5B,oBAA6CV,EAAOwB,UAChE,KADY,kBACExB,EAAOQ,OADT,KAERiB,EAAKC,cAIX,OAFApB,IAAYc,OAAOK,EAAIzB,EAAOQ,QAEvBJ,EAAIK,QAAQU,EAAU,CAC3BE,OAAQ,OACRT,KAAMZ,EAAOY,KACbD,QAAS,SAAAC,GACPN,IAAYW,cAAcjB,EAAOQ,OAAQI,GACzCb,EAAWM,EAAS,UAAWO,IAEjCE,MAAO,SAAAA,GACLR,IAAYgB,YAAYG,EAAIzB,EAAOQ,OAAQM,GAC3Cf,EAAWM,EAAS,QAASS,MAK5B,SAASa,EAAUvB,EAAKJ,EAAQK,GACrC,IAAMc,EAAW,kBAAH,OAAqBnB,EAAOU,MAA5B,oBAA6CV,EAAOwB,UAChE,KADY,kBACExB,EAAOQ,OADT,KAERiB,EAAKC,cAIX,OAFApB,IAAYc,OAAOK,EAAIzB,EAAOQ,QAEvBJ,EAAIK,QAAQU,EAAU,CAC3BE,OAAQ,SACRV,QAAS,SAAAC,GACPN,IAAYW,cAAcjB,EAAOQ,OAAQI,GACzCb,EAAWM,EAAS,UAAWO,IAEjCE,MAAO,SAAAA,GACLR,IAAYgB,YAAYG,EAAIzB,EAAOQ,OAAQM,GAC3Cf,EAAWM,EAAS,QAASS,MAK5B,SAASc,EAAWxB,EAAKyB,EAAM7B,EAAQK,GAG5C,OAFAC,IAAYsB,WAAWC,GAEhBzB,EACJ0B,eADI,yBAC6B9B,EAAOU,MADpC,WACoD,CACvDW,OAAQ,OACRT,KAAMiB,IAEPE,MACC,SAAAnB,GAQE,OAPAN,IAAY0B,kBAAkBpB,GAC9BqB,YACEC,YAAI,2DAA4D,CAC9DL,KAAM,IAAF,OAAMjB,EAAKuB,MACfC,aAAcpC,EAAOU,SAGlBE,KAET,SAAAyB,GAQE,MAPA/B,IAAYgC,gBAAgBT,EAAKM,MAAQN,EAAK5B,KAAMoC,GACpDE,YACEL,YAAI,6DAA8D,CAChEL,KAAM,IAAF,OAAMA,EAAKM,MAAQN,EAAK5B,MAC5BmC,aAAcpC,EAAOU,SAGnB2B,KAKP,SAASG,EAAWpC,EAAKJ,EAAQK,GAGtC,OAFAC,IAAYkC,WAAWxC,EAAOQ,QAEvBJ,EACJ0B,eADI,iBACqB9B,EAAOU,MAD5B,YACqCV,EAAOQ,OAD5C,KACuD,CAC1Da,OAAQ,WAETU,MACC,SAAAnB,GAQE,OAPAN,IAAYmC,kBAAkBzC,EAAOQ,OAAQI,GAC7CqB,YACEC,YAAI,+DAAgE,CAClEL,KAAM,IAAF,OAAM7B,EAAOQ,QACjB4B,aAAcpC,EAAOU,SAGlBE,KAET,SAAAyB,GAQE,MAPA/B,IAAYoC,gBAAgB1C,EAAOQ,OAAQ6B,GAC3CE,YACEL,YAAI,+DAAgE,CAClEL,KAAM,IAAF,OAAM7B,EAAOQ,QACjB4B,aAAcpC,EAAOU,SAGnB2B,O,sFC3JRM,EAAiB,CACrBC,IAAK,IAAMC,IACXC,OAAQ,IAAMC,KACdC,UAAW,IAAMC,OASbC,EAAQ,aAAO,SAAC,GAAC,EAAAC,SAAA,IAAUC,EAAA,EAAAA,KAAM,qCAAqB,OAC1D,wCAAUC,GAAQD,KADT,oBAAG,CAEZ,iWAAO,oJAOkB,mGAKiD,wFAL3D,YAAM,KAKP,SAAAE,GAAK,OAACA,EAAEH,SAAWR,EAAeW,EAAEH,UAAY,IAA3C,SAYN,O,sEC/BTI,EAAO,YAAO,MAAV,oBAAG,CAAa,qKAAW,yBACS,yCAER,iBACoB,uDAGf,UANrB,SAAAD,GAAK,OAAAA,EAAEE,MAAF,eAEX,SAAAF,GAAK,OAAAA,EAAEE,MAAF,aACR,SAAAF,GAAK,OAACA,EAAEG,SAAW,YAAd,eAGd,SAAAH,GAAK,OAAAA,EAAEI,UAAF,wBAGTH,EAAKI,UAAY,CACfF,SAAU,IAAUG,KACpBF,SAAU,IAAUE,MAGP,O,wHCYTC,EAAY,YAAO,IAAV,qBAAG,CAAW,mFAIvBC,EAAgB,YAAO,OAAV,qBAAG,CAAY,4tBAEL,kGAME,0CAGQ,qEAOR,wbAhBpB,SAAAR,GAAK,OAAAA,EAAEE,MAAF,SAMH,SAAAF,GAAK,OAAAA,EAAEE,MAAF,SAGE,SAAAF,GAAK,OAAAA,EAAEE,MAAF,UAOZ,SAAAF,GAAK,OAAAA,EAAEE,MAAF,SA6BH,EA3ES,SAAC,GAAC,IAAAO,EAAA,EAAAA,MAAOC,EAAA,EAAAA,MAAOC,EAAA,EAAAA,MAAOxC,EAAA,EAAAA,GAAI,gDAC3CyC,EAAY,YAAc,CAC9BC,SAAU,qBACVC,iBAAkB,SAAC,G,IAACC,EAAA,EAAAA,SAAc,yBAAC,IAAMC,SAAQ,KAAED,MAG/CE,EACM,QAAVR,EACE,kBAACF,EAAS,CAACV,SAAS,UAAUqB,KAAK,QAAQC,QAAM,GAC9CV,GAGH,kBAAC,IAAK,CAACX,KAAMW,IAGjB,OACE,kBAACD,EAAa,aAACY,kBAAmBT,EAAOU,gBAAgB,UAAatB,GACpE,kBAACa,EAAS,CAACzC,GAAIA,GAAKuC,GAEnBD,EAAQQ,EAAgB,O,SCMzBK,EAAa,YAAO,MAAV,oBAAG,CAAa,mFAI1BC,EAAkB,YAAO,MAAV,oBAAG,CAAa,sJACR,yGAAlB,SAAAvB,GAAK,OAAAA,EAAEE,MAAF,SAOD,EA9CiB,SAACH,GACxB,IAAAjB,EAAA,EAAAA,aAAc0C,EAAA,EAAAA,QAAS7E,EAAA,EAAAA,KAAM8E,EAAA,EAAAA,MAEpC,OACE,kBAACH,EAAU,gBAAe3E,GACxB,kBAAC4E,EAAe,KAAE5E,GACjB8E,EAAMC,KAAI,SAAC,G,IAACC,EAAA,EAAAA,KAAMC,EAAA,EAAAA,MAAOjB,EAAA,EAAAA,MAAOkB,EAAA,EAAAA,KAAMpB,EAAA,EAAAA,MAAOtC,EAAA,EAAAA,GAC5C,GAAoB,mBAAT0D,IAAwBA,EAAK9B,GACtC,OAAO,KAET,QAAoB,IAAT8B,IAAyBA,EAClC,OAAO,KAET,IAAMC,EAA+B,mBAAVrB,EAAuBA,EAAMV,GAAS,KAC3DgC,EAAK,OAAAC,EAAA,GAAoBL,EAAI,2BAC7B7C,EAAe,CAAC1B,MAAO0B,EAAaD,MAAQ,IAC5C2C,EAAU,CAACS,UAAWT,EAAQ3C,MAAQ,KAG5C,OACE,kBAAC,EAAe,CACdqD,IAAKN,EACLG,GAAIA,EACJrB,MAAOkB,EACPjB,MAAOA,EACPF,MAAOqB,EACP3D,GAAIA,SCZhB,2B,+CA6BA,OA7BiC,iBAM/B,YAAAgE,kBAAA,SAAkB3E,EAAc4E,GAC9B,KAAiB,SAAAC,GACfC,OAAOC,KAAKH,GAAWI,SAAQ,SAAAN,GAC7BG,EAAMI,SAASP,EAAKE,EAAUF,OAEhCG,EAAMI,SAAS,MAAOC,OAAOC,SAASC,MACtC,IAAwBpF,OAI5B,YAAAqF,OAAA,WACE,IAAM,aAACC,EAAA,EAAAA,kBAAmBC,EAAA,EAAAA,MAAOC,EAAA,EAAAA,YAAa,6DACxCC,EAAeH,EAAkBI,OAAOF,GAE9C,OACE,6BACGC,EAAavB,KAAI,SAAAyB,GAAU,OAC1B,kBAAC,EAAuB,aAACjB,IAAKiB,EAAOxG,MAAUyG,EADrB,OAG3BL,EAAMrB,KAAI,SAAC2B,EAAMC,GAAM,WAAMC,aAAaF,EAAM,CAACnB,IAAK,QAA/B,SAxBvB,EAAAsB,aAAe,CACpBT,MAAO,GACPC,YAAa,IA0BjB,EA7BA,CAAiC,IAAMS,WA+BxB,O,4VCvCTC,E,YAOJ,WAAY3D,GAAO,yBACjB,4BAAMA,KAEiCA,MAAhCjB,EAHU,EAGVA,aAAcmD,EAHJ,EAGIA,UACfT,EAAU1C,EAAa6E,SAASC,MAAK,SAAA5D,GAAC,OAAIA,EAAEnB,OAASoD,KAJ1C,OAMjB,EAAK4B,MAAQ,CACXC,SAAS,EACTtG,OAAO,EACPgE,WATe,E,sDAaVjD,GAAM,WACbwF,KAAKC,SAAS,CACZF,SAAS,IAGX7F,YACE8F,KAAKhE,MAAMjD,IACX,CACEM,MAAO2G,KAAKhE,MAAMjB,aAAaD,KAC/B3B,OAAQqB,EAAKM,MAEf,CACExB,QAAS,WACP,EAAK2G,SAAS,CACZF,SAAS,EACTtG,OAAO,KAGXA,MAAO,WACL,EAAKwG,SAAS,CACZF,SAAS,EACTtG,OAAO,IAETyG,IAAeC,IACbC,YAAE,sDACF,c,qCAOK5F,EAAM6F,GACnB,OAAK7F,EAGDwF,KAAKF,MAAMC,QACN,uBAAGO,UAAU,4CAAb,OACE9F,EAAK+F,UACP,uBAAGD,UAAU,gCAAgCF,YAAE,oBAC7CC,EAASG,IAAI,mBAEpB,uBAAGF,UAAU,kBAAkBG,QAAST,KAAK9F,SAASwG,KAAKV,KAAMxF,IAC9D4F,YAAE,cAKP,uBAAGE,UAAU,kBAAkBG,QAAST,KAAK9F,SAASwG,KAAKV,KAAMxF,IAC9D4F,YAAE,mBAfE,O,wCAoBOC,GAChB,OAAIA,EAASG,IAAI,mBACRJ,YAAE,0DAEFA,YACL,oF,sCAKUC,GAAU,WACjBM,EAASX,KAAKF,MAAMrC,QAApBkD,MACP,OAAKA,EAAMC,OAUJD,EAAMhD,KAAI,SAAAnD,GACf,OACE,uBAAG2D,IAAK3D,EAAKM,MAAb,IACIN,EAAKM,KADT,KACiB,EAAK+F,eAAerG,EAAM6F,OAX3C,kBAAC,IAAD,KACGD,YACC,+F,+BAeD,IACArF,EAAgBiF,KAAKhE,MAArBjB,aACDsF,EAAW,IAAIS,IAAI/F,EAAasF,UAEtC,OACE,yBAAKC,UAAU,aACb,kBAACS,EAAD,CAAY1E,UAAQ,GAClB,kBAAC2E,EAAD,CAAgBC,IAAI,4BACpB,2BAAIb,YAAE,yCACN,2BAAIJ,KAAKkB,kBAAkBb,IAC1BL,KAAKmB,gBAAgBd,S,GAnHOe,IAAM1B,WAAvCC,E,uCA0HN,IAAMoB,EAAaM,YAAOnF,IAAV,oBAAGmF,CAAH,cACAC,YAAM,GADN,KAIVN,EAAiBK,YAAOE,IAAV,oBAAGF,CAAH,iBACDC,YAAM,GADL,KAMLE,cAAQ7B,G,mlBC7HvB,IAAM8B,EACgB,qBADhBA,EAEe,oBAFfA,EAGK,UAULC,EAAiBC,IAAiB,CACtCC,YAAa,iBAebC,kBAAmB,CACjBpE,QAASqE,IAAYC,SAGvBC,OAAQ,CACNC,IAAOC,QAAQC,IAAiB,cAChCF,IAAOG,SAASC,IAAe,oBAGjCC,gBAzBsC,WA0BpC,MAAO,CACLvC,SAAS,EACTtG,OAAO,EACP8I,UAAW,KACXC,WAAY,GACZ/E,QAAS,KACTgF,kBAAmB,OAIvBC,gBApCsC,WAqCpC,MAAO,CACLjF,QAASuC,KAAKF,MAAMrC,UAIxBkF,mBA1CsC,WA2CpC3C,KAAK4C,aAGPC,0BA9CsC,SA8CZC,GACpBA,EAAU5E,YAAc8B,KAAKhE,MAAMkC,YAIlC4E,EAAUC,YACb/C,KAAKgD,qBAITC,mBAxDsC,SAwDnBC,EAAWC,GAyB5B,GAxBID,EAAUhF,YAAc8B,KAAKhE,MAAMkC,WACrC8B,KAAK4C,YAUHM,EAAUtD,SAASgB,SAAWZ,KAAKhE,MAAM4D,SAASgB,QACpDZ,KAAK4C,YAaLO,EAAU1F,UAAYuC,KAAKF,MAAMrC,SACjC0F,EAAUpI,eAAiBiF,KAAKF,MAAM/E,aACtC,CACA,IAAKiF,KAAKoD,SACR,OAEF,IAAMA,EAAWpD,KAAKqD,YAAYD,SAC9BA,GACFA,EAASE,gBAKfN,iBA/FsC,WAgGpChD,KAAKC,SAASD,KAAKsC,oBAGrBiB,SAnGsC,WAoGpC,OAAIvD,KAAKF,MAAMrC,QACNuC,KAAKF,MAAMrC,QAAQ3C,KAErB,UAGT0I,gBA1GsC,SA0GtBC,GACTzD,KAAKF,MAAMrC,SAGXgG,EAAWjD,IAAIR,KAAKF,MAAMrC,QAAQrD,KAIvC4F,KAAKC,SAAS,CACZxC,QAAS,EAAF,GAAM4E,IAAcqB,QAAQ1D,KAAKF,MAAMrC,QAAQrD,QAI1DuJ,gBAvHsC,WAuHpB,MACc3D,KAAKhE,MAA5B4D,EADS,EACTA,SACDgE,EAFU,EACC1F,UAEjB,OAAO0B,EAASC,MAAK,qBAAE/E,OAAmB8I,MAAgB,MAGtDhB,UA7HgC,sGA8HG5C,KAAKhE,MAArC3C,EA9H6B,EA8H7BA,MAAO6E,EA9HsB,EA8HtBA,UAAW6E,EA9HW,EA8HXA,WAEnBc,EAAgB7D,KAAK2D,kBACrBG,EAAYD,GAAiBA,EAAcC,UAEjD9D,KAAKC,UAAS,SAAAH,GAAK,MAAK,CAEtBC,SAASgD,GAAajD,EAAMC,QAE5BtC,QAASoG,OAGPA,IAAiBC,EA1Ie,wBA2IlCC,YAAiB,MACXC,EAAiBhE,KAAKhE,MAAMjD,IAAI0B,eAAf,oBACRpB,EADQ,YACC6E,EADD,MA5IW,6BAiJV8F,GAjJU,QAiJ1BvG,EAjJ0B,OAkJhCuC,KAAKC,SAAS,CACZF,SAAS,EACTtC,UACAhE,OAAO,EACP8I,UAAW,OAIbwB,YAAiBtG,GA1Je,kDA4JhCuC,KAAKC,SAAS,CACZF,SAAS,EACTtG,OAAO,EACP8I,UAAWd,IA/JmB,eAmKlCwC,YAAgBjE,KAAKhE,MAAMjD,IAAKM,EAAOwK,EAAczJ,IAnKnB,+BAyKhCyJ,GAAkBA,EAAcK,SAzKA,wBA0KlClE,KAAKC,SAAS,CACZF,SAAS,EACTtG,OAAO,EACP8I,UAAWd,IA7KqB,gEAuL5BzB,KAAKhE,MAAMjD,IAAI0B,eAAf,oBAA2CpB,EAA3C,YAAoD6E,EAApD,OAvL4B,2DAyLlC8B,KAAKC,SAAS,CACZF,SAAS,EACTtG,OAAO,EACP8I,UAAWd,IA5LqB,kEAiMtC0C,qBAjMsC,SAiMjBC,GACnBpE,KAAKC,SAAS,CACZwC,kBAAmB2B,KAIvBC,WAvMsC,WAwMpC,GAAIrE,KAAKF,MAAMC,QACb,OACE,yBAAKO,UAAU,uBACb,kBAAC,UAAD,OAGC,GAAIN,KAAKF,MAAMrG,MACpB,OAAQuG,KAAKF,MAAMyC,WACjB,KAAKd,EAEH,OACE,yBAAKnB,UAAU,aACb,yBAAKA,UAAU,oBAAoBgE,MAAO,CAACC,OAAQ,gBAChDnE,YAAE,qDAIX,KAAKqB,EAGH,OACE,kBAAC,EAAD,CACE1G,aAAciF,KAAKhE,MAAMjB,aACzBmD,UAAW8B,KAAKF,MAAMrC,QAAQ3C,OAGpC,QACE,OAAO,kBAAC,IAAD,CAAc0J,QAASxE,KAAKgD,mBAIzC,OAAOhD,KAAKhE,MAAMgB,UAGpB8B,OA1OsC,WA0O7B,WACP,OACE,kBAAC,IAAD,CAAe2F,IAAK,SAAAA,GAAG,OAAK,EAAKpB,YAAcoB,GAAM5G,MAAOmC,KAAKuD,YAC9DvD,KAAKqE,iBAQC7C,gBAAQkD,YAAiBC,YAAaC,qBAAWlD,O,8MC/PjD,SAAAmD,EAAA,GAAY,OAAAH,EAAA,IAVO,SAAC,G,IAAC3J,EAAA,EAAAA,aAAc0C,EAAA,EAAAA,QAAoB,OACpE,kBAAC,IAAkB,CACjBsB,kBAAmB,YAAiB,CAACtB,QAAO,EAAE1C,aAAY,IAC1D+J,OAAQ,IAAIhE,IAAI/F,EAAa+J,QAC7BzE,SAAU,IAAIS,IAAI/F,EAAasF,UAC/BtF,aAAcA,EACd0C,QAASA,Q,kBCZPsH,E,yIAKK,aACoB/E,KAAKhE,MAAMrD,OAA/BU,EADA,EACAA,MAAO6E,EADP,EACOA,UAEd,OACE,kBAAC,IAAD,OACM8B,KAAKhE,MAAMrD,OADjB,CAEEoK,YAAU,EACV1J,MAAOA,EACP6E,UAAWA,IAEX,kBAAC,IAAD,OACM8B,KAAKhE,MADX,CAEEgJ,iBAAkB,kBAAM,kBAAC,EAA8B,EAAKhJ,UAE3DgE,KAAKhE,MAAMgB,UACVoE,IAAM5B,aAAaQ,KAAKhE,MAAMgB,SAAU,CACtCjC,aAAciF,KAAKiF,QAAQlK,aAC3BoJ,qBAAsB,qB,GAtBA/C,IAAM1B,WAApCqF,E,oCAAAA,EACGG,aAAe,CACpBnK,aAAc+G,IAAYqD,cA4BfJ","file":"ProjectSettingsLayout.js","sourcesContent":["import TeamActions from 'app/actions/teamActions';\nimport {tct} from 'app/locale';\nimport {addSuccessMessage, addErrorMessage} from 'app/actionCreators/indicator';\nimport {uniqueId} from 'app/utils/guid';\n\nconst doCallback = (params = {}, name, ...args) => {\n  if (typeof params[name] === 'function') {\n    params[name](...args);\n  }\n};\n\n// Fetch teams for org\nexport function fetchTeams(api, params, options) {\n  TeamActions.fetchAll(params.orgId);\n  return api.request(`/teams/${params.orgId}/`, {\n    success: data => {\n      TeamActions.fetchAllSuccess(params.orgId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchAllError(params.orgId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function fetchTeamDetails(api, params, options) {\n  TeamActions.fetchDetails(params.teamId);\n  return api.request(`/teams/${params.orgId}/${params.teamId}/`, {\n    success: data => {\n      TeamActions.fetchDetailsSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchDetailsError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function updateTeamSuccess(teamId, data) {\n  TeamActions.updateSuccess(teamId, data);\n}\n\nexport function updateTeam(api, params, options) {\n  const endpoint = `/teams/${params.orgId}/${params.teamId}/`;\n  TeamActions.update(params.teamId, params.data);\n\n  return api.request(endpoint, {\n    method: 'PUT',\n    data: params.data,\n    success: data => {\n      updateTeamSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function joinTeam(api, params, options) {\n  const endpoint = `/organizations/${params.orgId}/members/${params.memberId ||\n    'me'}/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'POST',\n    data: params.data,\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function leaveTeam(api, params, options) {\n  const endpoint = `/organizations/${params.orgId}/members/${params.memberId ||\n    'me'}/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'DELETE',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function createTeam(api, team, params, options) {\n  TeamActions.createTeam(team);\n\n  return api\n    .requestPromise(`/organizations/${params.orgId}/teams/`, {\n      method: 'POST',\n      data: team,\n    })\n    .then(\n      data => {\n        TeamActions.createTeamSuccess(data);\n        addSuccessMessage(\n          tct('[team] has been added to the [organization] organization', {\n            team: `#${data.slug}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.createTeamError(team.slug || team.name, err);\n        addErrorMessage(\n          tct('Unable to create [team] in the [organization] organization', {\n            team: `#${team.slug || team.name}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n\nexport function removeTeam(api, params, options) {\n  TeamActions.removeTeam(params.teamId);\n\n  return api\n    .requestPromise(`/teams/${params.orgId}/${params.teamId}/`, {\n      method: 'DELETE',\n    })\n    .then(\n      data => {\n        TeamActions.removeTeamSuccess(params.teamId, data);\n        addSuccessMessage(\n          tct('[team] has been removed from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.removeTeamError(params.teamId, err);\n        addErrorMessage(\n          tct('Unable to remove [team] from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\nimport space from 'app/styles/space';\nimport theme from 'app/utils/theme';\n\nconst priorityColors = {\n  new: theme.red,\n  strong: theme.blue,\n  highlight: theme.green,\n} as const;\n\ntype Props = React.HTMLProps<HTMLSpanElement> & {\n  text?: string | number | null;\n  priority?: keyof typeof priorityColors;\n  className?: string;\n};\n\nconst Badge = styled(({priority, text, ...props}: Props) => (\n  <span {...props}>{text}</span>\n))<Props>`\n  display: inline-block;\n  height: 20px;\n  min-width: 20px;\n  line-height: 20px;\n  border-radius: 20px;\n  padding: 0 5px;\n  margin-left: ${space(0.5)};\n  font-size: 75%;\n  font-weight: 600;\n  text-align: center;\n  color: #fff;\n  background: ${p => (p.priority ? priorityColors[p.priority] : theme.gray1)};\n  transition: background 100ms linear;\n\n  position: relative;\n  top: -1px;\n`;\n\nBadge.propTypes = {\n  text: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  priority: PropTypes.oneOf(['strong', 'new', 'highlight']),\n} as any;\n\nexport default Badge;\n","import React from 'react';\nimport styled from 'react-emotion';\nimport PropTypes from 'prop-types';\n\ntype Props = {\n  hasImage: boolean | undefined;\n  centered: boolean | undefined;\n  children: React.ReactNode;\n  theme?: any;\n};\n\ntype WellProps = Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props;\n\nconst Well = styled('div')<WellProps>`\n  border: 1px solid ${p => p.theme.borderLight};\n  box-shadow: none;\n  background: ${p => p.theme.whiteDark};\n  padding: ${p => (p.hasImage ? '80px 30px' : '15px 20px')};\n  margin-bottom: 20px;\n  border-radius: 3px;\n  ${p => p.centered && 'text-align: center'};\n`;\n\nWell.propTypes = {\n  hasImage: PropTypes.bool,\n  centered: PropTypes.bool,\n};\n\nexport default Well;\n","import {Link} from 'react-router';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport Badge from 'app/components/badge';\nimport HookOrDefault from 'app/components/hookOrDefault';\nimport Tag from 'app/views/settings/components/tag';\n\ntype Props = {\n  to: React.ComponentProps<Link>['to'];\n  label: React.ReactNode;\n  badge?: string | number | null;\n  index?: boolean;\n  id?: string;\n};\n\nconst SettingsNavItem = ({badge, label, index, id, ...props}: Props) => {\n  const LabelHook = HookOrDefault({\n    hookName: 'sidebar:item-label',\n    defaultComponent: ({children}) => <React.Fragment>{children}</React.Fragment>,\n  });\n\n  const renderedBadge =\n    badge === 'new' ? (\n      <StyledTag priority=\"warning\" size=\"small\" border>\n        {badge}\n      </StyledTag>\n    ) : (\n      <Badge text={badge} />\n    );\n\n  return (\n    <StyledNavItem onlyActiveOnIndex={index} activeClassName=\"active\" {...props}>\n      <LabelHook id={id}>{label}</LabelHook>\n\n      {badge ? renderedBadge : null}\n    </StyledNavItem>\n  );\n};\n\nconst StyledTag = styled(Tag)`\n  margin-left: 0.25em;\n`;\n\nconst StyledNavItem = styled(Link)`\n  display: block;\n  color: ${p => p.theme.gray2};\n  font-size: 14px;\n  line-height: 30px;\n  position: relative;\n\n  &.active {\n    color: ${p => p.theme.gray5};\n\n    &:before {\n      background: ${p => p.theme.purple};\n    }\n  }\n\n  &:hover,\n  &:focus,\n  &:active {\n    color: ${p => p.theme.gray5};\n    outline: none;\n  }\n\n  &.focus-visible {\n    outline: none;\n    background: #f2eff5;\n    padding: 0 15px;\n    margin: 0 -15px;\n    border-radius: 3px;\n\n    &:before {\n      left: -15px;\n    }\n  }\n\n  &:before {\n    position: absolute;\n    content: '';\n    display: block;\n    top: 4px;\n    left: -30px;\n    height: 20px;\n    width: 4px;\n    background: transparent;\n    border-radius: 0 2px 2px 0;\n  }\n`;\n\nexport default SettingsNavItem;\n","import React from 'react';\nimport styled from 'react-emotion';\n\nimport SettingsNavItem from 'app/views/settings/components/settingsNavItem';\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport {NavigationGroupProps} from 'app/views/settings/types';\n\nconst SettingsNavigationGroup = (props: NavigationGroupProps) => {\n  const {organization, project, name, items} = props;\n\n  return (\n    <NavSection data-test-id={name}>\n      <SettingsHeading>{name}</SettingsHeading>\n      {items.map(({path, title, index, show, badge, id}) => {\n        if (typeof show === 'function' && !show(props)) {\n          return null;\n        }\n        if (typeof show !== 'undefined' && !show) {\n          return null;\n        }\n        const badgeResult = typeof badge === 'function' ? badge(props) : null;\n        const to = replaceRouterParams(path, {\n          ...(organization ? {orgId: organization.slug} : {}),\n          ...(project ? {projectId: project.slug} : {}),\n        });\n\n        return (\n          <SettingsNavItem\n            key={title}\n            to={to}\n            label={title}\n            index={index}\n            badge={badgeResult}\n            id={id}\n          />\n        );\n      })}\n    </NavSection>\n  );\n};\n\nconst NavSection = styled('div')`\n  margin-bottom: 20px;\n`;\n\nconst SettingsHeading = styled('div')`\n  color: ${p => p.theme.gray3};\n  font-size: 12px;\n  font-weight: 600;\n  text-transform: uppercase;\n  margin-bottom: 20px;\n`;\n\nexport default SettingsNavigationGroup;\n","import * as Sentry from '@sentry/browser';\nimport React from 'react';\n\nimport SettingsNavigationGroup from 'app/views/settings/components/settingsNavigationGroup';\nimport {NavigationSection, NavigationProps} from 'app/views/settings/types';\n\ntype Props = NavigationProps & {\n  /**\n   * The configuration for this navigation panel\n   */\n  navigationObjects: NavigationSection[];\n  /**\n   * Additional navigation configuration driven by hooks\n   */\n  hookConfigs: NavigationSection[];\n  /**\n   * Additional navigation elements driven from hooks\n   */\n  hooks: React.ReactElement[];\n};\n\nclass SettingsNavigation extends React.Component<Props> {\n  static defaultProps = {\n    hooks: [],\n    hookConfigs: [],\n  };\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    Sentry.withScope(scope => {\n      Object.keys(errorInfo).forEach(key => {\n        scope.setExtra(key, errorInfo[key]);\n      });\n      scope.setExtra('url', window.location.href);\n      Sentry.captureException(error);\n    });\n  }\n\n  render() {\n    const {navigationObjects, hooks, hookConfigs, ...otherProps} = this.props;\n    const navWithHooks = navigationObjects.concat(hookConfigs);\n\n    return (\n      <div>\n        {navWithHooks.map(config => (\n          <SettingsNavigationGroup key={config.name} {...otherProps} {...config} />\n        ))}\n        {hooks.map((Hook, i) => React.cloneElement(Hook, {key: `hook-${i}`}))}\n      </div>\n    );\n  }\n}\n\nexport default SettingsNavigation;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport IndicatorStore from 'app/stores/indicatorStore';\nimport {joinTeam} from 'app/actionCreators/teams';\nimport HeroIcon from 'app/components/heroIcon';\nimport Well from 'app/components/well';\nimport withApi from 'app/utils/withApi';\nimport space from 'app/styles/space';\nimport {t} from 'app/locale';\n\nclass MissingProjectMembership extends React.Component {\n  static propTypes = {\n    api: PropTypes.object,\n    organization: PropTypes.object.isRequired,\n    projectId: PropTypes.string.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n\n    const {organization, projectId} = this.props;\n    const project = organization.projects.find(p => p.slug === projectId);\n\n    this.state = {\n      loading: false,\n      error: false,\n      project,\n    };\n  }\n\n  joinTeam(team) {\n    this.setState({\n      loading: true,\n    });\n\n    joinTeam(\n      this.props.api,\n      {\n        orgId: this.props.organization.slug,\n        teamId: team.slug,\n      },\n      {\n        success: () => {\n          this.setState({\n            loading: false,\n            error: false,\n          });\n        },\n        error: () => {\n          this.setState({\n            loading: false,\n            error: true,\n          });\n          IndicatorStore.add(\n            t('There was an error while trying to leave the team.'),\n            'error'\n          );\n        },\n      }\n    );\n  }\n\n  renderJoinTeam(team, features) {\n    if (!team) {\n      return null;\n    }\n    if (this.state.loading) {\n      return <a className=\"btn btn-default btn-loading btn-disabled\">...</a>;\n    } else if (team.isPending) {\n      return <a className=\"btn btn-default btn-disabled\">{t('Request Pending')}</a>;\n    } else if (features.has('open-membership')) {\n      return (\n        <a className=\"btn btn-default\" onClick={this.joinTeam.bind(this, team)}>\n          {t('Join Team')}\n        </a>\n      );\n    }\n    return (\n      <a className=\"btn btn-default\" onClick={this.joinTeam.bind(this, team)}>\n        {t('Request Access')}\n      </a>\n    );\n  }\n\n  renderExplanation(features) {\n    if (features.has('open-membership')) {\n      return t('To view this data you must one of the following teams.');\n    } else {\n      return t(\n        'To view this data you must first request access to one of the following teams:'\n      );\n    }\n  }\n\n  renderJoinTeams(features) {\n    const {teams} = this.state.project;\n    if (!teams.length) {\n      return (\n        <EmptyMessage>\n          {t(\n            'No teams have access to this project yet. Ask an admin to add your team to this project.'\n          )}\n        </EmptyMessage>\n      );\n    }\n\n    return teams.map(team => {\n      return (\n        <p key={team.slug}>\n          #{team.slug}: {this.renderJoinTeam(team, features)}\n        </p>\n      );\n    });\n  }\n\n  render() {\n    const {organization} = this.props;\n    const features = new Set(organization.features);\n\n    return (\n      <div className=\"container\">\n        <StyledWell centered>\n          <StyledHeroIcon src=\"icon-circle-exclamation\" />\n          <p>{t(\"You're not a member of this project.\")}</p>\n          <p>{this.renderExplanation(features)}</p>\n          {this.renderJoinTeams(features)}\n        </StyledWell>\n      </div>\n    );\n  }\n}\n\nconst StyledWell = styled(Well)`\n  margin-top: ${space(2)};\n`;\n\nconst StyledHeroIcon = styled(HeroIcon)`\n  margin-bottom: ${space(2)};\n`;\n\nexport {MissingProjectMembership};\n\nexport default withApi(MissingProjectMembership);\n","import {withRouter} from 'react-router';\nimport DocumentTitle from 'react-document-title';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Reflux from 'reflux';\nimport createReactClass from 'create-react-class';\n\nimport {fetchOrgMembers} from 'app/actionCreators/members';\nimport {setActiveProject} from 'app/actionCreators/projects';\nimport {t} from 'app/locale';\nimport withApi from 'app/utils/withApi';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport MemberListStore from 'app/stores/memberListStore';\nimport MissingProjectMembership from 'app/components/projects/missingProjectMembership';\nimport ProjectsStore from 'app/stores/projectsStore';\nimport SentryTypes from 'app/sentryTypes';\nimport withProjects from 'app/utils/withProjects';\nimport withOrganization from 'app/utils/withOrganization';\n\nconst ERROR_TYPES = {\n  MISSING_MEMBERSHIP: 'MISSING_MEMBERSHIP',\n  PROJECT_NOT_FOUND: 'PROJECT_NOT_FOUND',\n  UNKNOWN: 'UNKNOWN',\n};\n\n/**\n * Higher-order component that sets `project` as a child context\n * value to be accessed by child elements.\n *\n * Additionally delays rendering of children until project XHR has finished\n * and context is populated.\n */\nconst ProjectContext = createReactClass({\n  displayName: 'ProjectContext',\n\n  propTypes: {\n    api: PropTypes.object,\n\n    /**\n     * If true, this will not change `state.loading` during `fetchData` phase\n     */\n    skipReload: PropTypes.bool,\n    organization: SentryTypes.Organization,\n    projects: PropTypes.arrayOf(SentryTypes.Project),\n    projectId: PropTypes.string,\n    orgId: PropTypes.string,\n  },\n\n  childContextTypes: {\n    project: SentryTypes.Project,\n  },\n\n  mixins: [\n    Reflux.connect(MemberListStore, 'memberList'),\n    Reflux.listenTo(ProjectsStore, 'onProjectChange'),\n  ],\n\n  getInitialState() {\n    return {\n      loading: true,\n      error: false,\n      errorType: null,\n      memberList: [],\n      project: null,\n      projectNavSection: null,\n    };\n  },\n\n  getChildContext() {\n    return {\n      project: this.state.project,\n    };\n  },\n\n  componentWillMount() {\n    this.fetchData();\n  },\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.projectId === this.props.projectId) {\n      return;\n    }\n\n    if (!nextProps.skipReload) {\n      this.remountComponent();\n    }\n  },\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.projectId !== this.props.projectId) {\n      this.fetchData();\n    }\n\n    // Project list has changed. Likely indicating that a new project has been\n    // added. Re-fetch project details in case that the new project is the active\n    // project.\n    //\n    // For now, only compare lengths. It is possible that project slugs within\n    // the list could change, but it doesn't seem to be broken anywhere else at\n    // the moment that would require deeper checks.\n    if (prevProps.projects.length !== this.props.projects.length) {\n      this.fetchData();\n    }\n\n    // Call forceUpdate() on <DocumentTitle/> if either project or organization\n    // state has changed. This is because <DocumentTitle/>'s shouldComponentUpdate()\n    // returns false unless props differ; meaning context changes for project/org\n    // do NOT trigger renders for <DocumentTitle/> OR any subchildren. The end result\n    // being that child elements that listen for context changes on project/org will\n    // NOT update (without this hack).\n    // See: https://github.com/gaearon/react-document-title/issues/35\n\n    // intentionally shallow comparing references\n    if (\n      prevState.project !== this.state.project ||\n      prevState.organization !== this.state.organization\n    ) {\n      if (!this.docTitle) {\n        return;\n      }\n      const docTitle = this.docTitleRef.docTitle;\n      if (docTitle) {\n        docTitle.forceUpdate();\n      }\n    }\n  },\n\n  remountComponent() {\n    this.setState(this.getInitialState());\n  },\n\n  getTitle() {\n    if (this.state.project) {\n      return this.state.project.slug;\n    }\n    return 'Sentry';\n  },\n\n  onProjectChange(projectIds) {\n    if (!this.state.project) {\n      return;\n    }\n    if (!projectIds.has(this.state.project.id)) {\n      return;\n    }\n\n    this.setState({\n      project: {...ProjectsStore.getById(this.state.project.id)},\n    });\n  },\n\n  identifyProject() {\n    const {projects, projectId} = this.props;\n    const projectSlug = projectId;\n    return projects.find(({slug}) => slug === projectSlug) || null;\n  },\n\n  async fetchData() {\n    const {orgId, projectId, skipReload} = this.props;\n    // we fetch core access/information from the global organization data\n    const activeProject = this.identifyProject();\n    const hasAccess = activeProject && activeProject.hasAccess;\n\n    this.setState(state => ({\n      // if `skipReload` is true, then don't change loading state\n      loading: skipReload ? state.loading : true,\n      // we bind project initially, but it'll rebind\n      project: activeProject,\n    }));\n\n    if (activeProject && hasAccess) {\n      setActiveProject(null);\n      const projectRequest = this.props.api.requestPromise(\n        `/projects/${orgId}/${projectId}/`\n      );\n\n      try {\n        const project = await projectRequest;\n        this.setState({\n          loading: false,\n          project,\n          error: false,\n          errorType: null,\n        });\n\n        // assuming here that this means the project is considered the active project\n        setActiveProject(project);\n      } catch (error) {\n        this.setState({\n          loading: false,\n          error: false,\n          errorType: ERROR_TYPES.UNKNOWN,\n        });\n      }\n\n      fetchOrgMembers(this.props.api, orgId, activeProject.id);\n\n      return;\n    }\n\n    // User is not a memberof the active project\n    if (activeProject && !activeProject.isMember) {\n      this.setState({\n        loading: false,\n        error: true,\n        errorType: ERROR_TYPES.MISSING_MEMBERSHIP,\n      });\n\n      return;\n    }\n\n    // There is no active project. This likely indicates either the project\n    // *does not exist* or the project has not yet been added to the store.\n    // Either way, make a request to check for existence of the project.\n    try {\n      await this.props.api.requestPromise(`/projects/${orgId}/${projectId}/`);\n    } catch (error) {\n      this.setState({\n        loading: false,\n        error: true,\n        errorType: ERROR_TYPES.PROJECT_NOT_FOUND,\n      });\n    }\n  },\n\n  setProjectNavSection(section) {\n    this.setState({\n      projectNavSection: section,\n    });\n  },\n\n  renderBody() {\n    if (this.state.loading) {\n      return (\n        <div className=\"loading-full-layout\">\n          <LoadingIndicator />\n        </div>\n      );\n    } else if (this.state.error) {\n      switch (this.state.errorType) {\n        case ERROR_TYPES.PROJECT_NOT_FOUND:\n          // TODO(chrissy): use scale for margin values\n          return (\n            <div className=\"container\">\n              <div className=\"alert alert-block\" style={{margin: '30px 0 10px'}}>\n                {t('The project you were looking for was not found.')}\n              </div>\n            </div>\n          );\n        case ERROR_TYPES.MISSING_MEMBERSHIP:\n          // TODO(dcramer): add various controls to improve this flow and break it\n          // out into a reusable missing access error component\n          return (\n            <MissingProjectMembership\n              organization={this.props.organization}\n              projectId={this.state.project.slug}\n            />\n          );\n        default:\n          return <LoadingError onRetry={this.remountComponent} />;\n      }\n    }\n\n    return this.props.children;\n  },\n\n  render() {\n    return (\n      <DocumentTitle ref={ref => (this.docTitleRef = ref)} title={this.getTitle()}>\n        {this.renderBody()}\n      </DocumentTitle>\n    );\n  },\n});\n\nexport {ProjectContext};\n\nexport default withApi(withOrganization(withProjects(withRouter(ProjectContext))));\n","import React from 'react';\n\nimport SettingsNavigation from 'app/views/settings/components/settingsNavigation';\nimport getConfiguration from 'app/views/settings/project/navigationConfiguration';\nimport withOrganization from 'app/utils/withOrganization';\nimport withProject from 'app/utils/withProject';\nimport {Organization, Project} from 'app/types';\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n};\n\nconst ProjectSettingsNavigation = ({organization, project}: Props) => (\n  <SettingsNavigation\n    navigationObjects={getConfiguration({project, organization})}\n    access={new Set(organization.access)}\n    features={new Set(organization.features)}\n    organization={organization}\n    project={project}\n  />\n);\n\nexport default withProject(withOrganization(ProjectSettingsNavigation));\n","import React from 'react';\n\nimport ProjectContext from 'app/views/projects/projectContext';\nimport ProjectSettingsNavigation from 'app/views/settings/project/projectSettingsNavigation';\nimport SettingsLayout from 'app/views/settings/components/settingsLayout';\nimport SentryTypes from 'app/sentryTypes';\n\nclass ProjectSettingsLayout extends React.Component {\n  static contextTypes = {\n    organization: SentryTypes.Organization,\n  };\n\n  render() {\n    const {orgId, projectId} = this.props.params;\n\n    return (\n      <ProjectContext\n        {...this.props.params}\n        skipReload\n        orgId={orgId}\n        projectId={projectId}\n      >\n        <SettingsLayout\n          {...this.props}\n          renderNavigation={() => <ProjectSettingsNavigation {...this.props} />}\n        >\n          {this.props.children &&\n            React.cloneElement(this.props.children, {\n              organization: this.context.organization,\n              setProjectNavSection: () => {},\n            })}\n        </SettingsLayout>\n      </ProjectContext>\n    );\n  }\n}\n\nexport default ProjectSettingsLayout;\n"],"sourceRoot":""}