{"version":3,"sources":["webpack:///./app/components/pullRequestLink.jsx","webpack:///./app/views/organizationGroupDetails/groupActivityItem.jsx","webpack:///./app/views/organizationGroupDetails/groupActivity.jsx"],"names":["PullRequestLink","this","props","pullRequest","repository","providerId","displayId","name","id","title","icon","indexOf","src","style","verticalAlign","size","externalUrl","className","inline","href","target","provider","split","pop","React","Component","GroupActivityItem","author","item","orgId","projectId","data","issuesLink","type","t","version","commitId","commit","ignoreDuration","duration","seconds","ignoreCount","ignoreWindow","tct","count","ignoreUserCount","ignoreUserWindow","location","tn","fingerprints","length","destination","shortId","source","assignee","assigneeType","team","TeamStore","getById","slug","user","MemberListStore","email","issues","makeDefaultErrorJson","detail","GroupActivity","state","createBusy","error","inputId","uniqueId","handleNoteDelete","a","async","modelId","oldText","text","api","group","addLoadingMessage","deleteNote","clearIndicators","addErrorMessage","handleNoteCreate","note","setState","createNote","errorJSON","responseJSON","handleNoteUpdate","updateBusy","updateNote","organization","me","ConfigStore","get","projectSlugs","project","noteProps","placeholder","key","storageKey","itemKey","onCreate","busy","activity","map","authorName","mini","dateCreated","onDelete","onUpdate","date","header","params","withApi","withOrganization"],"mappings":"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","file":"GroupActivity.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport ExternalLink from 'app/components/links/externalLink';\nimport InlineSvg from 'app/components/inlineSvg';\n\nclass PullRequestLink extends React.Component {\n  static propTypes = {\n    pullRequest: PropTypes.object,\n    repository: PropTypes.object,\n    inline: PropTypes.bool,\n  };\n\n  get providerId() {\n    if (!this.props.repository.provider) {\n      return null;\n    }\n\n    const id = this.props.repository.provider.id;\n    if (id.indexOf(':') > -1) {\n      return id.split(':').pop();\n    }\n    return id;\n  }\n\n  render() {\n    const {pullRequest, repository} = this.props;\n    const providerId = this.providerId;\n    const displayId = `${repository.name} #${pullRequest.id}: ${pullRequest.title}`;\n\n    let icon = '';\n    if (['github', 'gitlab', 'bitbucket'].indexOf(providerId) > -1) {\n      icon = (\n        <InlineSvg\n          src={`icon-${providerId}`}\n          style={{verticalAlign: 'text-top'}}\n          size=\"14px\"\n        />\n      );\n    }\n\n    return pullRequest.externalUrl ? (\n      <ExternalLink\n        className={this.props.inline ? 'inline-commit' : 'btn btn-default btn-sm'}\n        href={pullRequest.externalUrl}\n        target=\"_blank\"\n      >\n        {icon}&nbsp; {this.props.inline ? '' : ' '}\n        {displayId}\n      </ExternalLink>\n    ) : (\n      <span>{displayId}</span>\n    );\n  }\n}\n\nexport default PullRequestLink;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {t, tct, tn} from 'app/locale';\nimport CommitLink from 'app/components/commitLink';\nimport Duration from 'app/components/duration';\nimport MemberListStore from 'app/stores/memberListStore';\nimport PullRequestLink from 'app/components/pullRequestLink';\nimport TeamStore from 'app/stores/teamStore';\nimport Version from 'app/components/version';\n\nclass GroupActivityItem extends React.Component {\n  static propTypes = {\n    author: PropTypes.node,\n    item: PropTypes.object,\n    orgId: PropTypes.string,\n    projectId: PropTypes.string,\n  };\n\n  render() {\n    const {author, item, orgId, projectId} = this.props;\n    const {data} = item;\n\n    const issuesLink = `/organizations/${orgId}/issues/`;\n\n    switch (item.type) {\n      case 'note':\n        return t('%s left a comment', author);\n      case 'set_resolved':\n        return t('%s marked this issue as resolved', author);\n      case 'set_resolved_by_age':\n        return t('%(author)s marked this issue as resolved due to inactivity', {\n          author,\n        });\n      case 'set_resolved_in_release':\n        return data.version\n          ? t('%(author)s marked this issue as resolved in %(version)s', {\n              author,\n              version: <Version version={data.version} orgId={orgId} />,\n            })\n          : t('%s marked this issue as resolved in the upcoming release', author);\n      case 'set_resolved_in_commit':\n        return t('%(author)s marked this issue as resolved in %(version)s', {\n          author,\n          version: (\n            <CommitLink\n              inline\n              commitId={data.commit && data.commit.id}\n              repository={data.commit && data.commit.repository}\n            />\n          ),\n        });\n      case 'set_resolved_in_pull_request':\n        return t('%(author)s marked this issue as resolved in %(version)s', {\n          author,\n          version: (\n            <PullRequestLink\n              inline\n              pullRequest={data.pullRequest}\n              repository={data.pullRequest && data.pullRequest.repository}\n            />\n          ),\n        });\n      case 'set_unresolved':\n        return t('%s marked this issue as unresolved', author);\n      case 'set_ignored':\n        if (data.ignoreDuration) {\n          return t('%(author)s ignored this issue for %(duration)s', {\n            author,\n            duration: <Duration seconds={data.ignoreDuration * 60} />,\n          });\n        } else if (data.ignoreCount && data.ignoreWindow) {\n          return tct(\n            '[author] ignored this issue until it happens [count] time(s) in [duration]',\n            {\n              author,\n              count: data.ignoreCount,\n              duration: <Duration seconds={data.ignoreWindow * 60} />,\n            }\n          );\n        } else if (data.ignoreCount) {\n          return tct('[author] ignored this issue until it happens [count] time(s)', {\n            author,\n            count: data.ignoreCount,\n          });\n        } else if (data.ignoreUserCount && data.ignoreUserWindow) {\n          return tct(\n            '[author] ignored this issue until it affects [count] user(s) in [duration]',\n            {\n              author,\n              count: data.ignoreUserCount,\n              duration: <Duration seconds={data.ignoreUserWindow * 60} />,\n            }\n          );\n        } else if (data.ignoreUserCount) {\n          return tct('[author] ignored this issue until it affects [count] user(s)', {\n            author,\n            count: data.ignoreUserCount,\n          });\n        }\n        return t('%s ignored this issue', author);\n      case 'set_public':\n        return t('%s made this issue public', author);\n      case 'set_private':\n        return t('%s made this issue private', author);\n      case 'set_regression':\n        return data.version\n          ? t('%(author)s marked this issue as a regression in %(version)s', {\n              author,\n              version: (\n                <Version version={data.version} orgId={orgId} projectId={projectId} />\n              ),\n            })\n          : t('%s marked this issue as a regression', author);\n      case 'create_issue':\n        return t('%(author)s created an issue on %(provider)s titled %(title)s', {\n          author,\n          provider: data.provider,\n          title: <a href={data.location}>{data.title}</a>,\n        });\n      case 'unmerge_source':\n        return tn(\n          '%2$s migrated %1$s fingerprint to %3$s',\n          '%2$s migrated %1$s fingerprints to %3$s',\n          data.fingerprints.length,\n          author,\n          data.destination ? (\n            <a href={`${issuesLink}${data.destination.id}`}>{data.destination.shortId}</a>\n          ) : (\n            t('a group')\n          )\n        );\n      case 'unmerge_destination':\n        return tn(\n          '%2$s migrated %1$s fingerprint from %3$s',\n          '%2$s migrated %1$s fingerprints from %3$s',\n          data.fingerprints.length,\n          author,\n          data.source ? (\n            <a href={`${issuesLink}${data.source.id}`}>{data.source.shortId}</a>\n          ) : (\n            t('a group')\n          )\n        );\n      case 'first_seen':\n        return t('%s first saw this issue', author);\n      case 'assigned':\n        let assignee;\n\n        if (data.assigneeType === 'team') {\n          const team = TeamStore.getById(data.assignee);\n          assignee = team ? team.slug : '<unknown-team>';\n\n          return t('%(author)s assigned this issue to #%(assignee)s', {\n            author,\n            assignee,\n          });\n        }\n\n        if (item.user && data.assignee === item.user.id) {\n          return t('%s assigned this issue to themselves', author);\n        } else {\n          assignee = MemberListStore.getById(data.assignee);\n          if (assignee && assignee.email) {\n            return t('%(author)s assigned this issue to %(assignee)s', {\n              author,\n              assignee: assignee.email,\n            });\n          } else {\n            return t('%s assigned this issue to an unknown user', author);\n          }\n        }\n      case 'unassigned':\n        return t('%s unassigned this issue', author);\n      case 'merge':\n        return tn(\n          '%2$s merged %1$s issue into this issue',\n          '%2$s merged %1$s issues into this issue',\n          data.issues.length,\n          author\n        );\n      default:\n        return ''; // should never hit (?)\n    }\n  }\n}\n\nexport default GroupActivityItem;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'app/actionCreators/indicator';\nimport {createNote, deleteNote, updateNote} from 'app/actionCreators/group';\nimport {t} from 'app/locale';\nimport {uniqueId} from 'app/utils/guid';\nimport ActivityAuthor from 'app/components/activity/author';\nimport ActivityItem from 'app/components/activity/item';\nimport ConfigStore from 'app/stores/configStore';\nimport ErrorBoundary from 'app/components/errorBoundary';\nimport Note from 'app/components/activity/note';\nimport NoteInputWithStorage from 'app/components/activity/note/inputWithStorage';\nimport SentryTypes from 'app/sentryTypes';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport GroupActivityItem from './groupActivityItem';\n\nfunction makeDefaultErrorJson() {\n  return {detail: t('Unknown error. Please try again.')};\n}\n\nclass GroupActivity extends React.Component {\n  // TODO(dcramer): only re-render on group/activity change\n  static propTypes = {\n    api: PropTypes.object,\n    organization: SentryTypes.Organization.isRequired,\n    group: SentryTypes.Group,\n  };\n\n  state = {\n    createBusy: false,\n    error: false,\n    inputId: uniqueId(),\n  };\n\n  handleNoteDelete = async ({modelId, text: oldText}) => {\n    const {api, group} = this.props;\n\n    addLoadingMessage(t('Removing comment...'));\n\n    try {\n      await deleteNote(api, group, modelId, oldText);\n      clearIndicators();\n    } catch (_err) {\n      addErrorMessage(t('Failed to delete comment'));\n    }\n  };\n\n  /**\n   * Note: This is nearly the same logic as `app/views/incidents/details/activity`\n   * This can be abstracted a bit if we create more objects that can have activities\n   */\n  handleNoteCreate = async note => {\n    const {api, group} = this.props;\n\n    this.setState({\n      createBusy: true,\n    });\n\n    addLoadingMessage(t('Posting comment...'));\n\n    try {\n      await createNote(api, group, note);\n\n      this.setState({\n        createBusy: false,\n\n        // This is used as a `key` to Note Input so that after successful post\n        // we reset the value of the input\n        inputId: uniqueId(),\n      });\n      clearIndicators();\n    } catch (error) {\n      this.setState({\n        createBusy: false,\n        error: true,\n        errorJSON: error.responseJSON || makeDefaultErrorJson(),\n      });\n      addErrorMessage(t('Unable to post comment'));\n    }\n  };\n\n  handleNoteUpdate = async (note, {modelId, text: oldText}) => {\n    const {api, group} = this.props;\n\n    this.setState({\n      updateBusy: true,\n    });\n    addLoadingMessage(t('Updating comment...'));\n\n    try {\n      await updateNote(api, group, note, modelId, oldText);\n      this.setState({\n        updateBusy: false,\n      });\n      clearIndicators();\n    } catch (error) {\n      this.setState({\n        updateBusy: false,\n        error: true,\n        errorJSON: error.responseJSON || makeDefaultErrorJson(),\n      });\n      addErrorMessage(t('Unable to update comment'));\n    }\n  };\n\n  render() {\n    const {organization, group} = this.props;\n    const me = ConfigStore.get('user');\n    const projectSlugs = group && group.project ? [group.project.slug] : [];\n    const noteProps = {\n      group,\n      projectSlugs,\n      placeholder: t(\n        'Add details or updates to this event. \\nTag users with @, or teams with #'\n      ),\n    };\n\n    return (\n      <div className=\"row\">\n        <div className=\"col-md-9\">\n          <div>\n            <ActivityItem author={{type: 'user', user: me}}>\n              {() => (\n                <NoteInputWithStorage\n                  key={this.state.inputId}\n                  storageKey=\"groupinput:latest\"\n                  itemKey={group.id}\n                  onCreate={this.handleNoteCreate}\n                  busy={this.state.createBusy}\n                  error={this.state.error}\n                  errorJSON={this.state.errorJSON}\n                  {...noteProps}\n                />\n              )}\n            </ActivityItem>\n\n            {group.activity.map(item => {\n              const authorName = item.user ? item.user.name : 'Sentry';\n\n              if (item.type === 'note') {\n                return (\n                  <ErrorBoundary mini key={`note-${item.id}`}>\n                    <Note\n                      text={item.data.text}\n                      modelId={item.id}\n                      user={item.user}\n                      dateCreated={item.dateCreated}\n                      authorName={authorName}\n                      onDelete={this.handleNoteDelete}\n                      onUpdate={this.handleNoteUpdate}\n                      busy={this.state.updateBusy}\n                      {...noteProps}\n                    />\n                  </ErrorBoundary>\n                );\n              } else {\n                return (\n                  <ErrorBoundary mini key={`item-${item.id}`}>\n                    <ActivityItem\n                      item={item}\n                      author={{type: item.user ? 'user' : 'system', user: item.user}}\n                      date={item.dateCreated}\n                      header={\n                        <GroupActivityItem\n                          organization={organization}\n                          author={<ActivityAuthor>{authorName}</ActivityAuthor>}\n                          item={item}\n                          orgId={this.props.params.orgId}\n                          projectId={group.project.slug}\n                        />\n                      }\n                    />\n                  </ErrorBoundary>\n                );\n              }\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport {GroupActivity};\nexport default withApi(withOrganization(GroupActivity));\n"],"sourceRoot":""}