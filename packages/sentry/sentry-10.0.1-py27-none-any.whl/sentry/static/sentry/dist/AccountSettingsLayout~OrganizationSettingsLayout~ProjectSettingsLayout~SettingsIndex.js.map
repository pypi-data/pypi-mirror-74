{"version":3,"sources":["webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/utils/withTeams.tsx","webpack:///./app/actions/settingsBreadcrumbActions.jsx","webpack:///./app/views/settings/components/settingsBreadcrumb/crumb.jsx","webpack:///./app/views/settings/components/settingsBreadcrumb/divider.jsx","webpack:///./app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown.jsx","webpack:///./app/views/settings/components/settingsBreadcrumb/menuItem.jsx","webpack:///./app/views/settings/components/settingsBreadcrumb/findFirstRouteWithoutRouteParam.jsx","webpack:///./app/views/settings/components/settingsBreadcrumb/organizationCrumb.jsx","webpack:///./app/views/settings/components/settingsBreadcrumb/projectCrumb.jsx","webpack:///./app/stores/settingsBreadcrumbStore.jsx","webpack:///./app/views/settings/components/settingsBreadcrumb/teamCrumb.jsx","webpack:///./app/components/links/textLink.jsx","webpack:///./app/views/settings/components/settingsBreadcrumb/index.jsx","webpack:///./app/views/settings/components/settingsHeader.jsx","webpack:///./app/views/settings/components/settingsLayout.jsx"],"names":["recreateRoute","to","options","lastRootIndex","routeIndex","routes","params","location","stepBack","paths","map","path","indexOf","slice","baseRoute","query","search","fullRoute","join","WrappedComponent","displayName","mixins","listenTo","getInitialState","teams","getAll","onTeamUpdate","this","setState","render","props","state","Reflux","createActions","Crumb","styled","p","theme","gray3","space","gray5","StyledDivider","borderDark","isHover","StyledInlineSvg","InlineSvg","Divider","isLast","src","size","React","Component","EXIT_DELAY","BreadcrumbDropdown","args","open","isOpen","close","handleStateChange","handleMouseEnterActor","actions","e","leaving","clearTimeout","entering","setTimeout","enterDelay","handleMouseEnter","handleMouseLeave","handleClickActor","handleClose","hasMenu","route","name","items","onSelect","blendCorner","alignMenu","onOpen","onClose","menuProps","onMouseEnter","onMouseLeave","isStyled","virtualizedHeight","getActorProps","onClick","bind","defaultProps","MenuItem","children","StyledMenuItem","overflowEllipsis","findFirstRouteWithoutRouteParam","filter","find","includes","OrganizationCrumb","handleSelect","item","hasProjectParam","projectId","destination","browserHistory","push","orgId","value","organizations","organization","length","CrumbLink","slug","align","avatarSize","org","label","withLatestContext","ProjectCrumb","latestOrganization","latestProject","project","projects","ProjectName","replaceRouterParams","mini","avatarProps","consistentWidth","withProjects","SettingsBreadcrumbStore","createStore","init","reset","SettingsBreadcrumbActions","mapTitle","onUpdateRouteMap","trimMappings","onTrimMappings","pathMap","title","getRouteStringFromRoutes","trigger","routePath","fullPath","startsWith","TeamCrumb","team","teamId","teamItem","withTeams","TextLink","Link","MENUS","Organization","Project","Team","SettingsBreadcrumb","prevProps","lastRouteIndex","r","lastIndexOf","Breadcrumbs","i","pathTitle","createMenu","Menu","CrumbPicker","key","contextTypes","SentryTypes","createReactClass","connect","blue","SettingsHeader","zIndex","header","borderLight","SettingsLayout","router","renderNavigation","childProps","childRoutes","childRoute","Fragment","SettingsColumn","width","flex","MaxWidthContainer","SidebarWrapper","Content","settings","containerWidth","sidebarWidth"],"mappings":"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","file":"AccountSettingsLayout~OrganizationSettingsLayout~ProjectSettingsLayout~SettingsIndex.js","sourcesContent":["import {Location} from 'history';\nimport {PlainRoute} from 'react-router/lib/Route';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\n\ntype Options = {\n  routes: PlainRoute[];\n  location: Location;\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(to: string | PlainRoute, options: Options): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const query = typeof location !== 'undefined' && location.search ? location.search : '';\n\n  const fullRoute = `${baseRoute.join('')}${typeof to !== 'string' ? '' : to}${query}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import React from 'react';\nimport Reflux from 'reflux';\nimport createReactClass from 'create-react-class';\n\nimport {Team} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\nimport TeamStore from 'app/stores/teamStore';\n\ntype InjectedTeamsProps = {\n  teams: Team[];\n};\n\ntype State = {\n  teams: Team[];\n};\n\n/**\n * Higher order component that uses TeamStore and provides a list of teams\n */\nconst withTeams = <P extends InjectedTeamsProps>(\n  WrappedComponent: React.ComponentType<P>\n) =>\n  createReactClass<Omit<P, keyof InjectedTeamsProps>, State>({\n    displayName: `withTeams(${getDisplayName(WrappedComponent)})`,\n    mixins: [Reflux.listenTo(TeamStore, 'onTeamUpdate') as any],\n\n    getInitialState() {\n      return {\n        teams: TeamStore.getAll(),\n      };\n    },\n\n    onTeamUpdate() {\n      this.setState({\n        teams: TeamStore.getAll(),\n      });\n    },\n    render() {\n      return <WrappedComponent {...this.props as P} teams={this.state.teams as Team[]} />;\n    },\n  });\nexport default withTeams;\n","import Reflux from 'reflux';\n\nexport default Reflux.createActions(['mapTitle', 'trimMappings']);\n","import styled from 'react-emotion';\n\nimport space from 'app/styles/space';\n\nconst Crumb = styled('div')`\n  display: flex;\n  align-items: center;\n  position: relative;\n  font-size: 18px;\n  color: ${p => p.theme.gray3};\n  padding-right: ${space(1)};\n  cursor: pointer;\n  > span {\n    transition: 0.1s all ease;\n  }\n\n  &:hover {\n    color: ${p => p.theme.gray5};\n  }\n`;\n\nexport default Crumb;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport InlineSvg from 'app/components/inlineSvg';\n\nconst StyledDivider = styled('span')`\n  display: inline-block;\n  margin-left: 6px;\n  color: ${p => p.theme.borderDark};\n  position: relative;\n  top: -1px;\n\n  ${p =>\n    p.isHover\n      ? `\n    transform: rotate(90deg);\n    top: 0;\n    `\n      : ''};\n`;\n\nconst StyledInlineSvg = styled(InlineSvg)`\n  display: block;\n`;\n\nclass Divider extends React.Component {\n  static propTypes = {\n    isHover: PropTypes.bool,\n    isLast: PropTypes.bool,\n  };\n  render() {\n    const {isHover, isLast} = this.props;\n    if (isLast) {\n      return null;\n    }\n\n    return (\n      <StyledDivider isHover={isHover}>\n        <StyledInlineSvg src=\"icon-chevron-right\" size=\"14px\" />\n      </StyledDivider>\n    );\n  }\n}\n\nexport default Divider;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Crumb from 'app/views/settings/components/settingsBreadcrumb/crumb';\nimport DropdownAutoCompleteMenu from 'app/components/dropdownAutoCompleteMenu';\nimport Divider from 'app/views/settings/components/settingsBreadcrumb/divider';\n\nconst EXIT_DELAY = 0;\n\nclass BreadcrumbDropdown extends React.Component {\n  static propTypes = {\n    hasMenu: PropTypes.bool,\n    route: PropTypes.object,\n    isLast: PropTypes.bool,\n    enterDelay: PropTypes.number,\n    name: PropTypes.node,\n    items: PropTypes.array,\n    onSelect: PropTypes.func,\n  };\n\n  static defaultProps = {\n    enterDelay: 0,\n  };\n\n  constructor(...args) {\n    super(...args);\n\n    this.entering = false;\n    this.leaving = false;\n    this.state = {\n      isOpen: false,\n    };\n  }\n\n  open = () => {\n    this.setState({isOpen: true});\n  };\n\n  close = () => {\n    this.setState({isOpen: false});\n  };\n\n  handleStateChange = () => {};\n\n  // Adds a delay when mouse hovers on actor (in this case the breadcrumb)\n  handleMouseEnterActor = (actions, e) => {\n    if (this.leaving) {\n      clearTimeout(this.leaving);\n    }\n\n    this.entering = setTimeout(() => this.open(), this.props.enterDelay);\n  };\n\n  // handles mouseEnter event on actor and menu, should clear the leaving timeout and keep menu open\n  handleMouseEnter = (actions, e) => {\n    if (this.leaving) {\n      clearTimeout(this.leaving);\n    }\n\n    this.open();\n  };\n\n  // handles mouseLeave event on actor and menu, adds a timeout before updating state to account for\n  // mouseLeave into\n  handleMouseLeave = (actions, e) => {\n    if (this.entering) {\n      clearTimeout(this.entering);\n    }\n\n    this.leaving = setTimeout(() => this.close(), EXIT_DELAY);\n  };\n\n  // Close immediately when actor is clicked clicked\n  handleClickActor = (actions, e) => {\n    this.close();\n  };\n\n  // Close immediately when clicked outside\n  handleClose = actions => {\n    this.close();\n  };\n\n  render() {\n    const {hasMenu, route, isLast, name, items, onSelect} = this.props;\n    return (\n      <DropdownAutoCompleteMenu\n        blendCorner={false}\n        alignMenu=\"left\"\n        onOpen={this.handleMouseEnter}\n        onClose={this.close}\n        isOpen={this.state.isOpen}\n        menuProps={{\n          onMouseEnter: this.handleMouseEnter,\n          onMouseLeave: this.handleMouseLeave,\n        }}\n        items={items}\n        onSelect={onSelect}\n        isStyled\n        virtualizedHeight={41}\n      >\n        {({getActorProps, actions, isOpen}) => {\n          return (\n            <Crumb\n              {...getActorProps({\n                isStyled: true,\n                hasMenu,\n                onClick: this.handleClickActor.bind(this, actions),\n                onMouseEnter: this.handleMouseEnterActor.bind(this, actions),\n                onMouseLeave: this.handleMouseLeave.bind(this, actions),\n              })}\n            >\n              <span>{name || route.name} </span>\n              <Divider isHover={hasMenu && isOpen} isLast={isLast} />\n            </Crumb>\n          );\n        }}\n      </DropdownAutoCompleteMenu>\n    );\n  }\n}\n\nexport default BreadcrumbDropdown;\n","import React from 'react';\nimport styled from 'react-emotion';\n\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\n\nclass MenuItem extends React.Component {\n  render() {\n    const {children, ...props} = this.props;\n    return <StyledMenuItem {...props}>{children}</StyledMenuItem>;\n  }\n}\n\nconst StyledMenuItem = styled('div')`\n  font-size: 14px;\n  ${overflowEllipsis};\n`;\n\nexport default MenuItem;\n","/**\n * For all routes with a `path`, find the first route without a route param (e.g. :apiKey)\n *\n * @param {Object[]} routes A list of react-router route objects\n * @param {Object} route If given, will only take into account routes between `route` and end of the routes list\n * @return Object Returns a react-router route object\n */\nexport default function findFirstRouteWithoutRouteParam(routes, route) {\n  const routeIndex = routes.indexOf(route);\n  const routesToSearch = route && routeIndex > -1 ? routes.slice(routeIndex) : routes;\n\n  return (\n    routesToSearch.filter(({path}) => !!path).find(({path}) => !path.includes(':')) ||\n    route\n  );\n}\n","import {Flex} from 'grid-emotion';\nimport {browserHistory} from 'react-router';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport BreadcrumbDropdown from 'app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown';\nimport IdBadge from 'app/components/idBadge';\nimport MenuItem from 'app/views/settings/components/settingsBreadcrumb/menuItem';\nimport SentryTypes from 'app/sentryTypes';\nimport findFirstRouteWithoutRouteParam from 'app/views/settings/components/settingsBreadcrumb/findFirstRouteWithoutRouteParam';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport withLatestContext from 'app/utils/withLatestContext';\n\nimport {CrumbLink} from '.';\n\nclass OrganizationCrumb extends React.Component {\n  static propTypes = {\n    organizations: PropTypes.array,\n    organization: SentryTypes.Organization,\n    routes: PropTypes.array,\n    route: PropTypes.object,\n  };\n\n  handleSelect = item => {\n    const {params, routes, route} = this.props;\n    // If we are currently in a project context, and we're attempting to switch organizations,\n    // then we need to default to index route (e.g. `route`)\n    //\n    // Otherwise, find the last route without a router param\n    // e.g. if you are on API details, we want the API listing\n    // This fails if our route tree is not nested\n    const hasProjectParam = !!params.projectId;\n    let destination = hasProjectParam\n      ? route\n      : findFirstRouteWithoutRouteParam(routes.slice(routes.indexOf(route)));\n\n    // It's possible there is no route without route params (e.g. organization settings index),\n    // in which case, we can use the org settings index route (e.g. `route`)\n    if (!hasProjectParam && typeof destination === 'undefined') {\n      destination = route;\n    }\n\n    browserHistory.push(\n      recreateRoute(destination, {\n        routes,\n        params: {...params, orgId: item.value},\n      })\n    );\n  };\n\n  render() {\n    const {organizations, organization, params, routes, route, ...props} = this.props;\n\n    if (!organization) {\n      return null;\n    }\n\n    const hasMenu = organizations.length > 1;\n\n    return (\n      <BreadcrumbDropdown\n        name={\n          <CrumbLink\n            to={recreateRoute(route, {\n              routes,\n              params: {...params, orgId: organization.slug},\n            })}\n          >\n            <Flex align=\"center\">\n              <IdBadge avatarSize={18} organization={organization} />\n            </Flex>\n          </CrumbLink>\n        }\n        onSelect={this.handleSelect}\n        hasMenu={hasMenu}\n        route={route}\n        items={organizations.map(org => ({\n          value: org.slug,\n          label: (\n            <MenuItem>\n              <IdBadge organization={org} />\n            </MenuItem>\n          ),\n        }))}\n        {...props}\n      />\n    );\n  }\n}\n\nexport {OrganizationCrumb};\nexport default withLatestContext(OrganizationCrumb);\n","import {browserHistory} from 'react-router';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport BreadcrumbDropdown from 'app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown';\nimport IdBadge from 'app/components/idBadge';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport MenuItem from 'app/views/settings/components/settingsBreadcrumb/menuItem';\nimport SentryTypes from 'app/sentryTypes';\nimport findFirstRouteWithoutRouteParam from 'app/views/settings/components/settingsBreadcrumb/findFirstRouteWithoutRouteParam';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport space from 'app/styles/space';\nimport withLatestContext from 'app/utils/withLatestContext';\nimport withProjects from 'app/utils/withProjects';\n\nimport {CrumbLink} from '.';\n\nclass ProjectCrumb extends React.Component {\n  static propTypes = {\n    organization: SentryTypes.Organization,\n    project: SentryTypes.Project,\n    projects: PropTypes.array,\n    routes: PropTypes.array,\n    route: PropTypes.object,\n  };\n\n  handleSelect = item => {\n    const {routes, route, params} = this.props;\n\n    // We have to make exceptions for routes like \"Project Alerts Rule Edit\" or \"Client Key Details\"\n    // Since these models are project specific, we need to traverse up a route when switching projects\n    //\n    // we manipulate `routes` so that it doesn't include the current project's route\n    // which, unlike the org version, does not start with a route param\n    browserHistory.push(\n      recreateRoute(\n        findFirstRouteWithoutRouteParam(routes.slice(routes.indexOf(route) + 1), route),\n        {\n          routes,\n          params: {...params, projectId: item.value},\n        }\n      )\n    );\n  };\n\n  render() {\n    const {\n      organization: latestOrganization,\n      project: latestProject,\n      projects,\n      route,\n      ...props\n    } = this.props;\n\n    if (!latestOrganization) {\n      return null;\n    }\n    if (!projects) {\n      return null;\n    }\n\n    const hasMenu = projects && projects.length > 1;\n\n    return (\n      <BreadcrumbDropdown\n        hasMenu={hasMenu}\n        route={route}\n        name={\n          <ProjectName>\n            {!latestProject ? (\n              <LoadingIndicator mini />\n            ) : (\n              <CrumbLink\n                to={replaceRouterParams('/settings/:orgId/projects/:projectId/', {\n                  orgId: latestOrganization.slug,\n                  projectId: latestProject.slug,\n                })}\n              >\n                <IdBadge project={latestProject} avatarSize={18} />\n              </CrumbLink>\n            )}\n          </ProjectName>\n        }\n        onSelect={this.handleSelect}\n        items={projects.map(project => ({\n          value: project.slug,\n          label: (\n            <MenuItem>\n              <IdBadge\n                project={project}\n                avatarProps={{consistentWidth: true}}\n                avatarSize={18}\n              />\n            </MenuItem>\n          ),\n        }))}\n        {...props}\n      />\n    );\n  }\n}\n\nexport {ProjectCrumb};\nexport default withProjects(withLatestContext(ProjectCrumb));\n\n// Set height of crumb because of spinner\nconst SPINNER_SIZE = '24px';\n\nconst ProjectName = styled('div')`\n  display: flex;\n\n  .loading {\n    width: ${SPINNER_SIZE};\n    height: ${SPINNER_SIZE};\n    margin: 0 ${space(0.25)} 0 0;\n  }\n`;\n","import Reflux from 'reflux';\n\nimport SettingsBreadcrumbActions from 'app/actions/settingsBreadcrumbActions';\nimport getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';\n\nconst SettingsBreadcrumbStore = Reflux.createStore({\n  init() {\n    this.reset();\n    this.listenTo(SettingsBreadcrumbActions.mapTitle, this.onUpdateRouteMap);\n    this.listenTo(SettingsBreadcrumbActions.trimMappings, this.onTrimMappings);\n  },\n\n  reset() {\n    this.pathMap = {};\n  },\n\n  getInitialState() {\n    return this.pathMap;\n  },\n\n  onUpdateRouteMap({routes, title}) {\n    this.pathMap[getRouteStringFromRoutes(routes)] = title;\n    this.trigger(this.pathMap);\n  },\n\n  onTrimMappings(routes) {\n    const routePath = getRouteStringFromRoutes(routes);\n    for (const fullPath in this.pathMap) {\n      if (!routePath.startsWith(fullPath)) {\n        delete this.pathMap[fullPath];\n      }\n    }\n    this.trigger(this.pathMap);\n  },\n});\n\nexport default SettingsBreadcrumbStore;\n","import {browserHistory} from 'react-router';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport BreadcrumbDropdown from 'app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown';\nimport IdBadge from 'app/components/idBadge';\nimport MenuItem from 'app/views/settings/components/settingsBreadcrumb/menuItem';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport withTeams from 'app/utils/withTeams';\n\nimport {CrumbLink} from '.';\n\nclass TeamCrumb extends React.Component {\n  static propTypes = {\n    teams: PropTypes.array,\n    routes: PropTypes.array,\n    route: PropTypes.object,\n  };\n\n  render() {\n    const {teams, params, routes, route, ...props} = this.props;\n\n    const team = teams.find(({slug}) => slug === params.teamId);\n    const hasMenu = teams.length > 1;\n\n    if (!team) {\n      return null;\n    }\n\n    return (\n      <BreadcrumbDropdown\n        name={\n          <CrumbLink\n            to={recreateRoute(route, {\n              routes,\n              params: {...params, teamId: team.slug},\n            })}\n          >\n            <IdBadge avatarSize={18} team={team} />\n          </CrumbLink>\n        }\n        onSelect={item => {\n          browserHistory.push(\n            recreateRoute('', {\n              routes,\n              params: {...params, teamId: item.value},\n            })\n          );\n        }}\n        hasMenu={hasMenu}\n        route={route}\n        items={teams.map(teamItem => ({\n          value: teamItem.slug,\n          label: (\n            <MenuItem>\n              <IdBadge team={teamItem} />\n            </MenuItem>\n          ),\n        }))}\n        {...props}\n      />\n    );\n  }\n}\n\nexport {TeamCrumb};\nexport default withTeams(TeamCrumb);\n","import {Link} from 'react-router';\nimport styled from 'react-emotion';\n\n/**\n * Link colored as normal text\n */\nconst TextLink = styled(Link)`\n  color: ${p => p.theme.gray3};\n  &:hover {\n    color: ${p => p.theme.gray5};\n  }\n`;\n\nexport default TextLink;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Reflux from 'reflux';\nimport createReactClass from 'create-react-class';\nimport styled from 'react-emotion';\n\nimport Crumb from 'app/views/settings/components/settingsBreadcrumb/crumb';\nimport Divider from 'app/views/settings/components/settingsBreadcrumb/divider';\nimport OrganizationCrumb from 'app/views/settings/components/settingsBreadcrumb/organizationCrumb';\nimport ProjectCrumb from 'app/views/settings/components/settingsBreadcrumb/projectCrumb';\nimport SentryTypes from 'app/sentryTypes';\nimport SettingsBreadcrumbActions from 'app/actions/settingsBreadcrumbActions';\nimport SettingsBreadcrumbStore from 'app/stores/settingsBreadcrumbStore';\nimport TeamCrumb from 'app/views/settings/components/settingsBreadcrumb/teamCrumb';\nimport TextLink from 'app/components/links/textLink';\nimport getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';\nimport recreateRoute from 'app/utils/recreateRoute';\n\nconst MENUS = {\n  Organization: OrganizationCrumb,\n  Project: ProjectCrumb,\n  Team: TeamCrumb,\n};\n\nclass SettingsBreadcrumb extends React.Component {\n  static propTypes = {\n    routes: PropTypes.array,\n    // pathMap maps stringifed routes to a breadcrumb title. This property is\n    // provided by the SettingsBreadcrumbStore.\n    pathMap: PropTypes.object,\n  };\n\n  static contextTypes = {\n    organization: SentryTypes.Organization,\n  };\n\n  static defaultProps = {\n    pathMap: {},\n  };\n\n  componentDidUpdate(prevProps) {\n    if (this.props.routes === prevProps.routes) {\n      return;\n    }\n    SettingsBreadcrumbActions.trimMappings(this.props.routes);\n  }\n\n  render() {\n    const {routes, params, pathMap} = this.props;\n    const lastRouteIndex = routes.map(r => !!r.name).lastIndexOf(true);\n    return (\n      <Breadcrumbs>\n        {routes.map((route, i) => {\n          if (!route.name) {\n            return null;\n          }\n          const pathTitle = pathMap[getRouteStringFromRoutes(routes.slice(0, i + 1))];\n          const isLast = i === lastRouteIndex;\n          const createMenu = MENUS[route.name];\n          const Menu = typeof createMenu === 'function' && createMenu;\n          const hasMenu = !!Menu;\n          const CrumbPicker = hasMenu\n            ? Menu\n            : () => (\n                <Crumb route={route} isLast={isLast}>\n                  <CrumbLink to={recreateRoute(route, {routes, params})}>\n                    {pathTitle || route.name}{' '}\n                  </CrumbLink>\n                  <Divider isLast={isLast} />\n                </Crumb>\n              );\n\n          return (\n            <CrumbPicker\n              key={`${route.name}:${route.path}`}\n              routes={routes}\n              params={params}\n              route={route}\n              isLast={isLast}\n            />\n          );\n        })}\n      </Breadcrumbs>\n    );\n  }\n}\n\nexport default createReactClass({\n  displayName: 'ConnectedSettingsBreadcrumb',\n  mixins: [Reflux.connect(SettingsBreadcrumbStore, 'pathMap')],\n  render() {\n    return <SettingsBreadcrumb {...this.props} {...this.state} />;\n  },\n});\n\nconst CrumbLink = styled(TextLink)`\n  display: block;\n\n  &.focus-visible {\n    outline: none;\n    box-shadow: ${p => p.theme.blue} 0 2px 0;\n  }\n`;\n\nexport {CrumbLink};\n\nconst Breadcrumbs = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n","import styled from 'react-emotion';\nimport space from 'app/styles/space';\n\nconst SettingsHeader = styled('div')`\n  position: sticky;\n  top: 0;\n  z-index: ${p => p.theme.zIndex.header};\n  padding: ${space(3)} ${space(4)};\n  border-bottom: 1px solid ${p => p.theme.borderLight};\n  background: #fff;\n`;\n\nexport default SettingsHeader;\n","import {Box, Flex} from 'grid-emotion';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport space from 'app/styles/space';\n\nimport SettingsBreadcrumb from './settingsBreadcrumb';\nimport SettingsHeader from './settingsHeader';\nimport SettingsSearch from './settingsSearch';\n\nclass SettingsLayout extends React.Component {\n  static propTypes = {\n    renderNavigation: PropTypes.func,\n    route: PropTypes.object,\n    router: PropTypes.object,\n    routes: PropTypes.array,\n  };\n\n  render() {\n    const {params, routes, route, router, renderNavigation, children} = this.props;\n    // We want child's view's props\n    const childProps = (children && children.props) || this.props;\n    const childRoutes = childProps.routes || routes || [];\n    const childRoute = childProps.route || route || {};\n    return (\n      <React.Fragment>\n        <SettingsColumn>\n          <SettingsHeader>\n            <Flex align=\"center\" width={1}>\n              <Box flex=\"1\">\n                <SettingsBreadcrumb\n                  params={params}\n                  routes={childRoutes}\n                  route={childRoute}\n                />\n              </Box>\n              <SettingsSearch routes={routes} router={router} params={params} />\n            </Flex>\n          </SettingsHeader>\n\n          <MaxWidthContainer>\n            {typeof renderNavigation === 'function' && (\n              <SidebarWrapper>{renderNavigation()}</SidebarWrapper>\n            )}\n            <Content>{children}</Content>\n          </MaxWidthContainer>\n        </SettingsColumn>\n      </React.Fragment>\n    );\n  }\n}\n\nconst MaxWidthContainer = styled('div')`\n  display: flex;\n  max-width: ${p => p.theme.settings.containerWidth};\n  min-width: 600px; /* for small screen sizes, we need a min width to make it semi digestible */\n  flex: 1;\n`;\n\nconst SidebarWrapper = styled('div')`\n  flex-shrink: 0;\n  width: ${p => p.theme.settings.sidebarWidth};\n  background: #fff;\n  border-right: 1px solid ${p => p.theme.borderLight};\n  padding: ${space(4)};\n`;\n\nconst SettingsColumn = styled('div')`\n  display: flex;\n  flex-direction: column;\n  flex: 1; /* so this stretches vertically so that footer is fixed at bottom */\n  min-width: 0; /* fixes problem when child content stretches beyond layout width */\n  footer {\n    margin-top: 0;\n  }\n`;\n\n/**\n * Note: `overflow: hidden` will cause some buttons in `SettingsPageHeader` to be cut off because it has negative margin.\n * Will also cut off tooltips.\n */\nconst Content = styled('div')`\n  flex: 1;\n  padding: ${space(4)};\n  min-width: 0; /* keep children from stretching container */\n`;\n\nexport default SettingsLayout;\n"],"sourceRoot":""}