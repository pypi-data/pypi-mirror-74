{"version":3,"sources":["webpack:///./app/components/modals/createTeamModal.jsx","webpack:///./app/actionCreators/teams.jsx"],"names":["CreateTeamModal","handleSubmit","data","onSuccess","onError","createTeam","Client","orgId","props","organization","slug","then","resp","handleSuccess","err","onClose","closeModal","this","Body","Header","Fragment","closeButton","onHide","t","onSubmit","React","Component","doCallback","params","name","args","fetchTeamDetails","api","options","TeamActions","fetchDetails","teamId","request","success","fetchDetailsSuccess","error","fetchDetailsError","updateTeamSuccess","updateSuccess","updateTeam","endpoint","update","method","updateError","joinTeam","memberId","id","uniqueId","leaveTeam","team","requestPromise","createTeamSuccess","addSuccessMessage","tct","createTeamError","addErrorMessage","removeTeam","removeTeamSuccess","removeTeamError"],"mappings":"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","file":"CreateTeamModal.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {Client} from 'app/api';\nimport {createTeam} from 'app/actionCreators/teams';\nimport {t} from 'app/locale';\nimport CreateTeamForm from 'app/components/createTeam/createTeamForm';\nimport SentryTypes from 'app/sentryTypes';\n\nclass CreateTeamModal extends React.Component {\n  static propTypes = {\n    closeModal: PropTypes.func,\n    onClose: PropTypes.func,\n    Body: PropTypes.oneOfType([PropTypes.func, PropTypes.node]).isRequired,\n    Header: PropTypes.oneOfType([PropTypes.func, PropTypes.node]).isRequired,\n    organization: SentryTypes.Organization.isRequired,\n    project: SentryTypes.Project,\n  };\n\n  handleSubmit = (data, onSuccess, onError) => {\n    createTeam(new Client(), data, {orgId: this.props.organization.slug})\n      .then(resp => {\n        this.handleSuccess(resp);\n        onSuccess(resp);\n      })\n      .catch(err => {\n        onError(err);\n      });\n  };\n\n  handleSuccess = data => {\n    if (this.props.onClose) {\n      this.props.onClose(data);\n    }\n\n    this.props.closeModal();\n  };\n\n  render() {\n    const {Body, Header, closeModal, ...props} = this.props;\n\n    return (\n      <React.Fragment>\n        <Header closeButton onHide={closeModal}>\n          {t('Create Team')}\n        </Header>\n        <Body>\n          <CreateTeamForm {...props} onSubmit={this.handleSubmit} />\n        </Body>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default CreateTeamModal;\n","import TeamActions from 'app/actions/teamActions';\nimport {tct} from 'app/locale';\nimport {addSuccessMessage, addErrorMessage} from 'app/actionCreators/indicator';\nimport {uniqueId} from 'app/utils/guid';\n\nconst doCallback = (params = {}, name, ...args) => {\n  if (typeof params[name] === 'function') {\n    params[name](...args);\n  }\n};\n\n// Fetch teams for org\nexport function fetchTeams(api, params, options) {\n  TeamActions.fetchAll(params.orgId);\n  return api.request(`/teams/${params.orgId}/`, {\n    success: data => {\n      TeamActions.fetchAllSuccess(params.orgId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchAllError(params.orgId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function fetchTeamDetails(api, params, options) {\n  TeamActions.fetchDetails(params.teamId);\n  return api.request(`/teams/${params.orgId}/${params.teamId}/`, {\n    success: data => {\n      TeamActions.fetchDetailsSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchDetailsError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function updateTeamSuccess(teamId, data) {\n  TeamActions.updateSuccess(teamId, data);\n}\n\nexport function updateTeam(api, params, options) {\n  const endpoint = `/teams/${params.orgId}/${params.teamId}/`;\n  TeamActions.update(params.teamId, params.data);\n\n  return api.request(endpoint, {\n    method: 'PUT',\n    data: params.data,\n    success: data => {\n      updateTeamSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function joinTeam(api, params, options) {\n  const endpoint = `/organizations/${params.orgId}/members/${params.memberId ||\n    'me'}/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'POST',\n    data: params.data,\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function leaveTeam(api, params, options) {\n  const endpoint = `/organizations/${params.orgId}/members/${params.memberId ||\n    'me'}/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'DELETE',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function createTeam(api, team, params, options) {\n  TeamActions.createTeam(team);\n\n  return api\n    .requestPromise(`/organizations/${params.orgId}/teams/`, {\n      method: 'POST',\n      data: team,\n    })\n    .then(\n      data => {\n        TeamActions.createTeamSuccess(data);\n        addSuccessMessage(\n          tct('[team] has been added to the [organization] organization', {\n            team: `#${data.slug}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.createTeamError(team.slug || team.name, err);\n        addErrorMessage(\n          tct('Unable to create [team] in the [organization] organization', {\n            team: `#${team.slug || team.name}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n\nexport function removeTeam(api, params, options) {\n  TeamActions.removeTeam(params.teamId);\n\n  return api\n    .requestPromise(`/teams/${params.orgId}/${params.teamId}/`, {\n      method: 'DELETE',\n    })\n    .then(\n      data => {\n        TeamActions.removeTeamSuccess(params.teamId, data);\n        addSuccessMessage(\n          tct('[team] has been removed from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.removeTeamError(params.teamId, err);\n        addErrorMessage(\n          tct('Unable to remove [team] from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n"],"sourceRoot":""}