{"version":3,"sources":["webpack:///./app/components/issueDiff.jsx","webpack:///./app/components/modals/diffModal.jsx","webpack:///./app/components/events/eventDataSection.tsx","webpack:///./app/views/settings/components/tag.jsx","webpack:///./app/components/forms/input.jsx","webpack:///./app/utils/getStacktraceBody.jsx"],"names":["IssueDiff","args","state","loading","baseEvent","targetEvent","SplitDiffAsync","this","props","baseIssueId","targetIssueId","baseEventId","targetEventId","Promise","all","fetchData","then","setState","getStacktraceBody","addErrorMessage","t","issueId","eventId","orgId","projectId","api","requestPromise","getEndpoint","className","DiffComponent","diffReady","StyledIssueDiff","map","value","i","key","base","target","type","React","Component","defaultProps","withApi","getLoadingStyle","p","css","styled","shouldForwardProp","isPropValid","DiffModal","Body","wrapTitle","raw","hideGuide","componentDidMount","location","hash","anchorElement","document","querySelector","scrollIntoView","e","render","children","title","toggleRaw","titleNode","position","id","href","onClick","propTypes","any","string","isRequired","bool","func","Tag","icon","priority","size","border","StyledInlineSvg","src","gray5","theme","alert","background","offWhite2","gray1","getBorder","inline","getMarginLeft","PropTypes","InlineSvg","Input","otherProps","classNames","event","entries","exc","find","msg","data","formatted","values","filter","stacktrace","rawStacktraceContent","platform","reduce","acc","concat"],"mappings":"mSAWMA,E,YAgBJ,aAAqB,+CAANC,EAAM,yBAANA,EAAM,uBACnB,iDAASA,MACJC,MAAQ,CACXC,SAAS,EACTC,UAAW,GACXC,YAAa,GAIbC,eAAgB,MATC,E,iEAaD,aAC+CC,KAAKC,MAA/DC,EADW,EACXA,YAAaC,EADF,EACEA,cAAeC,EADjB,EACiBA,YAAaC,EAD9B,EAC8BA,cAGhDC,QAAQC,IAAI,CACV,iCACAP,KAAKQ,UAAUN,EAAaE,GAC5BJ,KAAKQ,UAAUL,EAAeE,KAE7BI,MAAK,YAAyD,eAA7CV,EAA6C,aAA5BF,EAA4B,KAAjBC,EAAiB,KAC7D,EAAKY,SAAS,CACZX,iBACAF,UAAWc,YAAkBd,GAC7BC,YAAaa,YAAkBb,GAC/BF,SAAS,OAVf,OAaS,WACLgB,YAAgBC,YAAE,8B,kCAIZC,EAASC,GAAS,MACDf,KAAKC,MAAzBe,EADqB,EACrBA,MAAOC,EADc,EACdA,UAEd,MAAgB,WAAZF,EACF,oBAAoBC,EAApB,YAA6BC,EAA7B,mBAAiDF,EAAjD,KAGF,kBAAkBD,EAAlB,mBAAoCC,EAApC,O,gCAGQD,EAASC,GACjB,OAAOf,KAAKC,MAAMiB,IAAIC,eAAenB,KAAKoB,YAAYN,EAASC,M,+BAGxD,WACAM,EAAarB,KAAKC,MAAlBoB,UACDC,EAAgBtB,KAAKL,MAAMI,eAC3BwB,GAAavB,KAAKL,MAAMC,WAAa0B,EAE3C,OACE,kBAACE,EAAD,CAAiBH,UAAWA,EAAWzB,QAASI,KAAKL,MAAMC,SACxDI,KAAKL,MAAMC,SAAW,kBAAC,UAAD,MACtB2B,GACCvB,KAAKL,MAAME,UAAU4B,KAAI,SAACC,EAAOC,GAAR,OACvB,kBAACL,EAAD,CACEM,IAAKD,EACLE,KAAMH,EACNI,OAAQ,EAAKnC,MAAMG,YAAY6B,IAAM,GACrCI,KAAK,kB,GA/EKC,IAAMC,WAAxBxC,E,wBAAAA,EAWGyC,aAAe,CACpB9B,YAAa,SACbC,cAAe,UA0EJ8B,kBAAQ1C,GAGjB2C,EAAkB,SAAAC,GAAC,OACtBA,EAAEzC,SACD0C,YADD,mDAKD,IAEId,EAAkBe,YAAO,MAAV,CAAkBC,kBAAmBC,IAArC,oBAAGF,CAAH,iGAQjBH,EARiB,KCxGfM,E,yIAKK,MACmB1C,KAAKC,MAAxBoB,EADA,EACAA,UAAWsB,EADX,EACWA,KAElB,OACE,kBAACA,EAAD,KACE,kBAAC,EAAD,KAAWtB,UAAWA,GAAerB,KAAKC,a,GAV1B+B,IAAMC,WAAxBS,E,wBAgBSA,a,qGCfTR,EAAe,CACnBU,WAAW,EACXC,KAAK,EACLC,WAAW,GAYb,2B,+CAmFA,OAnF+B,iBAY7B,YAAAC,kBAAA,WACE,GAAIC,SAASC,KAAM,CACX,IAAGA,EAAH,wCAAG,GAET,IACE,IAAMC,EAAgBD,GAAQE,SAASC,cAAc,OAASH,GAC1DC,GACFA,EAAcG,iBAEhB,MAAOC,OAWb,YAAAC,OAAA,WACQ,iBACJC,EAAA,EAAAA,SACAnC,EAAA,EAAAA,UACAyB,EAAA,EAAAA,UACAf,EAAA,EAAAA,KACA0B,EAAA,EAAAA,MACAC,EAAA,EAAAA,UACAb,EAAA,EAAAA,IAIEc,EAHF,EAAAf,UAG0B,4BAAKa,GAAc,6BAAMA,GASrD,MARa,SAAT1B,IAAiC,IAAde,IACrBa,EACE,kBAAC,IAAW,CAAC7B,OAAO,OAAO8B,SAAS,OACjCD,IAML,yBAAKtC,WAAYA,GAAa,IAAM,QACjCoC,GACC,yBAAKpC,UAAU,aAAawC,GAAI9B,GAC9B,uBAAG+B,KAAM,IAAM/B,EAAMV,UAAU,aAC7B,wBAAIA,UAAU,iBAEfsC,EACS,UAAT5B,GACC,yBAAKV,UAAU,wBACb,uBACEA,WAAawB,EAAiB,GAAX,UAAiB,0BACpCkB,QAAS,WAAM,mBAAeL,GAAf,KAEd,YAAE,cAEL,uBACErC,WAAYwB,EAAM,SAAW,IAAM,0BACnCkB,QAAS,WAAM,mBAAeL,GAAf,KAEd,YAAE,UAMb,yBAAKrC,UAAU,4BAA4BmC,KA9E1C,EAAAQ,UAAY,CACjBP,MAAO,IAAUQ,IACjBlC,KAAM,IAAUmC,OAAOC,WACvBvB,UAAW,IAAUwB,KACrBV,UAAW,IAAUW,KACrBxB,IAAK,IAAUuB,KACftB,UAAW,IAAUsB,MAGhB,EAAAlC,aAAeA,EAyExB,EAnFA,CAA+B,IAAMD,WAqFtB,O,sGCtFTqC,EAAM/B,aACV,gBAAEiB,EAAF,EAAEA,SAAUe,EAAZ,EAAYA,KAA4DtE,GAAxE,EAAkBuE,SAAlB,EAAuCC,KAAvC,EAAoDC,OAApD,8DACE,wBAASzE,EACNsE,GAAQ,kBAACI,EAAD,CAAiBC,IAAKL,EAAME,KAAK,SACzCjB,KAJE,oBAAGjB,CAAH,sDAUI,SAAAF,GAAC,MAAgB,UAAXA,EAAEoC,KAAmB,oBAAsB,uBAVrD,uCAaE,SAAApC,GAAC,OAAKA,EAAEmC,SAAW,OAASnC,EAAEwC,QAbhC,8EAiBU,SAAAxC,GAAC,MAAgB,UAAXA,EAAEoC,KAAmB,SAAW,QAjBhD,0CAmBQ,SAAApC,GAAC,MAAgB,UAAXA,EAAEoC,KAAmB,OAAS,WAnB5C,gBAoBO,SAAApC,GAAC,OACbA,EAAEmC,SAAWnC,EAAEyC,MAAMC,MAAM1C,EAAEmC,UAAUQ,WAAa3C,EAAEyC,MAAMG,YArBvD,KAsBL,SAAA5C,GAAC,OA7Ba,SAAAA,GAAC,OACjBA,EAAEqC,OAAF,4BAEMrC,EAAEmC,SAAWnC,EAAEyC,MAAMC,MAAM1C,EAAEmC,UAAUE,OAASrC,EAAEyC,MAAMI,MAF9D,KAII,GAwBGC,CAAU9C,KAtBV,KAuBL,SAAAA,GAAC,OArCiB,SAAAA,GACpB,OAAKA,EAAE+C,OAGP,uBAAkC,UAAX/C,EAAEoC,KAAmB,SAAW,QAAvD,KAFS,GAmCFY,CAAchD,KAvBd,KA0BTiC,EAAIN,UAAY,CACdQ,SAAUc,IAAUpB,OACpBO,KAAMa,IAAUpB,OAChBQ,OAAQY,IAAUlB,KAClBG,KAAMe,IAAUpB,OAChBkB,OAAQE,IAAUlB,MAGpB,IAAMO,EAAkBpC,YAAOgD,IAAV,oBAAGhD,CAAH,qBAIN+B,O,2ICvDA,SAASkB,EAAT,GAAqD,IAArCnE,EAAqC,EAArCA,UAAwBoE,GAAa,EAA1BjC,SAA0B,iCAClE,OAAO,+BAAOnC,UAAWqE,IAAW,eAAgBrE,IAAgBoE,IAD9CD,E,uDCHxB,gDAEe,SAAS7E,EAAkBgF,GACxC,IAAKA,IAAUA,EAAMC,QACnB,MAAO,GAOT,IAAMC,EAAMF,EAAMC,QAAQE,MAAK,kBAAqB,cAArB,EAAE/D,QAEjC,IAAK8D,EAAK,CAER,IAAME,EAAMJ,EAAMC,QAAQE,MAAK,kBAAqB,YAArB,EAAE/D,QACjC,OAAKgE,EAGEA,EAAIC,MAAQD,EAAIC,KAAKC,WAAa,CAACF,EAAIC,KAAKC,WAF1C,GAKX,OAAKJ,EAAIG,KAIFH,EAAIG,KAAKE,OACbC,QAAO,SAAAzE,GAAK,QAAMA,EAAM0E,cACxB3E,KAAI,SAAAC,GAAK,OAAI2E,YAAqB3E,EAAM0E,WAAYT,EAAMW,SAAU5E,MACpE6E,QAAO,SAACC,EAAK9E,GACZ,OAAO8E,EAAIC,OAAO/E,KACjB,IARI","file":"DiffModal.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport isPropValid from '@emotion/is-prop-valid';\nimport styled, {css} from 'react-emotion';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {t} from 'app/locale';\nimport withApi from 'app/utils/withApi';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport getStacktraceBody from 'app/utils/getStacktraceBody';\n\nclass IssueDiff extends React.Component {\n  static propTypes = {\n    api: PropTypes.object,\n    baseIssueId: PropTypes.string.isRequired,\n    targetIssueId: PropTypes.string.isRequired,\n    baseEventId: PropTypes.string.isRequired,\n    targetEventId: PropTypes.string.isRequired,\n    orgId: PropTypes.string.isRequired,\n    projectId: PropTypes.string.isRequired,\n  };\n\n  static defaultProps = {\n    baseEventId: 'latest',\n    targetEventId: 'latest',\n  };\n\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      baseEvent: {},\n      targetEvent: {},\n\n      // `SplitDiffAsync` is an async-loaded component\n      // This will eventually contain a reference to the exported component from `./splitDiff`\n      SplitDiffAsync: null,\n    };\n  }\n\n  componentDidMount() {\n    const {baseIssueId, targetIssueId, baseEventId, targetEventId} = this.props;\n\n    // Fetch component and event data\n    Promise.all([\n      import(/* webpackChunkName: \"splitDiff\" */ './splitDiff'),\n      this.fetchData(baseIssueId, baseEventId),\n      this.fetchData(targetIssueId, targetEventId),\n    ])\n      .then(([{default: SplitDiffAsync}, baseEvent, targetEvent]) => {\n        this.setState({\n          SplitDiffAsync,\n          baseEvent: getStacktraceBody(baseEvent),\n          targetEvent: getStacktraceBody(targetEvent),\n          loading: false,\n        });\n      })\n      .catch(() => {\n        addErrorMessage(t('Error loading events'));\n      });\n  }\n\n  getEndpoint(issueId, eventId) {\n    const {orgId, projectId} = this.props;\n\n    if (eventId !== 'latest') {\n      return `/projects/${orgId}/${projectId}/events/${eventId}/`;\n    }\n\n    return `/issues/${issueId}/events/${eventId}/`;\n  }\n\n  fetchData(issueId, eventId) {\n    return this.props.api.requestPromise(this.getEndpoint(issueId, eventId));\n  }\n\n  render() {\n    const {className} = this.props;\n    const DiffComponent = this.state.SplitDiffAsync;\n    const diffReady = !this.state.loading && !!DiffComponent;\n\n    return (\n      <StyledIssueDiff className={className} loading={this.state.loading}>\n        {this.state.loading && <LoadingIndicator />}\n        {diffReady &&\n          this.state.baseEvent.map((value, i) => (\n            <DiffComponent\n              key={i}\n              base={value}\n              target={this.state.targetEvent[i] || ''}\n              type=\"words\"\n            />\n          ))}\n      </StyledIssueDiff>\n    );\n  }\n}\n\nexport default withApi(IssueDiff);\nexport {IssueDiff};\n\nconst getLoadingStyle = p =>\n  (p.loading &&\n    css`\n      background-color: white;\n      justify-content: center;\n    `) ||\n  '';\n\nconst StyledIssueDiff = styled('div', {shouldForwardProp: isPropValid})`\n  background-color: #f7f8f9;\n  overflow: auto;\n  padding: 10px;\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n\n  ${getLoadingStyle};\n`;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport IssueDiff from 'app/components/issueDiff';\n\nclass DiffModal extends React.Component {\n  static propTypes = {\n    Body: PropTypes.func,\n  };\n\n  render() {\n    const {className, Body} = this.props;\n\n    return (\n      <Body>\n        <IssueDiff className={className} {...this.props} />\n      </Body>\n    );\n  }\n}\n\nexport default DiffModal;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport {t} from 'app/locale';\nimport {callIfFunction} from 'app/utils/callIfFunction';\nimport GuideAnchor from 'app/components/assistant/guideAnchor';\n\nconst defaultProps = {\n  wrapTitle: true,\n  raw: false,\n  hideGuide: false,\n};\n\ntype DefaultProps = Readonly<typeof defaultProps>;\n\ntype Props = {\n  className?: string;\n  title: React.ReactText;\n  type: string;\n  toggleRaw?: (enable: boolean) => void;\n} & Partial<DefaultProps>;\n\nclass EventDataSection extends React.Component<Props> {\n  static propTypes = {\n    title: PropTypes.any,\n    type: PropTypes.string.isRequired,\n    wrapTitle: PropTypes.bool,\n    toggleRaw: PropTypes.func,\n    raw: PropTypes.bool,\n    hideGuide: PropTypes.bool,\n  };\n\n  static defaultProps = defaultProps;\n\n  componentDidMount() {\n    if (location.hash) {\n      const [, hash] = location.hash.split('#');\n\n      try {\n        const anchorElement = hash && document.querySelector('div#' + hash);\n        if (anchorElement) {\n          anchorElement.scrollIntoView();\n        }\n      } catch (e) {\n        // Since we're blindly taking the hash from the url and shoving\n        // it into a querySelector, it's possible that this may\n        // raise an exception if the input is invalid. So let's just ignore\n        // this instead of blowing up.\n        // e.g. `document.querySelector('div#=')`\n        // > Uncaught DOMException: Failed to execute 'querySelector' on 'Document': 'div#=' is not a valid selector.\n      }\n    }\n  }\n\n  render() {\n    const {\n      children,\n      className,\n      hideGuide,\n      type,\n      title,\n      toggleRaw,\n      raw,\n      wrapTitle,\n    } = this.props;\n\n    let titleNode = wrapTitle ? <h3>{title}</h3> : <div>{title}</div>;\n    if (type === 'tags' && hideGuide === false) {\n      titleNode = (\n        <GuideAnchor target=\"tags\" position=\"top\">\n          {titleNode}\n        </GuideAnchor>\n      );\n    }\n\n    return (\n      <div className={(className || '') + ' box'}>\n        {title && (\n          <div className=\"box-header\" id={type}>\n            <a href={'#' + type} className=\"permalink\">\n              <em className=\"icon-anchor\" />\n            </a>\n            {titleNode}\n            {type === 'extra' && (\n              <div className=\"btn-group pull-right\">\n                <a\n                  className={(!raw ? 'active' : '') + ' btn btn-default btn-sm'}\n                  onClick={() => callIfFunction(toggleRaw, false)}\n                >\n                  {t('Formatted')}\n                </a>\n                <a\n                  className={(raw ? 'active' : '') + ' btn btn-default btn-sm'}\n                  onClick={() => callIfFunction(toggleRaw, true)}\n                >\n                  {t('Raw')}\n                </a>\n              </div>\n            )}\n          </div>\n        )}\n        <div className=\"box-content with-padding\">{children}</div>\n      </div>\n    );\n  }\n}\n\nexport default EventDataSection;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport InlineSvg from 'app/components/inlineSvg';\n\nconst getMarginLeft = p => {\n  if (!p.inline) {\n    return '';\n  }\n  return `margin-left: ${p.size === 'small' ? '0.25em' : '0.5em'};`;\n};\n\nconst getBorder = p =>\n  p.border\n    ? `border: 1px solid ${\n        p.priority ? p.theme.alert[p.priority].border : p.theme.gray1\n      };`\n    : '';\n\nconst Tag = styled(\n  ({children, icon, priority: _priority, size: _size, border: _border, ...props}) => (\n    <div {...props}>\n      {icon && <StyledInlineSvg src={icon} size=\"12px\" />}\n      {children}\n    </div>\n  )\n)`\n  display: inline-flex;\n  box-sizing: border-box;\n  padding: ${p => (p.size === 'small' ? '0.1em 0.4em 0.2em' : '0.35em 0.8em 0.4em')};\n  font-size: 75%;\n  line-height: 1;\n  color: ${p => (p.priority ? '#fff' : p.gray5)};\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: middle;\n  border-radius: ${p => (p.size === 'small' ? '0.25em' : '2em')};\n  text-transform: lowercase;\n  font-weight: ${p => (p.size === 'small' ? 'bold' : 'normal')};\n  background: ${p =>\n    p.priority ? p.theme.alert[p.priority].background : p.theme.offWhite2};\n  ${p => getBorder(p)};\n  ${p => getMarginLeft(p)};\n`;\n\nTag.propTypes = {\n  priority: PropTypes.string,\n  size: PropTypes.string,\n  border: PropTypes.bool,\n  icon: PropTypes.string,\n  inline: PropTypes.bool,\n};\n\nconst StyledInlineSvg = styled(InlineSvg)`\n  margin-right: 4px;\n`;\n\nexport default Tag;\n","import React from 'react';\nimport classNames from 'classnames';\n\nexport default function Input({className, children, ...otherProps}) {\n  return <input className={classNames('form-control', className)} {...otherProps} />;\n}\n","import rawStacktraceContent from 'app/components/events/interfaces/rawStacktraceContent';\n\nexport default function getStacktraceBody(event) {\n  if (!event || !event.entries) {\n    return [];\n  }\n\n  // TODO(billyvg): This only accounts for the first exception, will need navigation to be able to\n  // diff multiple exceptions\n  //\n  // See: https://github.com/getsentry/sentry/issues/6055\n  const exc = event.entries.find(({type}) => type === 'exception');\n\n  if (!exc) {\n    // Look for a message if not an exception\n    const msg = event.entries.find(({type}) => type === 'message');\n    if (!msg) {\n      return [];\n    }\n    return msg.data && msg.data.formatted && [msg.data.formatted];\n  }\n\n  if (!exc.data) {\n    return [];\n  }\n\n  return exc.data.values\n    .filter(value => !!value.stacktrace)\n    .map(value => rawStacktraceContent(value.stacktrace, event.platform, value))\n    .reduce((acc, value) => {\n      return acc.concat(value);\n    }, []);\n}\n"],"sourceRoot":""}