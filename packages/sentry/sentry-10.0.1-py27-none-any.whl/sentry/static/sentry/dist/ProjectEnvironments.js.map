{"version":3,"sources":["webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/components/navTabs.tsx","webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/components/links/listLink.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/utils/environment.tsx","webpack:///./app/views/settings/project/projectEnvironments.jsx"],"names":["render","icon","title","action","tabs","noTitleStyles","props","TitleAndActions","Icon","Title","styled","Action","propTypes","node","isRequired","bool","defaultProps","Component","p","StyledSettingsPageHeading","SettingsPageHeading","recreateRoute","to","options","lastRootIndex","routeIndex","routes","params","location","stepBack","paths","map","path","indexOf","slice","baseRoute","query","search","fullRoute","join","underlined","className","mergedClassName","tabProps","_title","objSlug","children","isActive","index","context","router","pathname","getClassName","_classNames","activeClassName","carriedProps","this","onlyActiveOnIndex","displayName","contextTypes","object","PermissionAlert","access","hasAccess","type","DEFAULT_EMPTY_ROUTING_NAME","DEFAULT_EMPTY_ENV_NAME","getUrlRoutingName","env","encodeURIComponent","name","getDisplayName","ProjectEnvironments","state","project","environments","isLoading","toggleEnv","shouldHide","orgId","projectId","api","request","method","data","isHidden","success","addSuccessMessage","tct","environment","error","addErrorMessage","complete","fetchData","bind","prevProps","endsWith","setState","visibility","message","t","EnvironmentRow","ALL_ENVIRONMENTS_KEY","id","isSystemRow","envs","buttonText","Fragment","renderAllEnvironmentsSystemRow","key","onHide","actionText","shouldShowAction","length","renderEnvironmentList","renderEmpty","baseUrl","renderBody","React","align","justify","EnvironmentButton","size","disabled","onClick","Button","space","withApi"],"mappings":"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","file":"ProjectEnvironments.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport space from 'app/styles/space';\nimport {HeaderTitle} from 'app/styles/organization';\n\ntype Props = {\n  // The title\n  title: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n\n  className?: string;\n\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // Actions on opposite end of title bar from the title\n  action?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass SettingsPageHeading extends React.Component<Props> {\n  static propTypes = {\n    icon: PropTypes.node,\n    title: PropTypes.node.isRequired,\n    action: PropTypes.node,\n    tabs: PropTypes.node,\n    // Disables font styles in the title. Allows for more custom titles.\n    noTitleStyles: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {icon, title, action, tabs, noTitleStyles, ...props} = this.props;\n    return (\n      <div {...props}>\n        <TitleAndActions>\n          {icon && <Icon>{icon}</Icon>}\n          {title && (\n            <Title tabs={tabs} styled={noTitleStyles}>\n              <HeaderTitle>{title}</HeaderTitle>\n            </Title>\n          )}\n          {action && <Action tabs={tabs}>{action}</Action>}\n        </TitleAndActions>\n\n        {tabs && <div>{tabs}</div>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p =>\n    !p.styled &&\n    `\n    font-size: 20px;\n    font-weight: bold;`};\n  margin: ${p => (p.tabs ? `${space(4)} 0 ${space(2)}` : `${space(4)} 0`)};\n  flex: 1;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{tabs?: React.ReactNode}>`\n  ${p => (p.tabs ? `margin-top: ${space(2)}` : null)};\n`;\n\nconst StyledSettingsPageHeading = styled(SettingsPageHeading)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nexport default StyledSettingsPageHeading;\n","import {Location} from 'history';\nimport {PlainRoute} from 'react-router/lib/Route';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\n\ntype Options = {\n  routes: PlainRoute[];\n  location: Location;\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(to: string | PlainRoute, options: Options): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const query = typeof location !== 'undefined' && location.search ? location.search : '';\n\n  const fullRoute = `${baseRoute.join('')}${typeof to !== 'string' ? '' : to}${query}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\ntype Props = {\n  underlined?: boolean;\n  className?: string;\n};\n\ntype NavProps = Omit<React.HTMLProps<HTMLUListElement>, keyof Props> & Props;\n\nfunction NavTabs(props: NavProps) {\n  const {underlined, className, ...tabProps} = props;\n  const mergedClassName = classnames('nav nav-tabs', className, {\n    'border-bottom': underlined,\n  });\n  return <ul className={mergedClassName} {...tabProps} />;\n}\n\nNavTabs.propTypes = {\n  underlined: PropTypes.bool,\n};\n\nexport default NavTabs;\n","import React, {FunctionComponent} from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype DocumentTitleProps = {\n  // Main page title\n  title: string;\n  // Organization or project slug to give title some context\n  objSlug: string;\n  children?: React.ReactNode;\n};\n\nconst SentryDocumentTitle: FunctionComponent<DocumentTitleProps> = (\n  props: DocumentTitleProps\n) => {\n  const _title = `${props.title} - ${props.objSlug} - Sentry`;\n  return <DocumentTitle title={_title}>{props.children}</DocumentTitle>;\n};\n\nexport default SentryDocumentTitle;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport omit from 'lodash/omit';\nimport {Link} from 'react-router';\nimport classNames from 'classnames';\nimport {LocationDescriptor} from 'history';\n\ntype Props = {\n  to: LocationDescriptor;\n  index: boolean;\n  activeClassName: string;\n  className?: string;\n  query?: string;\n  onClick?: () => void;\n  // If supplied by parent component, decides whether link element\n  // is \"active\" or not ... overriding default behavior of strict\n  // route matching\n  isActive?: (location: LocationDescriptor, indexOnly?: boolean) => boolean;\n};\n\nclass ListLink extends React.Component<Props> {\n  static displayName = 'ListLink';\n\n  static contextTypes = {\n    router: PropTypes.object.isRequired,\n  };\n\n  static defaultProps: Partial<Props> = {\n    activeClassName: 'active',\n    index: false,\n  };\n\n  isActive = () => {\n    const {isActive, to, query, index} = this.props;\n\n    return (isActive || this.context.router.isActive)({pathname: to, query}, index);\n  };\n\n  getClassName = () => {\n    const _classNames = {};\n    const {className, activeClassName} = this.props;\n\n    if (className) {\n      _classNames[className] = true;\n    }\n\n    if (this.isActive()) {\n      _classNames[activeClassName] = true;\n    }\n\n    return classNames(_classNames);\n  };\n\n  render() {\n    const {index, children} = this.props;\n    const carriedProps = omit(this.props, 'activeClassName', 'isActive', 'index');\n\n    return (\n      <li className={this.getClassName()}>\n        <Link {...carriedProps} onlyActiveOnIndex={index}>\n          {children}\n        </Link>\n      </li>\n    );\n  }\n}\n\nexport default ListLink;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {t} from 'app/locale';\nimport Access from 'app/components/acl/access';\nimport Alert from 'app/components/alert';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access, ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert type=\"warning\" icon=\"icon-warning-sm\" {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner, manager, or admin role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nPermissionAlert.propTypes = {\n  access: PropTypes.arrayOf(PropTypes.string),\n};\n\nPermissionAlert.defaultProps = {\n  access: ['project:write'],\n};\n\nexport default PermissionAlert;\n","import {Environment} from 'app/types';\nimport {toTitleCase} from 'app/utils';\n\nconst DEFAULT_EMPTY_ROUTING_NAME = 'none';\nconst DEFAULT_EMPTY_ENV_NAME = '(No Environment)';\n\nexport function getUrlRoutingName(env: Omit<Environment, 'id'>) {\n  return encodeURIComponent(env.name) || DEFAULT_EMPTY_ROUTING_NAME;\n}\n\nexport function getDisplayName(env: Omit<Environment, 'id'>) {\n  return toTitleCase(env.name) || DEFAULT_EMPTY_ENV_NAME;\n}\n","import {Flex} from 'grid-emotion';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport {ALL_ENVIRONMENTS_KEY} from 'app/constants';\nimport {Panel, PanelHeader, PanelBody, PanelItem} from 'app/components/panels';\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {t, tct} from 'app/locale';\nimport Access from 'app/components/acl/access';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport withApi from 'app/utils/withApi';\nimport Button from 'app/components/button';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport ListLink from 'app/components/links/listLink';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport NavTabs from 'app/components/navTabs';\nimport PermissionAlert from 'app/views/settings/project/permissionAlert';\nimport SentryTypes from 'app/sentryTypes';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport space from 'app/styles/space';\nimport {getUrlRoutingName, getDisplayName} from 'app/utils/environment';\n\nclass ProjectEnvironments extends React.Component {\n  static propTypes = {\n    api: PropTypes.object,\n    routes: PropTypes.array,\n    params: PropTypes.object,\n  };\n\n  state = {\n    project: null,\n    environments: null,\n    isLoading: true,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      this.props.location.pathname.endsWith('hidden/') !==\n      prevProps.location.pathname.endsWith('hidden/')\n    ) {\n      this.fetchData();\n    }\n  }\n\n  fetchData() {\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n\n    if (!this.state.isLoading) {\n      this.setState({isLoading: true});\n    }\n\n    const {orgId, projectId} = this.props.params;\n    this.props.api.request(`/projects/${orgId}/${projectId}/environments/`, {\n      query: {\n        visibility: isHidden ? 'hidden' : 'visible',\n      },\n      success: environments => {\n        this.setState({environments, isLoading: false});\n      },\n    });\n  }\n\n  fetchProjectDetails() {\n    const {orgId, projectId} = this.props.params;\n    this.props.api.request(`/projects/${orgId}/${projectId}/`, {\n      success: project => {\n        this.setState({project});\n      },\n    });\n  }\n\n  // Toggle visibility of environment\n  toggleEnv = (env, shouldHide) => {\n    const {orgId, projectId} = this.props.params;\n\n    this.props.api.request(\n      `/projects/${orgId}/${projectId}/environments/${getUrlRoutingName(env)}/`,\n      {\n        method: 'PUT',\n        data: {\n          name: env.name,\n          isHidden: shouldHide,\n        },\n        success: () => {\n          addSuccessMessage(\n            tct('Updated [environment]', {\n              environment: getDisplayName(env),\n            })\n          );\n        },\n        error: () => {\n          addErrorMessage(\n            tct('Unable to update [environment]', {\n              environment: getDisplayName(env),\n            })\n          );\n        },\n        complete: this.fetchData.bind(this),\n      }\n    );\n  };\n\n  renderEmpty() {\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n    const message = isHidden\n      ? t(\"You don't have any hidden environments.\")\n      : t(\"You don't have any environments yet.\");\n    return <EmptyMessage>{message}</EmptyMessage>;\n  }\n\n  /**\n   * Renders rows for \"system\" environments:\n   * - \"All Environments\"\n   * - \"No Environment\"\n   *\n   */\n  renderAllEnvironmentsSystemRow() {\n    // Not available in \"Hidden\" tab\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n    if (isHidden) {\n      return null;\n    }\n    return (\n      <EnvironmentRow\n        name={ALL_ENVIRONMENTS_KEY}\n        environment={{\n          id: ALL_ENVIRONMENTS_KEY,\n          name: ALL_ENVIRONMENTS_KEY,\n        }}\n        isSystemRow\n      />\n    );\n  }\n\n  renderEnvironmentList(envs) {\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n    const buttonText = isHidden ? t('Show') : t('Hide');\n\n    return (\n      <React.Fragment>\n        {this.renderAllEnvironmentsSystemRow()}\n        {envs.map(env => {\n          return (\n            <EnvironmentRow\n              key={env.id}\n              name={env.name}\n              environment={env}\n              isHidden={isHidden}\n              onHide={this.toggleEnv}\n              actionText={buttonText}\n              shouldShowAction\n            />\n          );\n        })}\n      </React.Fragment>\n    );\n  }\n\n  renderBody() {\n    const {environments, isLoading} = this.state;\n\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n\n    return (\n      <PanelBody>\n        {environments.length\n          ? this.renderEnvironmentList(environments)\n          : this.renderEmpty()}\n      </PanelBody>\n    );\n  }\n\n  render() {\n    const {routes, params, location} = this.props;\n    const isHidden = location.pathname.endsWith('hidden/');\n\n    const baseUrl = recreateRoute('', {routes, params, stepBack: -1});\n    return (\n      <div>\n        <SentryDocumentTitle title={t('Environments')} objSlug={params.projectId} />\n        <SettingsPageHeader\n          title={t('Manage Environments')}\n          tabs={\n            <NavTabs underlined>\n              <ListLink to={baseUrl} index isActive={() => !isHidden}>\n                {t('Environments')}\n              </ListLink>\n              <ListLink to={`${baseUrl}hidden/`} index isActive={() => isHidden}>\n                {t('Hidden')}\n              </ListLink>\n            </NavTabs>\n          }\n        />\n        <PermissionAlert />\n\n        <Panel>\n          <PanelHeader>{isHidden ? t('Hidden') : t('Active Environments')}</PanelHeader>\n          {this.renderBody()}\n        </Panel>\n      </div>\n    );\n  }\n}\n\nclass EnvironmentRow extends React.Component {\n  static propTypes = {\n    environment: SentryTypes.Environment,\n    isHidden: PropTypes.bool,\n    isSystemRow: PropTypes.bool,\n    shouldShowAction: PropTypes.bool,\n    actionText: PropTypes.string,\n    onHide: PropTypes.func,\n  };\n\n  render() {\n    const {environment, shouldShowAction, isSystemRow, isHidden, actionText} = this.props;\n\n    return (\n      <PanelItem align=\"center\" justify=\"space-between\">\n        <Flex align=\"center\">\n          {isSystemRow ? t('All Environments') : environment.name}\n        </Flex>\n        <Access access={['project:write']}>\n          {({hasAccess}) => (\n            <div>\n              {shouldShowAction && (\n                <EnvironmentButton\n                  size=\"xsmall\"\n                  disabled={!hasAccess}\n                  onClick={() => this.props.onHide(environment, !isHidden)}\n                >\n                  {actionText}\n                </EnvironmentButton>\n              )}\n            </div>\n          )}\n        </Access>\n      </PanelItem>\n    );\n  }\n}\nconst EnvironmentButton = styled(Button)`\n  margin-left: ${space(0.5)};\n`;\n\nexport {ProjectEnvironments};\nexport default withApi(ProjectEnvironments);\n"],"sourceRoot":""}