{"version":3,"sources":["webpack:///./app/components/deviceName.tsx","webpack:///./app/views/organizationGroupDetails/groupTagValues.jsx"],"names":["deviceNameMapper","model","iOSDeviceList","modelIdentifier","split","modelId","splice","join","modelName","generationByIdentifier","undefined","loadDeviceListModule","props","state","componentDidMount","this","_isMounted","then","setState","componentWillUnmount","render","children","propTypes","string","Component","GroupTagValues","tagKey","tagValueList","loading","error","pageLinks","fetchData","a","async","params","query","promises","api","requestPromise","groupId","includeAllArgs","Promise","all","tagValueResponse","jqXHR","getResponseHeader","console","prevProps","isEqual","item","email","username","identifier","ipAddress","value","onRetry","group","orgId","sortedTagValueList","sortBy","property","reverse","issuesPath","map","tagValue","tagValueIdx","pct","percent","count","totalValues","toFixed","key","className","style","width","to","pathname","Fragment","user","size","marginLeft","getUserDisplayName","name","href","isUrl","date","lastSeen","t","project","slug","id","React","withApi","withOrganization"],"mappings":"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","file":"OrganizationGroupTagsValues.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport {IOSDeviceList} from 'app/types/iOSDeviceList';\n\nexport function deviceNameMapper(model: string, iOSDeviceList): string {\n  const modelIdentifier = model.split(' ')[0];\n  const modelId = model\n    .split(' ')\n    .splice(1)\n    .join(' ');\n  const modelName = iOSDeviceList.generationByIdentifier(modelIdentifier);\n  return modelName === undefined ? model : modelName + ' ' + modelId;\n}\n\nexport async function loadDeviceListModule() {\n  return import(/* webpackChunkName: \"iOSDeviceList\" */ 'ios-device-list');\n}\n\ntype Props = {\n  children?: string;\n};\n\ntype State = {\n  iOSDeviceList: IOSDeviceList | null;\n};\n/**\n * This is used to map iOS Device Names to model name.\n * This asynchronously loads the ios-device-list library because of its size\n */\nexport default class DeviceName extends React.Component<Props, State> {\n  static propTypes = {\n    children: PropTypes.string,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      iOSDeviceList: null,\n    };\n  }\n\n  private _isMounted?: boolean;\n\n  componentDidMount() {\n    // This is to handle react's warning on calling setState for unmounted components\n    // Since we can't cancel promises, we need to do this\n    this._isMounted = true;\n\n    // This library is very big, so we are codesplitting it based on size and\n    // the relatively small utility this library provides\n    loadDeviceListModule().then(iOSDeviceList => {\n      if (!this._isMounted) {\n        return;\n      }\n\n      this.setState({iOSDeviceList});\n    });\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    const {children} = this.props;\n    const {iOSDeviceList} = this.state;\n\n    // Children can be undefined, need to return null or else react throws\n    if (!children) {\n      return null;\n    }\n\n    // If library has not loaded yet, then just render the raw model string, better than empty\n    if (!iOSDeviceList) {\n      return children;\n    }\n\n    return (\n      <span data-test-id=\"loaded-device-name\">\n        {deviceNameMapper(children, iOSDeviceList)}\n      </span>\n    );\n  }\n}\n","import sortBy from 'lodash/sortBy';\nimport property from 'lodash/property';\nimport isEqual from 'lodash/isEqual';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {isUrl, percent} from 'app/utils';\nimport {t} from 'app/locale';\nimport withApi from 'app/utils/withApi';\nimport UserAvatar from 'app/components/avatar/userAvatar';\nimport DeviceName from 'app/components/deviceName';\nimport ExternalLink from 'app/components/links/externalLink';\nimport GlobalSelectionLink from 'app/components/globalSelectionLink';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport Pagination from 'app/components/pagination';\nimport SentryTypes from 'app/sentryTypes';\nimport TimeSince from 'app/components/timeSince';\nimport withOrganization from 'app/utils/withOrganization';\n\nclass GroupTagValues extends React.Component {\n  static propTypes = {\n    api: PropTypes.object,\n    group: SentryTypes.Group.isRequired,\n    query: PropTypes.object,\n  };\n\n  state = {\n    tagKey: null,\n    tagValueList: null,\n    loading: true,\n    error: false,\n    pageLinks: '',\n  };\n\n  componentWillMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps) {\n    const queryHasChanged = !isEqual(prevProps.query, this.props.query);\n    if (queryHasChanged || prevProps.params.tagKey !== this.props.params.tagKey) {\n      this.fetchData();\n    }\n  }\n\n  fetchData = async () => {\n    const {params, query} = this.props;\n    this.setState({\n      loading: true,\n      error: false,\n    });\n\n    const promises = [\n      this.props.api.requestPromise(`/issues/${params.groupId}/tags/${params.tagKey}/`, {\n        query,\n      }),\n      this.props.api.requestPromise(\n        `/issues/${params.groupId}/tags/${params.tagKey}/values/`,\n        {\n          query,\n          includeAllArgs: true,\n        }\n      ),\n    ];\n\n    try {\n      const [tagKey, tagValueResponse] = await Promise.all(promises);\n      const [tagValueList, , jqXHR] = tagValueResponse;\n\n      this.setState({\n        tagKey,\n        tagValueList,\n        loading: false,\n        pageLinks: jqXHR.getResponseHeader('Link'),\n      });\n    } catch (rejections) {\n      // eslint-disable-next-line no-console\n      console.error(rejections);\n      this.setState({\n        error: true,\n        loading: false,\n      });\n    }\n  };\n\n  getUserDisplayName(item) {\n    return item.email || item.username || item.identifier || item.ipAddress || item.value;\n  }\n\n  render() {\n    if (this.state.loading) {\n      return <LoadingIndicator />;\n    } else if (this.state.error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    const {\n      group,\n      params: {orgId},\n    } = this.props;\n    const tagKey = this.state.tagKey;\n\n    const sortedTagValueList = sortBy(\n      this.state.tagValueList,\n      property('count')\n    ).reverse();\n\n    const issuesPath = `/organizations/${orgId}/issues/`;\n\n    const children = sortedTagValueList.map((tagValue, tagValueIdx) => {\n      const pct = percent(tagValue.count, tagKey.totalValues).toFixed(2);\n      const query = tagValue.query || `${tagKey.key}:\"${tagValue.value}\"`;\n      return (\n        <tr key={tagValueIdx}>\n          <td className=\"bar-cell\">\n            <span className=\"bar\" style={{width: pct + '%'}} />\n            <span className=\"label\">{pct}%</span>\n          </td>\n          <td>\n            <GlobalSelectionLink\n              to={{\n                pathname: issuesPath,\n                query: {query},\n              }}\n            >\n              {tagKey.key === 'user' ? (\n                <React.Fragment>\n                  <UserAvatar user={tagValue} size={20} className=\"avatar\" />\n                  <span style={{marginLeft: 10}}>\n                    {this.getUserDisplayName(tagValue)}\n                  </span>\n                </React.Fragment>\n              ) : (\n                <DeviceName>{tagValue.name}</DeviceName>\n              )}\n            </GlobalSelectionLink>\n            {tagValue.email && (\n              <ExternalLink href={`mailto:${tagValue.email}`} className=\"external-icon\">\n                <em className=\"icon-envelope\" />\n              </ExternalLink>\n            )}\n            {isUrl(tagValue.value) && (\n              <a href={tagValue.value} className=\"external-icon\">\n                <em className=\"icon-open\" />\n              </a>\n            )}\n          </td>\n          <td>\n            <TimeSince date={tagValue.lastSeen} />\n          </td>\n        </tr>\n      );\n    });\n\n    return (\n      <div>\n        <h3>\n          {tagKey.key === 'user' ? t('Affected Users') : tagKey.name}\n          <a\n            href={`/${orgId}/${group.project.slug}/issues/${group.id}/tags/${\n              this.props.params.tagKey\n            }/export/`}\n            className=\"btn btn-default btn-sm\"\n            style={{marginLeft: 10}}\n          >\n            {t('Export to CSV')}\n          </a>\n        </h3>\n        <table className=\"table table-striped\">\n          <thead>\n            <tr>\n              <th style={{width: 30}}>%</th>\n              <th />\n              <th style={{width: 200}}>{t('Last Seen')}</th>\n            </tr>\n          </thead>\n          <tbody>{children}</tbody>\n        </table>\n        <Pagination pageLinks={this.state.pageLinks} />\n        <p>\n          <small>\n            {t('Note: Percentage of issue is based on events seen in the last 7 days.')}\n          </small>\n        </p>\n      </div>\n    );\n  }\n}\n\nexport {GroupTagValues};\nexport default withApi(withOrganization(GroupTagValues));\n"],"sourceRoot":""}