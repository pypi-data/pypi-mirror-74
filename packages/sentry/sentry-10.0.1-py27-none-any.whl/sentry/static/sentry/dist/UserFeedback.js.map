{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/components/dateTime.tsx","webpack:///./app/components/placeholder.tsx","webpack:///./app/views/userFeedback/userFeedbackEmpty.tsx","webpack:////workspace/node_modules/sentry-dreamy-components/dist/user-feedback.svg","webpack:///./app/components/lightWeightNoProjectMessage.tsx","webpack:///./app/views/userFeedback/utils.jsx","webpack:///./app/views/userFeedback/index.tsx"],"names":["getTitle","render","title","this","renderComponent","getFormat","clock24Hours","dateOnly","timeOnly","seconds","shortDate","date","utc","user","get","options","format","carriedProps","tz","timezone","propTypes","any","isRequired","bool","defaultProps","Component","Placeholder","props","className","children","p","theme","shape","bottomGutter","width","height","componentDidMount","organization","projectIds","window","sentryEmbedCallback","embed","submit","_body","_submitInProgress","setTimeout","onSuccess","hasAnyFeedback","eventKey","org_id","parseInt","id","projects","componentWillUnmount","length","filter","includes","some","hasUserReports","trackAnalytics","eventName","organization_id","loadingProjects","UserFeedbackLanding","IllustrationContainer","CardComponentContainer","Illustration","data","StyledBox","ButtonList","external","onClick","href","priority","eventId","Organization","arrayOf","string","src","UserFeedbackEmpty","module","exports","withProjects","DEFAULT_STATUS","getQuery","search","query","qs","parse","status","pick","Object","values","URL_PARAM","getEndpoints","slug","project","Array","isArray","renderResults","orgId","state","reportList","map","item","issue","key","eventID","StyledEventUserFeedback","report","issueId","renderEmpty","renderLoading","renderBody","renderStreamBody","loading","location","pathname","reportListPageLinks","unresolvedQuery","allIssuesQuery","Fragment","Header","to","pageLinks","withOrganization","profiler","space"],"mappings":"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","file":"UserFeedback.js","sourcesContent":["import DocumentTitle from 'react-document-title';\nimport React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport moment from 'moment-timezone';\n\nimport ConfigStore from 'app/stores/configStore';\n\ntype Props = {\n  date: moment.MomentInput;\n  dateOnly?: boolean;\n  timeOnly?: boolean;\n  shortDate?: boolean;\n  seconds?: boolean;\n  utc?: boolean;\n};\n\nclass DateTime extends React.Component<Props> {\n  static propTypes = {\n    date: PropTypes.any.isRequired,\n    dateOnly: PropTypes.bool,\n    timeOnly: PropTypes.bool,\n    shortDate: PropTypes.bool,\n    seconds: PropTypes.bool,\n    utc: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    seconds: true,\n  };\n\n  getFormat = ({clock24Hours}: {clock24Hours: boolean}): string => {\n    const {dateOnly, timeOnly, seconds, shortDate} = this.props;\n\n    // October 26, 2017\n    if (dateOnly) {\n      return 'LL';\n    }\n\n    // 4:57 PM\n    if (timeOnly) {\n      return 'LT';\n    }\n\n    if (shortDate) {\n      return 'MM/DD/YYYY';\n    }\n\n    if (clock24Hours) {\n      return 'MMMM D YYYY HH:mm:ss z';\n    }\n\n    // Oct 26, 2017 11:30:30 AM\n    if (seconds) {\n      return 'll LTS z';\n    }\n\n    // Default is Oct 26, 2017 11:30 AM\n    return 'lll';\n  };\n\n  render() {\n    const {\n      date,\n      seconds, // eslint-disable-line no-unused-vars\n      shortDate, // eslint-disable-line no-unused-vars\n      dateOnly, // eslint-disable-line no-unused-vars\n      utc,\n      timeOnly: _timeOnly, // eslint-disable-line no-unused-vars\n      ...carriedProps\n    } = this.props;\n    const user = ConfigStore.get('user');\n    const options = user ? user.options : {};\n    const format = this.getFormat(options);\n\n    return (\n      <time {...carriedProps}>\n        {utc\n          ? moment.utc(date).format(format)\n          : moment.tz(date, options.timezone).format(format)}\n      </time>\n    );\n  }\n}\n\nexport default DateTime;\n","import React from 'react';\nimport styled from 'react-emotion';\nimport PropTypes from 'prop-types';\n\nimport space from 'app/styles/space';\n\nconst defaultProps = {\n  shape: 'rect' as 'rect' | 'circle',\n  bottomGutter: 0 as Parameters<typeof space>[0],\n  width: '100%',\n  height: '60px',\n};\n\ntype DefaultProps = Readonly<typeof defaultProps>;\n\ntype Props = {\n  className?: string;\n  children?: React.ReactNode;\n} & Partial<DefaultProps>;\n\nconst Placeholder = styled((props: Props) => {\n  const {className, children} = props;\n  return (\n    <div data-test-id=\"loading-placeholder\" className={className}>\n      {children}\n    </div>\n  );\n})<Props>`\n  display: flex;\n  flex-direction: column;\n  flex-shrink: 0;\n  justify-content: center;\n\n  background-color: ${p => p.theme.placeholderBackground};\n  width: ${p => p.width};\n  height: ${p => p.height};\n  ${p => (p.shape === 'circle' ? 'border-radius: 100%;' : '')}\n  ${p =>\n    typeof p.bottomGutter === 'number' && p.bottomGutter > 0\n      ? `margin-bottom: ${space(p.bottomGutter)};`\n      : ''}\n`;\n\nPlaceholder.defaultProps = defaultProps;\n\nPlaceholder.propTypes = {\n  shape: PropTypes.oneOf(['rect', 'circle']),\n  width: PropTypes.string,\n  height: PropTypes.string,\n  bottomGutter: PropTypes.number as any,\n};\n\nexport default Placeholder;\n","import React from 'react';\nimport styled from 'react-emotion';\nimport PropTypes from 'prop-types';\nimport * as Sentry from '@sentry/browser';\n\nimport {Organization, Project} from 'app/types';\nimport {t} from 'app/locale';\nimport {trackAnalyticsEvent, trackAdhocEvent} from 'app/utils/analytics';\nimport Button from 'app/components/button';\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport SentryTypes from 'app/sentryTypes';\nimport space from 'app/styles/space';\nimport userFeedback from 'sentry-dreamy-components/dist/user-feedback.svg';\nimport withOrganization from 'app/utils/withOrganization';\nimport withProjects from 'app/utils/withProjects';\n\ntype Props = {\n  organization: Organization;\n  projects: Project[];\n  loadingProjects: boolean;\n  projectIds?: string[];\n};\n\ntype IllustrationProps = {\n  data: string;\n  className?: string;\n};\n\nclass UserFeedbackEmpty extends React.Component<Props> {\n  static propTypes = {\n    organization: SentryTypes.Organization.isRequired,\n    projectIds: PropTypes.arrayOf(PropTypes.string.isRequired),\n  };\n\n  componentDidMount() {\n    const {organization, projectIds} = this.props;\n\n    window.sentryEmbedCallback = function(embed) {\n      // Mock the embed's submit xhr to always be successful\n      // NOTE: this will not have errors if the form is empty\n      embed.submit = function(_body) {\n        this._submitInProgress = true;\n        setTimeout(() => {\n          this._submitInProgress = false;\n          this.onSuccess();\n        }, 500);\n      };\n    };\n\n    if (this.hasAnyFeedback === false) {\n      // send to reload only due to higher event volume\n      trackAdhocEvent({\n        eventKey: 'user_feedback.viewed',\n        org_id: parseInt(organization.id, 10),\n        projects: projectIds,\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    window.sentryEmbedCallback = null;\n  }\n\n  get hasAnyFeedback() {\n    const {projects, projectIds} = this.props;\n\n    const selectedProjects =\n      projectIds && projectIds.length\n        ? projects.filter(({id}) => projectIds.includes(id))\n        : projects;\n\n    return selectedProjects.some(({hasUserReports}) => hasUserReports);\n  }\n\n  trackAnalytics({eventKey, eventName}: {eventKey: string; eventName: string}) {\n    const {organization, projectIds} = this.props;\n\n    trackAnalyticsEvent({\n      eventKey,\n      eventName,\n      organization_id: organization.id,\n      projects: projectIds,\n    });\n  }\n\n  render() {\n    // Show no user reports if waiting for projects to load or if there is no feedback\n    if (this.props.loadingProjects || this.hasAnyFeedback !== false) {\n      return (\n        <EmptyStateWarning>\n          <p>{t('Sorry, no user reports match your filters.')}</p>\n        </EmptyStateWarning>\n      );\n    }\n    // Show landing page after projects have loaded and it is confirmed no projects have feedback\n    return (\n      <UserFeedbackLanding>\n        <IllustrationContainer>\n          <CardComponentContainer>\n            <Illustration data={userFeedback} />\n          </CardComponentContainer>\n        </IllustrationContainer>\n\n        <StyledBox>\n          <h3>{t('No User Feedback Collected')}</h3>\n          <p>\n            {t(\n              `Don't rely on stack traces and graphs alone to understand\n              the cause and impact of errors. Enable User Feedback to collect\n              your users' comments when they encounter a crash or bug.`\n            )}\n          </p>\n          <ButtonList>\n            <Button\n              external\n              onClick={() =>\n                this.trackAnalytics({\n                  eventKey: 'user_feedback.docs_clicked',\n                  eventName: 'User Feedback Docs Clicked',\n                })\n              }\n              href=\"https://docs.sentry.io/enriching-error-data/user-feedback/\"\n            >\n              {t('Read the docs')}\n            </Button>\n            <Button\n              priority=\"primary\"\n              onClick={() => {\n                Sentry.showReportDialog({\n                  // should never make it to the Sentry API, but just in case, use throwaway id\n                  eventId: '00000000000000000000000000000000',\n                });\n\n                this.trackAnalytics({\n                  eventKey: 'user_feedback.dialog_opened',\n                  eventName: 'User Feedback Dialog Opened',\n                });\n              }}\n            >\n              {t('Open the report dialog')}\n            </Button>\n          </ButtonList>\n        </StyledBox>\n      </UserFeedbackLanding>\n    );\n  }\n}\n\nconst UserFeedbackLanding = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-wrap: wrap;\n  min-height: 450px;\n  padding: ${space(1)};\n`;\n\nconst StyledBox = styled('div')`\n  flex: 1;\n  padding: ${space(3)};\n`;\n\nconst IllustrationContainer = styled(StyledBox)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst CardComponentContainer = styled('div')`\n  width: 550px;\n  height: 340px;\n\n  img {\n    vertical-align: baseline;\n  }\n\n  @media (max-width: 1150px) {\n    font-size: ${p => p.theme.fontSizeMedium};\n    width: 450px;\n  }\n\n  @media (max-width: 1000px) {\n    font-size: ${p => p.theme.fontSizeSmall};\n    width: 320px;\n    max-height: 180px;\n  }\n`;\n\nconst Illustration = styled(({data, className}: IllustrationProps) => (\n  <object data={data} className={className}>\n    <img src={data} className={className} />\n  </object>\n))`\n  width: 100%;\n  height: 100%;\n`;\n\nconst ButtonList = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(130px, max-content));\n  grid-gap: ${space(1)};\n`;\n\nexport {UserFeedbackEmpty};\n\nexport default withOrganization(withProjects(UserFeedbackEmpty));\n","module.exports = __webpack_public_path__ + \"user-feedback.svg\";","import React from 'react';\n\nimport {LightWeightOrganization, Organization, Project} from 'app/types';\nimport NoProjectMessage from 'app/components/noProjectMessage';\nimport withProjects from 'app/utils/withProjects';\n\ntype Props = {\n  organization: LightWeightOrganization | Organization;\n  projects: Project[];\n  loadingProjects: boolean;\n};\n\nclass LightWeightNoProjectMessage extends React.Component<Props> {\n  render() {\n    const {organization, projects, loadingProjects} = this.props;\n    return (\n      <NoProjectMessage\n        {...this.props}\n        projects={projects}\n        loadingProjects={!('projects' in organization) && loadingProjects}\n      />\n    );\n  }\n}\n\nexport default withProjects(LightWeightNoProjectMessage);\n","import pick from 'lodash/pick';\nimport qs from 'query-string';\n\nimport {URL_PARAM} from 'app/constants/globalSelectionHeader';\n\nconst DEFAULT_STATUS = 'unresolved';\n\n/**\n * Get query for API given the current location.search string\n *\n * @param {String} search\n * @returns {Object}\n */\nexport function getQuery(search) {\n  const query = qs.parse(search);\n\n  const status = typeof query.status !== 'undefined' ? query.status : DEFAULT_STATUS;\n\n  const queryParams = {\n    status,\n    ...pick(query, ['cursor', ...Object.values(URL_PARAM)]),\n  };\n\n  return queryParams;\n}\n","import {Link} from 'react-router';\nimport {RouteComponentProps} from 'react-router/lib/Router';\nimport React from 'react';\nimport omit from 'lodash/omit';\nimport styled from 'react-emotion';\n\nimport {Organization, UserReport} from 'app/types';\nimport {PageContent} from 'app/styles/organization';\nimport {Panel, PanelBody} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport AsyncView from 'app/views/asyncView';\nimport CompactIssue from 'app/components/issues/compactIssue';\nimport EventUserFeedback from 'app/components/events/userFeedback';\nimport GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';\nimport LightWeightNoProjectMessage from 'app/components/lightWeightNoProjectMessage';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport PageHeading from 'app/components/pageHeading';\nimport Pagination from 'app/components/pagination';\nimport SentryTypes from 'app/sentryTypes';\nimport profiler from 'app/utils/profiler';\nimport space from 'app/styles/space';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport {getQuery} from './utils';\nimport UserFeedbackEmpty from './userFeedbackEmpty';\n\ntype State = AsyncView['state'] & {\n  reportList: UserReport[];\n};\n\ntype Props = RouteComponentProps<{orgId: string}, {}> & {\n  organization: Organization;\n};\n\nclass OrganizationUserFeedback extends AsyncView<Props, State> {\n  static propTypes = {\n    organization: SentryTypes.Organization.isRequired,\n  };\n\n  getEndpoints(): [string, string, any][] {\n    const {\n      organization,\n      location: {search},\n    } = this.props;\n\n    return [\n      [\n        'reportList',\n        `/organizations/${organization.slug}/user-feedback/`,\n        {\n          query: getQuery(search),\n        },\n      ],\n    ];\n  }\n\n  getTitle() {\n    return `${t('User Feedback')} - ${this.props.organization.slug}`;\n  }\n\n  get projectIds() {\n    const {project} = this.props.location.query;\n\n    return Array.isArray(project)\n      ? project\n      : typeof project === 'string'\n      ? [project]\n      : [];\n  }\n\n  renderResults() {\n    const {orgId} = this.props.params;\n\n    return (\n      <div data-test-id=\"user-feedback-list\">\n        {this.state.reportList.map(item => {\n          const issue = item.issue;\n          return (\n            <CompactIssue key={item.id} id={issue.id} data={issue} eventId={item.eventID}>\n              <StyledEventUserFeedback report={item} orgId={orgId} issueId={issue.id} />\n            </CompactIssue>\n          );\n        })}\n      </div>\n    );\n  }\n\n  renderEmpty() {\n    return <UserFeedbackEmpty projectIds={this.projectIds} />;\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderStreamBody() {\n    const {loading, reportList} = this.state;\n\n    if (loading) {\n      return <LoadingIndicator />;\n    }\n\n    if (!reportList.length) {\n      return this.renderEmpty();\n    }\n\n    return this.renderResults();\n  }\n\n  renderBody() {\n    const {organization} = this.props;\n    const {location} = this.props;\n    const {pathname, search, query} = location;\n    const {status} = getQuery(search);\n    const {reportListPageLinks} = this.state;\n\n    const unresolvedQuery = omit(query, 'status');\n    const allIssuesQuery = {...query, status: ''};\n\n    return (\n      <React.Fragment>\n        <GlobalSelectionHeader organization={organization} />\n        <PageContent>\n          <LightWeightNoProjectMessage organization={organization}>\n            <div data-test-id=\"user-feedback\">\n              <Header>\n                <PageHeading>{t('User Feedback')}</PageHeading>\n                <div className=\"btn-group\">\n                  <Link\n                    to={{pathname, query: unresolvedQuery}}\n                    className={\n                      'btn btn-sm btn-default' +\n                      (status === 'unresolved' ? ' active' : '')\n                    }\n                  >\n                    {t('Unresolved')}\n                  </Link>\n                  <Link\n                    to={{pathname, query: allIssuesQuery}}\n                    className={\n                      'btn btn-sm btn-default' + (status === '' ? ' active' : '')\n                    }\n                  >\n                    {t('All Issues')}\n                  </Link>\n                </div>\n              </Header>\n              <Panel>\n                <PanelBody className=\"issue-list\">{this.renderStreamBody()}</PanelBody>\n              </Panel>\n              <Pagination pageLinks={reportListPageLinks} />\n            </div>\n          </LightWeightNoProjectMessage>\n        </PageContent>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withOrganization(profiler()(OrganizationUserFeedback));\n\nconst Header = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: ${space(2)};\n`;\n\nconst StyledEventUserFeedback = styled(EventUserFeedback)`\n  margin: ${space(2)} 0 0;\n`;\n"],"sourceRoot":""}