{"version":3,"sources":["webpack:///./app/components/modals/recoveryOptionsModal.jsx","webpack:///./app/components/asyncComponentSearchInput.tsx","webpack:///./app/views/permissionDenied.jsx","webpack:///./app/components/asyncComponent.tsx"],"names":["RecoveryOptionsModal","args","handleSkipSms","setState","skipSms","state","this","props","authenticatorName","closeModal","Body","Header","authenticators","reduce","obj","item","id","recovery","sms","recoveryEnrolled","isEnrolled","displaySmsPrompt","Fragment","closeButton","onHide","t","type","className","onClick","name","autoFocus","priority","to","marginLeft","space","authId","AsyncComponent","query","busy","immediateQuery","searchQuery","location","api","requestPromise","url","includeAllArgs","method","data","jqXHR","onSuccess","onError","debounceWait","handleChange","handleInputChange","evt","target","value","handleSearch","updateRoute","onSearchSubmit","preventDefault","router","push","pathname","render","placeholder","children","defaultSearchBar","Form","onSubmit","onChange","StyledLoadingIndicator","size","hideMessage","mini","undefined","defaultProps","Component","PermissionDenied","routes","context","organization","project","route","getRouteStringFromRoutes","Sentry","scope","setFingerprint","setExtra","features","access","Error","title","message","tct","link","href","React","contextTypes","PropTypes","object","withRouter","wrapErrorHandling","component","fn","error","console","setTimeout","reloadOnVisible","shouldReloadOnVisible","shouldReload","shouldRenderBadRequests","markShouldMeasure","remainingRequests","_measurement","hasMeasured","finished","remountComponent","reloadData","getDefaultState","fetchData","visibilityReloader","loading","document","hidden","extraState","endpoints","getEndpoints","length","clear","forEach","stateKey","endpoint","params","options","locationQuery","paginate","cursor","request","success","_","handleRequestSuccess","allowError","handleError","bind","mark","componentWillMount","addEventListener","componentWillReceiveProps","_newProps","_newContext","componentDidUpdate","prevProps","prevContext","isRouterInContext","isLocationInProps","currentLocation","prevLocation","routeString","measure","start","finishProfile","search","componentWillUnmount","removeEventListener","reloading","errors","onRequestSuccess","_resp","onRequestError","_args","initialRequest","prevState","getResponseHeader","responseText","category","level","getEndpointParams","warn","getEndpoint","renderSearchInput","firstEndpoint","stateKeyOrDefault","urlOrDefault","renderError","renderLoading","disableLog","disableReport","unauthorizedErrors","Object","values","find","resp","status","permissionErrors","shouldLogSentry","badRequests","filter","responseJSON","detail","map","join","disableLogSentry","onRetry","renderComponent","renderBody","propTypes"],"mappings":"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","file":"RecoveryOptionsModal.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {t} from 'app/locale';\nimport Alert from 'app/components/alert';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Button from 'app/components/button';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\nimport space from 'app/styles/space';\n\nclass RecoveryOptionsModal extends AsyncComponent {\n  static propTypes = {\n    closeModal: PropTypes.func,\n    onClose: PropTypes.func,\n    authenticatorName: PropTypes.string.isRequired,\n    Body: PropTypes.oneOfType([PropTypes.func, PropTypes.node]).isRequired,\n    Header: PropTypes.oneOfType([PropTypes.func, PropTypes.node]).isRequired,\n  };\n\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      skipSms: false,\n    };\n  }\n\n  getEndpoints() {\n    return [['authenticators', '/users/me/authenticators/']];\n  }\n\n  handleSkipSms = () => {\n    this.setState({skipSms: true});\n  };\n\n  renderBody() {\n    const {authenticatorName, closeModal, Body, Header} = this.props;\n    const {authenticators, skipSms} = this.state;\n\n    const {recovery, sms} = authenticators.reduce((obj, item) => {\n      obj[item.id] = item;\n      return obj;\n    }, {});\n    const recoveryEnrolled = recovery && recovery.isEnrolled;\n    const displaySmsPrompt = sms && !sms.isEnrolled && !skipSms;\n\n    return (\n      <React.Fragment>\n        <Header closeButton onHide={closeModal}>\n          {t('Two-Factor Authentication Enabled')}\n        </Header>\n\n        <Body>\n          <TextBlock>\n            {t('Two-factor authentication via %s has been enabled.', authenticatorName)}\n          </TextBlock>\n          <TextBlock>\n            {t('You should now set up recovery options to secure your account.')}\n          </TextBlock>\n\n          {displaySmsPrompt ? (\n            // set up backup phone number\n            <Alert type=\"warning\">\n              {t('We recommend adding a phone number as a backup 2FA method.')}\n            </Alert>\n          ) : (\n            // get recovery codes\n            <Alert type=\"warning\">\n              {t(\n                `Recovery codes are the only way to access your account if you lose\n                  your device and cannot receive two-factor authentication codes.`\n              )}\n            </Alert>\n          )}\n        </Body>\n\n        {displaySmsPrompt ? (\n          // set up backup phone number\n          <div className=\"modal-footer\">\n            <Button onClick={this.handleSkipSms} name=\"skipStep\" autoFocus>\n              {t('Skip this step')}\n            </Button>\n            <Button\n              priority=\"primary\"\n              onClick={closeModal}\n              to={`/settings/account/security/mfa/${sms.id}/enroll/`}\n              name=\"addPhone\"\n              css={{marginLeft: space(1)}}\n              autoFocus\n            >\n              {t('Add a Phone Number')}\n            </Button>\n          </div>\n        ) : (\n          // get recovery codes\n          <div className=\"modal-footer\">\n            <Button\n              priority=\"primary\"\n              onClick={closeModal}\n              to={\n                recoveryEnrolled\n                  ? `/settings/account/security/mfa/${recovery.authId}/`\n                  : '/settings/account/security/'\n              }\n              name=\"getCodes\"\n              autoFocus\n            >\n              {t('Get Recovery Codes')}\n            </Button>\n          </div>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default RecoveryOptionsModal;\n","import * as ReactRouter from 'react-router';\nimport debounce from 'lodash/debounce';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport Input from 'app/views/settings/components/forms/controls/input';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {Client} from 'app/api';\n\ntype RenderProps = {\n  defaultSearchBar: React.ReactNode;\n  busy: boolean;\n  handleChange: (value: string) => void;\n  value: string;\n};\n\ntype Props = ReactRouter.WithRouterProps & {\n  api: Client;\n  className?: string;\n  /**\n   * URL to make the search request to\n   */\n  url: string;\n  /**\n   * Placeholder text in the search input\n   */\n  placeholder?: string;\n  /**\n   * Time in milliseconds to wait before firing off the request\n   */\n  debounceWait?: number;\n  /**\n   * Updates URL with search query in the URL param: `query`\n   */\n  updateRoute?: boolean;\n\n  onSearchSubmit?: (query: string, event: React.FormEvent) => void;\n  onSuccess: (data: object, jqXHR: JQueryXHR | undefined) => void;\n  onError: () => void;\n\n  /**\n   * A render-prop child may be passed to handle custom rendering of the input.\n   */\n  children?: (otps: RenderProps) => React.ReactNode;\n};\n\ntype State = {\n  query: string;\n  busy: boolean;\n};\n\n/**\n * This is a search input that can be easily used in AsyncComponent/Views.\n *\n * It probably doesn't make too much sense outside of an AsyncComponent atm.\n */\nclass AsyncComponentSearchInput extends React.Component<Props, State> {\n  static defaultProps = {\n    placeholder: 'Search...',\n    debounceWait: 200,\n  };\n\n  state: State = {\n    query: '',\n    busy: false,\n  };\n\n  immediateQuery = async (searchQuery: string) => {\n    const {location, api} = this.props;\n    this.setState({busy: true});\n\n    try {\n      const [data, , jqXHR] = await api.requestPromise(`${this.props.url}`, {\n        includeAllArgs: true,\n        method: 'GET',\n        query: {...location.query, query: searchQuery},\n      });\n      // only update data if the request's query matches the current query\n      if (this.state.query === searchQuery) {\n        this.props.onSuccess(data, jqXHR);\n      }\n    } catch {\n      this.props.onError();\n    }\n\n    this.setState({busy: false});\n  };\n\n  query = debounce(this.immediateQuery, this.props.debounceWait);\n\n  handleChange = (query: string) => {\n    this.query(query);\n    this.setState({query});\n  };\n\n  handleInputChange = (evt: React.ChangeEvent<HTMLInputElement>) =>\n    this.handleChange(evt.target.value);\n\n  /**\n   * This is called when \"Enter\" (more specifically a form \"submit\" event) is pressed.\n   */\n  handleSearch = (evt: React.FormEvent<HTMLFormElement>) => {\n    const {updateRoute, onSearchSubmit} = this.props;\n    evt.preventDefault();\n\n    // Update the URL to reflect search term.\n    if (updateRoute) {\n      const {router, location} = this.props;\n      router.push({\n        pathname: location.pathname,\n        query: {\n          query: this.state.query,\n        },\n      });\n    }\n\n    if (typeof onSearchSubmit !== 'function') {\n      return;\n    }\n    onSearchSubmit(this.state.query, evt);\n  };\n\n  render() {\n    const {placeholder, children, className} = this.props;\n    const {busy, query} = this.state;\n\n    const defaultSearchBar = (\n      <Form onSubmit={this.handleSearch}>\n        <Input\n          value={query}\n          onChange={this.handleInputChange}\n          className={className}\n          placeholder={placeholder}\n        />\n        {busy && <StyledLoadingIndicator size={18} hideMessage mini />}\n      </Form>\n    );\n\n    return children === undefined\n      ? defaultSearchBar\n      : children({defaultSearchBar, busy, value: query, handleChange: this.handleChange});\n  }\n}\n\nconst StyledLoadingIndicator = styled(LoadingIndicator)`\n  position: absolute;\n  right: 25px;\n  top: 50%;\n  transform: translateY(-13px);\n`;\n\nconst Form = styled('form')`\n  position: relative;\n`;\n\n// XXX(epurkhiser): The withRouter HoC has incorrect typings. It does not\n// correctly remove the WithRouterProps from the return type of the HoC, thus\n// we manually have to do this.\ntype PropsWithoutRouter = Omit<Props, keyof ReactRouter.WithRouterProps>;\n\nexport default ReactRouter.withRouter(AsyncComponentSearchInput) as React.ComponentClass<\n  PropsWithoutRouter\n>;\n","import {withRouter} from 'react-router';\nimport DocumentTitle from 'react-document-title';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport * as Sentry from '@sentry/browser';\n\nimport {t, tct} from 'app/locale';\nimport ExternalLink from 'app/components/links/externalLink';\nimport LoadingError from 'app/components/loadingError';\nimport getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';\n\nconst ERROR_NAME = 'Permission Denied';\n\nclass PermissionDenied extends React.Component {\n  static propTypes = {\n    routes: PropTypes.array,\n  };\n\n  static contextTypes = {\n    organization: PropTypes.object,\n    project: PropTypes.object,\n  };\n\n  componentDidMount() {\n    const {routes} = this.props;\n    const {organization, project} = this.context;\n\n    const route = getRouteStringFromRoutes(routes);\n    Sentry.withScope(scope => {\n      scope.setFingerprint([ERROR_NAME, route]);\n      scope.setExtra('route', route);\n      scope.setExtra('orgFeatures', (organization && organization.features) || []);\n      scope.setExtra('orgAccess', (organization && organization.access) || []);\n      scope.setExtra('projectFeatures', (project && project.features) || []);\n      Sentry.captureException(new Error(`${ERROR_NAME}${route ? ` : ${route}` : ''}`));\n    });\n  }\n\n  render() {\n    return (\n      <DocumentTitle title={t('Permission Denied')}>\n        <LoadingError\n          message={tct(\n            'Your role does not have the necessary permissions to access this resource, please read more about [link:organizational roles]',\n            {\n              link: <ExternalLink href=\"https://docs.sentry.io/learn/membership/\" />,\n            }\n          )}\n        />\n      </DocumentTitle>\n    );\n  }\n}\n\nexport default withRouter(PermissionDenied);\n","import isEqual from 'lodash/isEqual';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport * as Sentry from '@sentry/browser';\nimport {RouteComponentProps} from 'react-router/lib/Router';\n\nimport {Client} from 'app/api';\nimport {metric} from 'app/utils/analytics';\nimport {t} from 'app/locale';\nimport AsyncComponentSearchInput from 'app/components/asyncComponentSearchInput';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport PermissionDenied from 'app/views/permissionDenied';\nimport RouteError from 'app/views/routeError';\nimport getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';\n\ntype AsyncComponentProps = {\n  // optional sentry APM profiling\n  // Note we don't decorate `AsyncComponent` but rather the subclass\n  // so we can get its component name\n  finishProfile?: () => void;\n} & Partial<RouteComponentProps<{}, {}>>;\n\ntype AsyncComponentState = {\n  loading: boolean;\n  reloading: boolean;\n  error: boolean;\n  errors: object;\n  remainingRequests?: number;\n  [key: string]: any;\n};\n\ntype SearchInputProps = React.ComponentProps<typeof AsyncComponentSearchInput>;\n\ntype RenderSearchInputArgs = Omit<\n  SearchInputProps,\n  'api' | 'onSuccess' | 'onError' | 'url'\n> & {\n  stateKey?: string;\n  url?: SearchInputProps['url'];\n};\n\n/**\n * Wraps methods on the AsyncComponent to catch errors and set the `error`\n * state on error.\n */\nfunction wrapErrorHandling<T extends any[], U>(\n  component: AsyncComponent,\n  fn: (...args: T) => U\n) {\n  return (...args: T): U | null => {\n    try {\n      return fn(...args);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error(error);\n      setTimeout(() => {\n        throw error;\n      });\n      component.setState({error});\n      return null;\n    }\n  };\n}\n\nexport default class AsyncComponent<\n  P extends AsyncComponentProps = AsyncComponentProps,\n  S extends AsyncComponentState = AsyncComponentState\n> extends React.Component<P, S> {\n  static propTypes: any = {\n    location: PropTypes.object,\n    router: PropTypes.object,\n  };\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  // Override this flag to have the component reload it's state when the window\n  // becomes visible again. This will set the loading and reloading state, but\n  // will not render a loading state during reloading.\n  //\n  // eslint-disable-next-line react/sort-comp\n  reloadOnVisible = false;\n\n  // When enabling reloadOnVisible, this flag may be used to turn on and off\n  // the reloading. This is useful if your component only needs to reload when\n  // becoming visible during certain states.\n  //\n  // eslint-disable-next-line react/sort-comp\n  shouldReloadOnVisible = false;\n\n  // This affects how the component behaves when `remountComponent` is called\n  // By default, the component gets put back into a \"loading\" state when re-fetching data.\n  // If this is true, then when we fetch data, the original ready component remains mounted\n  // and it will need to handle any additional \"reloading\" states\n  shouldReload = false;\n\n  // should `renderError` render the `detail` attribute of a 400 error\n  shouldRenderBadRequests = false;\n\n  constructor(props: P, context: any) {\n    super(props, context);\n\n    this.fetchData = wrapErrorHandling(this, this.fetchData.bind(this));\n    this.render = wrapErrorHandling(this, this.render.bind(this));\n\n    this.state = this.getDefaultState() as Readonly<S>;\n\n    this._measurement = {\n      hasMeasured: false,\n    };\n    if (props.routes && props.routes) {\n      metric.mark(`async-component-${getRouteStringFromRoutes(props.routes)}`);\n    }\n  }\n\n  componentWillMount() {\n    this.api = new Client();\n    this.fetchData();\n\n    if (this.reloadOnVisible) {\n      document.addEventListener('visibilitychange', this.visibilityReloader);\n    }\n  }\n\n  // Compatiblity shim for child classes that call super on this hook.\n  componentWillReceiveProps(_newProps: P, _newContext: any) {}\n\n  componentDidUpdate(prevProps: P, prevContext: any) {\n    const isRouterInContext = !!prevContext.router;\n    const isLocationInProps = prevProps.location !== undefined;\n\n    const currentLocation = isLocationInProps\n      ? this.props.location\n      : isRouterInContext\n      ? this.context.router.location\n      : null;\n    const prevLocation = isLocationInProps\n      ? prevProps.location\n      : isRouterInContext\n      ? prevContext.router.location\n      : null;\n\n    if (!(currentLocation && prevLocation)) {\n      return;\n    }\n\n    // Take a measurement from when this component is initially created until it finishes it's first\n    // set of API requests\n    if (\n      !this._measurement.hasMeasured &&\n      this._measurement.finished &&\n      this.props.routes\n    ) {\n      const routeString = getRouteStringFromRoutes(this.props.routes);\n      metric.measure({\n        name: 'app.component.async-component',\n        start: `async-component-${routeString}`,\n        data: {\n          route: routeString,\n          error: this._measurement.error,\n        },\n      });\n      this._measurement.hasMeasured = true;\n\n      // sentry apm profiling\n      if (typeof this.props.finishProfile === 'function') {\n        this.props.finishProfile();\n      }\n    }\n\n    // Re-fetch data when router params change.\n    if (\n      !isEqual(this.props.params, prevProps.params) ||\n      currentLocation.search !== prevLocation.search ||\n      currentLocation.state !== prevLocation.state\n    ) {\n      this.remountComponent();\n    }\n  }\n\n  componentWillUnmount() {\n    this.api.clear();\n    document.removeEventListener('visibilitychange', this.visibilityReloader);\n  }\n\n  api: Client = new Client();\n  private _measurement: any;\n\n  // XXX: cant call this getInitialState as React whines\n  getDefaultState(): AsyncComponentState {\n    const endpoints = this.getEndpoints();\n    const state = {\n      // has all data finished requesting?\n      loading: true,\n      // is the component reload\n      reloading: false,\n      // is there an error loading ANY data?\n      error: false,\n      errors: {},\n    };\n    endpoints.forEach(([stateKey, _endpoint]) => {\n      state[stateKey] = null;\n    });\n    return state;\n  }\n\n  // Check if we should measure render time for this component\n  markShouldMeasure = ({\n    remainingRequests,\n    error,\n  }: {remainingRequests?: number; error?: any} = {}) => {\n    if (!this._measurement.hasMeasured) {\n      this._measurement.finished = remainingRequests === 0;\n      this._measurement.error = error || this._measurement.error;\n    }\n  };\n\n  remountComponent = () => {\n    if (this.shouldReload) {\n      this.reloadData();\n    } else {\n      this.setState(this.getDefaultState(), this.fetchData);\n    }\n  };\n\n  visibilityReloader = () =>\n    this.shouldReloadOnVisible &&\n    !this.state.loading &&\n    !document.hidden &&\n    this.reloadData();\n\n  reloadData() {\n    this.fetchData({reloading: true});\n  }\n\n  fetchData = (extraState?: object) => {\n    const endpoints = this.getEndpoints();\n\n    if (!endpoints.length) {\n      this.setState({loading: false, error: false});\n      return;\n    }\n\n    // Cancel any in flight requests\n    this.api.clear();\n\n    this.setState({\n      loading: true,\n      error: false,\n      remainingRequests: endpoints.length,\n      ...extraState,\n    });\n\n    endpoints.forEach(([stateKey, endpoint, params, options]) => {\n      options = options || {};\n      // If you're using nested async components/views make sure to pass the\n      // props through so that the child component has access to props.location\n      const locationQuery = (this.props.location && this.props.location.query) || {};\n      let query = (params && params.query) || {};\n      // If paginate option then pass entire `query` object to API call\n      // It should only be expecting `query.cursor` for pagination\n      if (options.paginate || locationQuery.cursor) {\n        query = {...locationQuery, ...query};\n      }\n\n      this.api.request(endpoint, {\n        method: 'GET',\n        ...params,\n        query,\n        success: (data, _, jqXHR) => {\n          this.handleRequestSuccess({stateKey, data, jqXHR}, true);\n        },\n        error: error => {\n          // Allow endpoints to fail\n          // allowError can have side effects to handle the error\n          if (options.allowError && options.allowError(error)) {\n            error = null;\n          }\n          this.handleError(error, [stateKey, endpoint, params, options]);\n        },\n      });\n    });\n  };\n\n  onRequestSuccess(_resp /*{stateKey, data, jqXHR}*/) {\n    // Allow children to implement this\n  }\n\n  onRequestError(_resp, _args) {\n    // Allow children to implement this\n  }\n\n  handleRequestSuccess({stateKey, data, jqXHR}, initialRequest?: boolean) {\n    this.setState(prevState => {\n      const state = {\n        [stateKey]: data,\n        // TODO(billy): This currently fails if this request is retried by SudoModal\n        [`${stateKey}PageLinks`]: jqXHR && jqXHR.getResponseHeader('Link'),\n      };\n\n      if (initialRequest) {\n        state.remainingRequests = prevState.remainingRequests! - 1;\n        state.loading = prevState.remainingRequests! > 1;\n        state.reloading = prevState.reloading && state.loading;\n        this.markShouldMeasure({remainingRequests: state.remainingRequests});\n      }\n\n      return state;\n    });\n    this.onRequestSuccess({stateKey, data, jqXHR});\n  }\n\n  handleError(error, args) {\n    const [stateKey] = args;\n    if (error && error.responseText) {\n      Sentry.addBreadcrumb({\n        message: error.responseText,\n        category: 'xhr',\n        level: Sentry.Severity.Error,\n      });\n    }\n    this.setState(prevState => {\n      const loading = prevState.remainingRequests! > 1;\n      const state: AsyncComponentState = {\n        [stateKey]: null,\n        errors: {\n          ...prevState.errors,\n          [stateKey]: error,\n        },\n        error: prevState.error || !!error,\n        remainingRequests: prevState.remainingRequests! - 1,\n        loading,\n        reloading: prevState.reloading && loading,\n      };\n      this.markShouldMeasure({remainingRequests: state.remainingRequests, error: true});\n\n      return state;\n    });\n    this.onRequestError(error, args);\n  }\n\n  /**\n   * @deprecated use getEndpoints\n   */\n  getEndpointParams() {\n    // eslint-disable-next-line no-console\n    console.warn('getEndpointParams is deprecated');\n    return {};\n  }\n\n  /**\n   * @deprecated use getEndpoints\n   */\n  getEndpoint() {\n    // eslint-disable-next-line no-console\n    console.warn('getEndpoint is deprecated');\n    return null;\n  }\n\n  /**\n   * Return a list of endpoint queries to make.\n   *\n   * return [\n   *   ['stateKeyName', '/endpoint/', {optional: 'query params'}, {options}]\n   * ]\n   */\n  getEndpoints(): [string, string, any?, any?][] {\n    const endpoint = this.getEndpoint();\n    if (!endpoint) {\n      return [];\n    }\n    return [['data', endpoint, this.getEndpointParams()]];\n  }\n\n  renderSearchInput({stateKey, url, ...props}: RenderSearchInputArgs) {\n    const [firstEndpoint] = this.getEndpoints() || [null];\n    const stateKeyOrDefault = stateKey || (firstEndpoint && firstEndpoint[0]);\n    const urlOrDefault = url || (firstEndpoint && firstEndpoint[1]);\n    return (\n      <AsyncComponentSearchInput\n        url={urlOrDefault}\n        {...props}\n        api={this.api}\n        onSuccess={(data, jqXHR) => {\n          this.handleRequestSuccess({stateKey: stateKeyOrDefault, data, jqXHR});\n        }}\n        onError={() => {\n          this.renderError(new Error('Error with AsyncComponentSearchInput'));\n        }}\n      />\n    );\n  }\n\n  renderLoading() {\n    return <LoadingIndicator />;\n  }\n\n  renderError(error?: Error, disableLog = false, disableReport = false): React.ReactNode {\n    const {errors} = this.state;\n\n    // 401s are captured by SudoModal, but may be passed back to AsyncComponent if they close the modal without identifying\n    const unauthorizedErrors = Object.values(errors).find(\n      resp => resp && resp.status === 401\n    );\n\n    // Look through endpoint results to see if we had any 403s, means their role can not access resource\n    const permissionErrors = Object.values(errors).find(\n      resp => resp && resp.status === 403\n    );\n\n    // If all error responses have status code === 0, then show error message but don't\n    // log it to sentry\n    const shouldLogSentry =\n      !!Object.values(errors).find(resp => resp && resp.status !== 0) || disableLog;\n\n    if (unauthorizedErrors) {\n      return (\n        <LoadingError message={t('You are not authorized to access this resource.')} />\n      );\n    }\n\n    if (permissionErrors) {\n      return <PermissionDenied />;\n    }\n\n    if (this.shouldRenderBadRequests) {\n      const badRequests = Object.values(errors)\n        .filter(\n          resp =>\n            resp && resp.status === 400 && resp.responseJSON && resp.responseJSON.detail\n        )\n        .map(resp => resp.responseJSON.detail);\n\n      if (badRequests.length) {\n        return <LoadingError message={badRequests.join('\\n')} />;\n      }\n    }\n\n    return (\n      <RouteError\n        error={error}\n        component={this}\n        disableLogSentry={!shouldLogSentry}\n        disableReport={disableReport}\n        onRetry={this.remountComponent}\n      />\n    );\n  }\n\n  renderComponent() {\n    return this.state.loading && (!this.shouldReload || !this.state.reloading)\n      ? this.renderLoading()\n      : this.state.error\n      ? this.renderError(new Error('Unable to load all required endpoints'))\n      : this.renderBody();\n  }\n\n  /**\n   * Renders once all endpoints have been loaded\n   */\n  renderBody(): React.ReactNode {\n    // Allow children to implement this\n    throw new Error('Not implemented');\n  }\n\n  render() {\n    return this.renderComponent();\n  }\n}\n"],"sourceRoot":""}