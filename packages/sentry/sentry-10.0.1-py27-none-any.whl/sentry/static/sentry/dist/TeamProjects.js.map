{"version":3,"sources":["webpack:///./app/components/projectLabel.tsx","webpack:///./app/views/settings/components/settingsProjectItem.jsx","webpack:///./app/views/settings/organizationTeams/teamProjects.jsx"],"names":["render","project","className","props","slug","propTypes","isRequired","PureComponent","ProjectItem","handleToggleBookmark","isBookmarked","setState","state","this","organization","Container","key","id","BookmarkLink","onToggle","to","React","Component","styled","BookmarkStar","space","TeamProjects","error","loading","pageLinks","unlinkedProjects","linkedProjects","fetchAll","fetchTeamProjects","fetchUnlinkedProjects","location","params","orgId","teamId","api","requestPromise","query","cursor","includeAllArgs","then","jqXHR","getResponseHeader","handleLinkProject","action","request","method","success","addSuccessMessage","t","e","addErrorMessage","handleProjectSelected","selection","find","p","value","handleQueryUpdate","evt","target","prevProps","projects","canWrite","Set","access","has","length","sortProjects","map","i","StyledPanelItem","disabled","title","size","onClick","RemoveIcon","icon","onRetry","otherProjects","searchKey","label","ProjectListElement","Fragment","hasButtons","style","textTransform","items","onChange","onSelect","emptyMessage","isOpen","selectedItem","projectPanelContents","src","PanelItem","withApi","withOrganization"],"mappings":"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","file":"TeamProjects.js","sourcesContent":["import React from 'react';\n\nimport {Project} from 'app/types';\nimport {Project as ProjectPropType} from 'app/sentryTypes';\n\ntype Props = React.HTMLProps<HTMLSpanElement> & {\n  project: Project;\n};\n\nexport default class ProjectLabel extends React.PureComponent<Props> {\n  static propTypes = {\n    project: ProjectPropType.isRequired,\n  };\n\n  render() {\n    const {project, ...props} = this.props;\n\n    return (\n      <span className=\"project-label\" {...props}>\n        <span className=\"project-name\">{project.slug}</span>\n      </span>\n    );\n  }\n}\n","import styled from 'react-emotion';\nimport React from 'react';\n\nimport BookmarkStar from 'app/components/projects/bookmarkStar';\nimport Link from 'app/components/links/link';\nimport ProjectLabel from 'app/components/projectLabel';\nimport SentryTypes from 'app/sentryTypes';\nimport space from 'app/styles/space';\n\nclass ProjectItem extends React.Component {\n  static propTypes = {\n    project: SentryTypes.Project,\n    organization: SentryTypes.Organization,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isBookmarked: this.props.project.isBookmarked,\n    };\n  }\n\n  handleToggleBookmark = isBookmarked => {\n    this.setState({isBookmarked});\n  };\n\n  render() {\n    const {project, organization} = this.props;\n\n    return (\n      <Container key={project.id}>\n        <BookmarkLink\n          organization={organization}\n          project={project}\n          isBookmarked={this.state.isBookmarked}\n          onToggle={this.handleToggleBookmark}\n        />\n        <Link to={`/settings/${organization.slug}/projects/${project.slug}/`}>\n          <ProjectLabel project={project} />\n        </Link>\n      </Container>\n    );\n  }\n}\n\nconst Container = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst BookmarkLink = styled(BookmarkStar)`\n  margin-right: ${space(1)};\n  margin-top: -${space(0.25)};\n`;\n\nexport default ProjectItem;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport Tooltip from 'app/components/tooltip';\nimport withApi from 'app/utils/withApi';\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport space from 'app/styles/space';\nimport Button from 'app/components/button';\nimport DropdownAutoComplete from 'app/components/dropdownAutoComplete';\nimport DropdownButton from 'app/components/dropdownButton';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport LoadingError from 'app/components/loadingError';\nimport ProjectListItem from 'app/views/settings/components/settingsProjectItem';\nimport {Panel, PanelHeader, PanelBody, PanelItem} from 'app/components/panels';\nimport InlineSvg from 'app/components/inlineSvg';\nimport Pagination from 'app/components/pagination';\nimport {sortProjects} from 'app/utils';\nimport {t} from 'app/locale';\nimport withOrganization from 'app/utils/withOrganization';\nimport SentryTypes from 'app/sentryTypes';\n\nclass TeamProjects extends React.Component {\n  static propTypes = {\n    api: PropTypes.object.isRequired,\n    organization: SentryTypes.Organization.isRequired,\n  };\n\n  state = {\n    error: false,\n    loading: true,\n    pageLinks: null,\n    unlinkedProjects: [],\n    linkedProjects: [],\n  };\n\n  componentDidMount() {\n    this.fetchAll();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      prevProps.params.orgId !== this.props.params.orgId ||\n      prevProps.params.teamId !== this.props.params.teamId\n    ) {\n      this.fetchAll();\n    }\n\n    if (prevProps.location !== this.props.location) {\n      this.fetchTeamProjects();\n    }\n  }\n\n  fetchAll = () => {\n    this.fetchTeamProjects();\n    this.fetchUnlinkedProjects();\n  };\n\n  fetchTeamProjects = () => {\n    const {\n      location,\n      params: {orgId, teamId},\n    } = this.props;\n\n    this.setState({loading: true});\n\n    this.props.api\n      .requestPromise(`/organizations/${orgId}/projects/`, {\n        query: {\n          query: `team:${teamId}`,\n          cursor: location.query.cursor || '',\n        },\n        includeAllArgs: true,\n      })\n      .then(([linkedProjects, _, jqXHR]) => {\n        this.setState({\n          loading: false,\n          error: false,\n          linkedProjects,\n          pageLinks: jqXHR.getResponseHeader('Link'),\n        });\n      })\n      .catch(() => {\n        this.setState({loading: false, error: true});\n      });\n  };\n\n  fetchUnlinkedProjects = query => {\n    const {\n      params: {orgId, teamId},\n    } = this.props;\n\n    this.props.api\n      .requestPromise(`/organizations/${orgId}/projects/`, {\n        query: {\n          query: query ? `!team:${teamId} ${query}` : `!team:${teamId}`,\n        },\n      })\n      .then(unlinkedProjects => {\n        this.setState({unlinkedProjects});\n      });\n  };\n\n  handleLinkProject = (project, action) => {\n    const {orgId, teamId} = this.props.params;\n    this.props.api.request(`/projects/${orgId}/${project.slug}/teams/${teamId}/`, {\n      method: action === 'add' ? 'POST' : 'DELETE',\n      success: () => {\n        this.fetchAll();\n        addSuccessMessage(\n          action === 'add'\n            ? t('Successfully added project to team.')\n            : t('Successfully removed project from team')\n        );\n      },\n      error: e => {\n        addErrorMessage(t(\"Wasn't able to change project association.\"));\n      },\n    });\n  };\n\n  handleProjectSelected = selection => {\n    const project = this.state.unlinkedProjects.find(p => {\n      return p.id === selection.value;\n    });\n\n    this.handleLinkProject(project, 'add');\n  };\n\n  handleQueryUpdate = evt => {\n    this.fetchUnlinkedProjects(evt.target.value);\n  };\n\n  projectPanelContents(projects) {\n    const {organization} = this.props;\n    const access = new Set(organization.access);\n    const canWrite = access.has('org:write');\n\n    return projects.length ? (\n      sortProjects(projects).map((project, i) => (\n        <StyledPanelItem key={project.id}>\n          <ProjectListItem project={project} organization={organization} />\n          <Tooltip\n            disabled={canWrite}\n            title={t('You do not have enough permission to change project association.')}\n          >\n            <Button\n              size=\"small\"\n              disabled={!canWrite}\n              onClick={() => {\n                this.handleLinkProject(project, 'remove');\n              }}\n            >\n              <RemoveIcon /> {t('Remove')}\n            </Button>\n          </Tooltip>\n        </StyledPanelItem>\n      ))\n    ) : (\n      <EmptyMessage size=\"large\" icon=\"icon-circle-exclamation\">\n        {t(\"This team doesn't have access to any projects.\")}\n      </EmptyMessage>\n    );\n  }\n\n  render() {\n    const {linkedProjects, unlinkedProjects, error, loading} = this.state;\n\n    if (error) {\n      return <LoadingError onRetry={() => this.fetchAll()} />;\n    }\n\n    if (loading) {\n      return <LoadingIndicator />;\n    }\n\n    const access = new Set(this.props.organization.access);\n\n    const otherProjects = unlinkedProjects.map(p => {\n      return {\n        value: p.id,\n        searchKey: p.slug,\n        label: <ProjectListElement>{p.slug}</ProjectListElement>,\n      };\n    });\n\n    return (\n      <React.Fragment>\n        <Panel>\n          <PanelHeader hasButtons>\n            <div>{t('Projects')}</div>\n            <div style={{textTransform: 'none'}}>\n              {!access.has('org:write') ? (\n                <DropdownButton\n                  disabled\n                  title={t('You do not have enough permission to associate a project.')}\n                  size=\"xsmall\"\n                >\n                  {t('Add Project')}\n                </DropdownButton>\n              ) : (\n                <DropdownAutoComplete\n                  items={otherProjects}\n                  onChange={this.handleQueryUpdate}\n                  onSelect={this.handleProjectSelected}\n                  emptyMessage={t('No projects')}\n                >\n                  {({isOpen, selectedItem}) => (\n                    <DropdownButton isOpen={isOpen} size=\"xsmall\">\n                      {t('Add Project')}\n                    </DropdownButton>\n                  )}\n                </DropdownAutoComplete>\n              )}\n            </div>\n          </PanelHeader>\n          <PanelBody>{this.projectPanelContents(linkedProjects)}</PanelBody>\n        </Panel>\n        <Pagination pageLinks={this.state.pageLinks} {...this.props} />\n      </React.Fragment>\n    );\n  }\n}\n\nconst RemoveIcon = styled(props => (\n  <InlineSvg {...props} src=\"icon-circle-subtract\">\n    {t('Remove')}\n  </InlineSvg>\n))`\n  min-height: 1.25em;\n  min-width: 1.25em;\n  margin-right: ${space(1)};\n`;\n\nconst StyledPanelItem = styled(PanelItem)`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: ${space(2)};\n`;\n\nconst ProjectListElement = styled('div')`\n  padding: ${space(0.25)} 0;\n`;\n\nexport {TeamProjects};\n\nexport default withApi(withOrganization(TeamProjects));\n"],"sourceRoot":""}