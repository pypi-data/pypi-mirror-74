{"version":3,"sources":["webpack:///./app/views/organizationStats/projectTableLayout.jsx","webpack:///./app/views/organizationStats/projectTable.jsx","webpack:///./app/views/organizationStats/organizationStatsDetails.jsx"],"names":["ProjectTableLayout","styled","ProjectTableDataElement","space","overflowEllipsis","StyledProjectTitle","StyledProjectTableLayout","p","theme","borderLight","Percentage","children","props","gray2","ProjectTable","projectMap","projectTotals","orgTotal","organization","getPercent","item","total","parseInt","sort","a","b","received","map","index","project","id","projectLink","slug","key","to","value","accepted","rejected","blacklisted","OrganizationStats","point","pointIdx","chart","timeLabel","getTimeLabel","y","style","width","className","intcomma","Fragment","this","statsLoading","statsError","orgStats","projectsLoading","projectsError","pageLinks","withMargins","t","avgRate","onRetry","fetchData","points","height","label","barClasses","minHeights","gap","tooltip","renderTooltip","renderContent","React","Component"],"mappings":"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","file":"organizationStats.js","sourcesContent":["import styled from 'react-emotion';\nimport space from 'app/styles/space';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\n\nexport const ProjectTableLayout = styled('div')`\n  display: grid;\n  grid-template-columns: auto 110px 120px 100px 100px;\n  width: 100%;\n`;\n\nexport const ProjectTableDataElement = styled('div')`\n  text-align: right;\n  padding: 0 ${space(0.5)};\n  ${overflowEllipsis};\n`;\n","import {Link} from 'react-router';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport {\n  ProjectTableLayout,\n  ProjectTableDataElement,\n} from 'app/views/organizationStats/projectTableLayout';\nimport Count from 'app/components/count';\nimport space from 'app/styles/space';\n\nconst ProjectTable = ({projectMap, projectTotals, orgTotal, organization}) => {\n  const getPercent = (item, total) => {\n    if (total === 0) {\n      return '';\n    }\n    if (item === 0) {\n      return '0%';\n    }\n    return parseInt((item / total) * 100, 10) + '%';\n  };\n\n  if (!projectTotals) {\n    return <div />;\n  }\n\n  return projectTotals\n    .sort((a, b) => b.received - a.received)\n    .map((item, index) => {\n      const project = projectMap[item.id];\n\n      if (!project) {\n        return null;\n      }\n\n      const projectLink = `/settings/${organization.slug}/projects/${project.slug}/`;\n\n      return (\n        <StyledProjectTableLayout key={index}>\n          <StyledProjectTitle>\n            <Link to={projectLink}>{project.slug}</Link>\n          </StyledProjectTitle>\n          <ProjectTableDataElement>\n            <Count value={item.accepted} />\n            <Percentage>{getPercent(item.accepted, orgTotal.accepted)}</Percentage>\n          </ProjectTableDataElement>\n          <ProjectTableDataElement>\n            <Count value={item.rejected} />\n            <Percentage>{getPercent(item.rejected, orgTotal.rejected)}</Percentage>\n          </ProjectTableDataElement>\n          <ProjectTableDataElement>\n            <Count value={item.blacklisted} />\n            <Percentage>{getPercent(item.blacklisted, orgTotal.blacklisted)}</Percentage>\n          </ProjectTableDataElement>\n          <ProjectTableDataElement>\n            <Count value={item.received} />\n            <Percentage>{getPercent(item.received, orgTotal.received)}</Percentage>\n          </ProjectTableDataElement>\n        </StyledProjectTableLayout>\n      );\n    });\n};\n\nProjectTable.propTypes = {\n  projectMap: PropTypes.object.isRequired,\n  projectTotals: PropTypes.array.isRequired,\n  orgTotal: PropTypes.object.isRequired,\n  organization: PropTypes.object.isRequired,\n};\n\nconst StyledProjectTitle = styled(ProjectTableDataElement)`\n  display: flex;\n  align-items: center;\n  text-align: left;\n`;\n\nconst StyledProjectTableLayout = styled(ProjectTableLayout)`\n  padding: ${space(2)};\n\n  &:not(:last-child) {\n    border-bottom: 1px solid ${p => p.theme.borderLight};\n  }\n`;\n\nconst Percentage = styled(\n  ({children, ...props}) => children !== '' && <div {...props}>{children}</div>\n)`\n  margin-top: ${space(0.25)};\n  color: ${p => p.theme.gray2};\n  font-size: 12px;\n  line-height: 1.2;\n`;\n\nexport default ProjectTable;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {intcomma} from 'app/utils';\nimport {t} from 'app/locale';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport Pagination from 'app/components/pagination';\nimport ProjectTable from 'app/views/organizationStats/projectTable';\nimport StackedBarChart from 'app/components/stackedBarChart';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\nimport PageHeading from 'app/components/pageHeading';\nimport {\n  ProjectTableLayout,\n  ProjectTableDataElement,\n} from 'app/views/organizationStats/projectTableLayout';\nimport {PageContent} from 'app/styles/organization';\n\nclass OrganizationStats extends React.Component {\n  static propTypes = {\n    statsLoading: PropTypes.bool,\n    projectsLoading: PropTypes.bool,\n    orgTotal: PropTypes.object,\n    statsError: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n    orgStats: PropTypes.array,\n    projectTotals: PropTypes.array,\n    projectMap: PropTypes.object,\n    projectsError: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n    pageLinks: PropTypes.string,\n    organization: PropTypes.object,\n  };\n\n  renderTooltip(point, pointIdx, chart) {\n    const timeLabel = chart.getTimeLabel(point);\n    const [accepted, rejected, blacklisted] = point.y;\n\n    return (\n      <div style={{width: '150px'}}>\n        <div className=\"time-label\">{timeLabel}</div>\n        <div className=\"value-label\">\n          {intcomma(accepted)} accepted\n          {rejected > 0 && (\n            <React.Fragment>\n              <br />\n              {intcomma(rejected)} rate limited\n            </React.Fragment>\n          )}\n          {blacklisted > 0 && (\n            <React.Fragment>\n              <br />\n              {intcomma(blacklisted)} filtered\n            </React.Fragment>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  renderContent() {\n    const {\n      statsLoading,\n      orgTotal,\n      statsError,\n      orgStats,\n      projectsLoading,\n      projectTotals,\n      projectMap,\n      projectsError,\n      pageLinks,\n      organization,\n    } = this.props;\n\n    return (\n      <div>\n        <PageHeading withMargins>{t('Organization Stats')}</PageHeading>\n        <div className=\"row\">\n          <div className=\"col-md-9\">\n            <TextBlock>\n              {t(\n                `The chart below reflects events the system has received\n            across your entire organization. Events are broken down into\n            three categories: Accepted, Rate Limited, and Filtered. Rate\n            Limited events are entries that the system threw away due to quotas\n            being hit, and Filtered events are events that were blocked\n            due to your inbound data filter rules.`\n              )}\n            </TextBlock>\n          </div>\n          {!statsLoading && (\n            <div className=\"col-md-3 stats-column\">\n              <h6 className=\"nav-header\">{t('Events per minute')}</h6>\n              <p className=\"count\">{orgTotal.avgRate}</p>\n            </div>\n          )}\n        </div>\n        <div>\n          {statsLoading ? (\n            <LoadingIndicator />\n          ) : statsError ? (\n            <LoadingError onRetry={this.fetchData} />\n          ) : (\n            <Panel className=\"bar-chart\">\n              <StackedBarChart\n                points={orgStats}\n                height={150}\n                label=\"events\"\n                className=\"standard-barchart b-a-0 m-b-0\"\n                barClasses={['accepted', 'rate-limited', 'black-listed']}\n                minHeights={[2, 0, 0]}\n                gap={0.25}\n                tooltip={this.renderTooltip}\n              />\n            </Panel>\n          )}\n        </div>\n\n        <Panel>\n          <PanelHeader>\n            <ProjectTableLayout>\n              <div>{t('Project')}</div>\n              <ProjectTableDataElement>{t('Accepted')}</ProjectTableDataElement>\n              <ProjectTableDataElement>{t('Rate Limited')}</ProjectTableDataElement>\n              <ProjectTableDataElement>{t('Filtered')}</ProjectTableDataElement>\n              <ProjectTableDataElement>{t('Total')}</ProjectTableDataElement>\n            </ProjectTableLayout>\n          </PanelHeader>\n          <PanelBody>\n            {statsLoading || projectsLoading ? (\n              <LoadingIndicator />\n            ) : projectsError ? (\n              <LoadingError onRetry={this.fetchData} />\n            ) : (\n              <ProjectTable\n                projectTotals={projectTotals}\n                orgTotal={orgTotal}\n                organization={organization}\n                projectMap={projectMap}\n              />\n            )}\n          </PanelBody>\n        </Panel>\n        {pageLinks && <Pagination pageLinks={pageLinks} {...this.props} />}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <PageContent>{this.renderContent()}</PageContent>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default OrganizationStats;\n"],"sourceRoot":""}