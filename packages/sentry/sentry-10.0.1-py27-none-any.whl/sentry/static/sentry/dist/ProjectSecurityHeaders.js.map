{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/settings/projectSecurityHeaders/reportUri.jsx","webpack:///./app/components/previewFeature.jsx","webpack:///./app/views/settings/projectSecurityHeaders/index.jsx"],"names":["getTitle","render","title","this","renderComponent","icon","action","tabs","noTitleStyles","props","TitleAndActions","Icon","Title","styled","Action","propTypes","node","isRequired","bool","defaultProps","Component","p","StyledSettingsPageHeading","SettingsPageHeading","recreateRoute","to","options","lastRootIndex","routeIndex","routes","params","location","stepBack","paths","map","path","indexOf","slice","baseRoute","query","search","fullRoute","join","routeName","orgSlug","withSentry","tmpl","getSecurityDsn","keyList","endpoint","length","dsn","security","getDynamicText","value","fixed","ReportUri","orgId","projectId","type","tct","link","inline","flexibleControlStateSize","React","PreviewFeature","t","HeaderName","ProjectSecurityHeaders","setProjectNavSection","routeTitleGen","name","url","state","disablePadding","style","marginBottom","key_param","className","padding","getReports","description","key","direction","flex","align","priority","AsyncView"],"mappings":"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","file":"ProjectSecurityHeaders.js","sourcesContent":["import DocumentTitle from 'react-document-title';\nimport React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport space from 'app/styles/space';\nimport {HeaderTitle} from 'app/styles/organization';\n\ntype Props = {\n  // The title\n  title: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n\n  className?: string;\n\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // Actions on opposite end of title bar from the title\n  action?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass SettingsPageHeading extends React.Component<Props> {\n  static propTypes = {\n    icon: PropTypes.node,\n    title: PropTypes.node.isRequired,\n    action: PropTypes.node,\n    tabs: PropTypes.node,\n    // Disables font styles in the title. Allows for more custom titles.\n    noTitleStyles: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {icon, title, action, tabs, noTitleStyles, ...props} = this.props;\n    return (\n      <div {...props}>\n        <TitleAndActions>\n          {icon && <Icon>{icon}</Icon>}\n          {title && (\n            <Title tabs={tabs} styled={noTitleStyles}>\n              <HeaderTitle>{title}</HeaderTitle>\n            </Title>\n          )}\n          {action && <Action tabs={tabs}>{action}</Action>}\n        </TitleAndActions>\n\n        {tabs && <div>{tabs}</div>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p =>\n    !p.styled &&\n    `\n    font-size: 20px;\n    font-weight: bold;`};\n  margin: ${p => (p.tabs ? `${space(4)} 0 ${space(2)}` : `${space(4)} 0`)};\n  flex: 1;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{tabs?: React.ReactNode}>`\n  ${p => (p.tabs ? `margin-top: ${space(2)}` : null)};\n`;\n\nconst StyledSettingsPageHeading = styled(SettingsPageHeading)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nexport default StyledSettingsPageHeading;\n","import {Location} from 'history';\nimport {PlainRoute} from 'react-router/lib/Route';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\n\ntype Options = {\n  routes: PlainRoute[];\n  location: Location;\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(to: string | PlainRoute, options: Options): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const query = typeof location !== 'undefined' && location.search ? location.search : '';\n\n  const fullRoute = `${baseRoute.join('')}${typeof to !== 'string' ? '' : to}${query}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true\n): string {\n  const tmpl = `${routeName} - ${orgSlug}`;\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link} from 'react-router';\n\nimport {tct} from 'app/locale';\nimport Field from 'app/views/settings/components/forms/field';\nimport getDynamicText from 'app/utils/getDynamicText';\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'app/components/panels';\nimport TextCopyInput from 'app/views/settings/components/forms/textCopyInput';\n\nconst DEFAULT_ENDPOINT = 'https://sentry.example.com/api/security-report/';\n\nexport const getSecurityDsn = keyList => {\n  const endpoint = keyList.length ? keyList[0].dsn.security : DEFAULT_ENDPOINT;\n  return getDynamicText({\n    value: endpoint,\n    fixed: DEFAULT_ENDPOINT,\n  });\n};\n\nexport default class ReportUri extends React.Component {\n  static propTypes = {\n    keyList: PropTypes.array.isRequired,\n  };\n\n  render() {\n    const {orgId, projectId} = this.props.params;\n    return (\n      <Panel>\n        <PanelHeader>{'Report URI'}</PanelHeader>\n        <PanelBody>\n          <PanelAlert type=\"info\">\n            {tct(\n              \"We've automatically pulled these credentials from your available [link:Client Keys]\",\n              {\n                link: <Link to={`/settings/${orgId}/projects/${projectId}/keys/`} />,\n              }\n            )}\n          </PanelAlert>\n          <Field inline={false} flexibleControlStateSize>\n            <TextCopyInput>{getSecurityDsn(this.props.keyList)}</TextCopyInput>\n          </Field>\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport {t} from 'app/locale';\nimport PropTypes from 'prop-types';\nimport Alert from './alert';\n\nexport default class PreviewFeature extends Component {\n  static propTypes = {\n    type: PropTypes.oneOf(['success', 'error', 'warning', 'info']),\n  };\n\n  static defaultProps = {\n    type: 'info',\n  };\n\n  render() {\n    const {type, ...props} = this.props;\n\n    return (\n      <Alert type={type} icon=\"icon-labs\" {...props}>\n        {t(\n          'This feature is a preview and may change in the future. Thanks for being an early adopter!'\n        )}\n      </Alert>\n    );\n  }\n}\n","import {Box, Flex} from 'grid-emotion';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport {t, tct} from 'app/locale';\nimport AsyncView from 'app/views/asyncView';\nimport Button from 'app/components/button';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport ReportUri from 'app/views/settings/projectSecurityHeaders/reportUri';\nimport PreviewFeature from 'app/components/previewFeature';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nconst HeaderName = styled('span')`\n  font-size: 1.2em;\n`;\n\nexport default class ProjectSecurityHeaders extends AsyncView {\n  static propTypes = {\n    setProjectNavSection: PropTypes.func,\n  };\n\n  componentWillMount() {\n    super.componentWillMount();\n    this.props.setProjectNavSection('settings');\n  }\n\n  getEndpoints() {\n    const {orgId, projectId} = this.props.params;\n    return [['keyList', `/projects/${orgId}/${projectId}/keys/`]];\n  }\n\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('Security Headers'), projectId, false);\n  }\n\n  getReports() {\n    return [\n      {\n        name: 'Content Security Policy (CSP)',\n        url: recreateRoute('csp/', this.props),\n      },\n      {\n        name: 'Certificate Transparency (Expect-CT)',\n        url: recreateRoute('expect-ct/', this.props),\n      },\n      {\n        name: 'HTTP Public Key Pinning (HPKP)',\n        url: recreateRoute('hpkp/', this.props),\n      },\n    ];\n  }\n\n  renderBody() {\n    return (\n      <div>\n        <SettingsPageHeader title={t('Security Header Reports')} />\n\n        <PreviewFeature />\n\n        <ReportUri keyList={this.state.keyList} params={this.props.params} />\n\n        <Panel>\n          <PanelHeader>{t('Additional Configuration')}</PanelHeader>\n          <PanelBody disablePadding={false}>\n            <TextBlock style={{marginBottom: 20}}>\n              {tct(\n                'In addition to the [key_param] parameter, you may also pass the following within the querystring for the report URI:',\n                {\n                  key_param: <code>sentry_key</code>,\n                }\n              )}\n            </TextBlock>\n            <table className=\"table\" style={{marginBottom: 0}}>\n              <tbody>\n                <tr>\n                  <th style={{padding: '8px 5px'}}>sentry_environment</th>\n                  <td style={{padding: '8px 5px'}}>\n                    {t('The environment name (e.g. production)')}.\n                  </td>\n                </tr>\n                <tr>\n                  <th style={{padding: '8px 5px'}}>sentry_release</th>\n                  <td style={{padding: '8px 5px'}}>\n                    {t('The version of the application.')}\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </PanelBody>\n        </Panel>\n\n        <Panel>\n          <PanelHeader>{t('Supported Formats')}</PanelHeader>\n          <PanelBody>\n            {this.getReports().map(({name, description, url}) => (\n              <PanelItem key={url} p={0} direction=\"column\">\n                <Flex flex=\"1\" p={2} align=\"center\">\n                  <Box flex=\"1\">\n                    <HeaderName>{name}</HeaderName>\n                  </Box>\n                  <Button to={url} priority=\"primary\">\n                    {t('Instructions')}\n                  </Button>\n                </Flex>\n              </PanelItem>\n            ))}\n          </PanelBody>\n        </Panel>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}