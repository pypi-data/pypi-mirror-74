{"version":3,"sources":["webpack:///./app/views/settings/settingsIndex.tsx"],"names":["LINKS","flexCenter","componentDidUpdate","prevProps","organization","access","slug","setActive","loadProjects","render","user","get","isOnPremise","organizationSettingsUrl","supportLinkProps","href","to","supportText","title","this","props","GridLayout","GridPanel","HomePanelHeader","HomeLinkIcon","AvatarContainer","size","HomePanelBody","HomeLink","overlay","hideSpinner","HomeIcon","color","src","OrganizationName","ExternalHomeLink","isCentered","SupportLinkComponent","propTypes","Organization","Component","SettingsIndex","p","theme"],"mappings":"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","file":"SettingsIndex.js","sourcesContent":["import DocumentTitle from 'react-document-title';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport styled, {css} from 'react-emotion';\n\nimport {t} from 'app/locale';\nimport OrganizationAvatar from 'app/components/avatar/organizationAvatar';\nimport UserAvatar from 'app/components/avatar/userAvatar';\nimport ConfigStore from 'app/stores/configStore';\nimport ExternalLink from 'app/components/links/externalLink';\nimport {fetchOrganizationDetails} from 'app/actionCreators/organizations';\nimport InlineSvg from 'app/components/inlineSvg';\nimport Link from 'app/components/links/link';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport SentryTypes from 'app/sentryTypes';\nimport SettingsLayout from 'app/views/settings/components/settingsLayout';\nimport withLatestContext from 'app/utils/withLatestContext';\nimport {Organization} from 'app/types';\n\nconst LINKS = {\n  DOCUMENTATION: 'https://docs.sentry.io/',\n  DOCUMENTATION_PLATFORMS: 'https://docs.sentry.io/clients/',\n  DOCUMENATATION_QUICKSTART: 'https://docs.sentry.io/quickstart/',\n  DOCUMENTATION_CLI: 'https://docs.sentry.io/learn/cli/',\n  DOCUMENTATION_API: 'https://docs.sentry.io/hosted/api/',\n  API: '/settings/account/api/',\n  API_APPLICATIONS: '/settings/account/api/applications/',\n  MANAGE: '/manage/',\n  FORUM: 'https://forum.sentry.io/',\n  GITHUB_ISSUES: 'https://github.com/getsentry/sentry/issues',\n  SERVICE_STATUS: 'https://status.sentry.io/',\n};\n\nconst HOME_ICON_SIZE = 76;\n\nconst flexCenter = css`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\ntype Props = {\n  organization: Organization;\n};\n\nclass SettingsIndex extends React.Component<Props> {\n  static propTypes = {\n    organization: SentryTypes.Organization,\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    const {organization} = this.props;\n    if (prevProps.organization === organization) {\n      return;\n    }\n\n    // if there is no org in context, SidebarDropdown uses an org from `withLatestContext`\n    // (which queries the org index endpoint instead of org details)\n    // and does not have `access` info\n    if (organization && typeof organization.access === 'undefined') {\n      fetchOrganizationDetails(organization.slug, {\n        setActive: true,\n        loadProjects: true,\n      });\n    }\n  }\n\n  render() {\n    const {organization} = this.props;\n    const user = ConfigStore.get('user');\n    const isOnPremise = ConfigStore.get('isOnPremise');\n\n    const organizationSettingsUrl =\n      (organization && `/settings/${organization.slug}/`) || '';\n\n    const supportLinkProps = {\n      isOnPremise,\n      href: LINKS.FORUM,\n      to: `${organizationSettingsUrl}support`,\n    };\n    const supportText = isOnPremise ? t('Community Forums') : t('Contact Support');\n\n    return (\n      <DocumentTitle title={organization ? `${organization.slug} Settings` : 'Settings'}>\n        <SettingsLayout {...this.props}>\n          <GridLayout>\n            <GridPanel>\n              <HomePanelHeader>\n                <HomeLinkIcon to=\"/settings/account/\">\n                  <AvatarContainer>\n                    <UserAvatar user={user} size={HOME_ICON_SIZE} />\n                  </AvatarContainer>\n                  {t('My Account')}\n                </HomeLinkIcon>\n              </HomePanelHeader>\n\n              <HomePanelBody>\n                <h3>{t('Quick links')}:</h3>\n                <ul>\n                  <li>\n                    <HomeLink to=\"/settings/account/security/\">\n                      {t('Change my password')}\n                    </HomeLink>\n                  </li>\n                  <li>\n                    <HomeLink to=\"/settings/account/notifications/\">\n                      {t('Notification Preferences')}\n                    </HomeLink>\n                  </li>\n                  <li>\n                    <HomeLink to=\"/settings/account/\">{t('Change my avatar')}</HomeLink>\n                  </li>\n                </ul>\n              </HomePanelBody>\n            </GridPanel>\n\n            {/* if admin */}\n            <GridPanel>\n              {!organization && <LoadingIndicator overlay hideSpinner />}\n              <HomePanelHeader>\n                <HomeLinkIcon to={organizationSettingsUrl}>\n                  {organization ? (\n                    <AvatarContainer>\n                      <OrganizationAvatar\n                        organization={organization}\n                        size={HOME_ICON_SIZE}\n                      />\n                    </AvatarContainer>\n                  ) : (\n                    <HomeIcon color=\"green\">\n                      <InlineSvg src=\"icon-stack\" size=\"44px\" />\n                    </HomeIcon>\n                  )}\n                  <OrganizationName>\n                    {organization ? organization.slug : t('No Organization')}\n                  </OrganizationName>\n                </HomeLinkIcon>\n              </HomePanelHeader>\n              <HomePanelBody>\n                <h3>{t('Quick links')}:</h3>\n                <ul>\n                  <li>\n                    <HomeLink to={`${organizationSettingsUrl}projects/`}>\n                      {t('Projects')}\n                    </HomeLink>\n                  </li>\n                  <li>\n                    <HomeLink to={`${organizationSettingsUrl}teams/`}>\n                      {t('Teams')}\n                    </HomeLink>\n                  </li>\n                  <li>\n                    <HomeLink to={`${organizationSettingsUrl}members/`}>\n                      {t('Members')}\n                    </HomeLink>\n                  </li>\n                </ul>\n              </HomePanelBody>\n            </GridPanel>\n\n            <GridPanel>\n              <HomePanelHeader>\n                <ExternalHomeLink isCentered href={LINKS.DOCUMENTATION}>\n                  <HomeIcon color=\"orange\">\n                    <InlineSvg src=\"icon-docs\" size=\"48px\" />\n                  </HomeIcon>\n                </ExternalHomeLink>\n                <ExternalHomeLink href={LINKS.DOCUMENTATION}>\n                  {t('Documentation')}\n                </ExternalHomeLink>\n              </HomePanelHeader>\n\n              <HomePanelBody>\n                <h3>{t('Quick links')}:</h3>\n                <ul>\n                  <li>\n                    <ExternalHomeLink href={LINKS.DOCUMENATATION_QUICKSTART}>\n                      {t('Quickstart Guide')}\n                    </ExternalHomeLink>\n                  </li>\n                  <li>\n                    <ExternalHomeLink href={LINKS.DOCUMENTATION_PLATFORMS}>\n                      {t('Platforms & Frameworks')}\n                    </ExternalHomeLink>\n                  </li>\n                  <li>\n                    <ExternalHomeLink href={LINKS.DOCUMENTATION_CLI}>\n                      {t('Sentry CLI')}\n                    </ExternalHomeLink>\n                  </li>\n                </ul>\n              </HomePanelBody>\n            </GridPanel>\n\n            <GridPanel>\n              <HomePanelHeader>\n                <SupportLinkComponent isCentered {...supportLinkProps}>\n                  <HomeIcon color=\"purple\">\n                    <InlineSvg src=\"icon-support\" size=\"48px\" />\n                  </HomeIcon>\n                  {t('Support')}\n                </SupportLinkComponent>\n              </HomePanelHeader>\n\n              <HomePanelBody>\n                <h3>{t('Quick links')}:</h3>\n                <ul>\n                  <li>\n                    <SupportLinkComponent {...supportLinkProps}>\n                      {supportText}\n                    </SupportLinkComponent>\n                  </li>\n                  <li>\n                    <ExternalHomeLink href={LINKS.GITHUB_ISSUES}>\n                      {t('Sentry on GitHub')}\n                    </ExternalHomeLink>\n                  </li>\n                  <li>\n                    <ExternalHomeLink href={LINKS.SERVICE_STATUS}>\n                      {t('Service Status')}\n                    </ExternalHomeLink>\n                  </li>\n                </ul>\n              </HomePanelBody>\n            </GridPanel>\n\n            <GridPanel>\n              <HomePanelHeader>\n                <HomeLinkIcon to={LINKS.API}>\n                  <HomeIcon>\n                    <InlineSvg src=\"icon-lock\" size=\"48px\" />\n                  </HomeIcon>\n                  {t('API Keys')}\n                </HomeLinkIcon>\n              </HomePanelHeader>\n\n              <HomePanelBody>\n                <h3>{t('Quick links')}:</h3>\n                <ul>\n                  <li>\n                    <HomeLink to={LINKS.API}>{t('Auth Tokens')}</HomeLink>\n                  </li>\n                  <li>\n                    <HomeLink to={LINKS.API_APPLICATIONS}>{t('Applications')}</HomeLink>\n                  </li>\n                  <li>\n                    <ExternalHomeLink href={LINKS.DOCUMENTATION_API}>\n                      {t('Documentation')}\n                    </ExternalHomeLink>\n                  </li>\n                </ul>\n              </HomePanelBody>\n            </GridPanel>\n          </GridLayout>\n        </SettingsLayout>\n      </DocumentTitle>\n    );\n  }\n}\n\nexport {SettingsIndex};\nexport default withLatestContext(SettingsIndex);\n\nconst HomePanelHeader = styled(PanelHeader)`\n  background: #fff;\n  flex-direction: column;\n  text-align: center;\n  justify-content: center;\n  font-size: 18px;\n  text-transform: unset;\n  padding: 35px 30px;\n`;\n\nconst HomePanelBody = styled(PanelBody)`\n  padding: 30px;\n\n  h3 {\n    font-size: 14px;\n  }\n\n  ul {\n    margin: 0;\n    li {\n      line-height: 1.6;\n      /* Bullet color */\n      color: ${p => p.theme.gray1};\n    }\n  }\n`;\n\nconst HomeIcon = styled('div')<{color?: string}>`\n  background: ${p => p.theme[p.color || 'gray2']};\n  color: #fff;\n  width: ${HOME_ICON_SIZE}px;\n  height: ${HOME_ICON_SIZE}px;\n  border-radius: ${HOME_ICON_SIZE}px;\n  margin-bottom: 20px;\n\n  ${InlineSvg} {\n    margin-top: 14px;\n  }\n`;\n\ntype CenterableProps = {\n  isCentered?: boolean;\n};\n\nconst HomeLink = styled(Link)`\n  color: ${p => p.theme.purple};\n\n  &:hover {\n    color: ${p => p.theme.purpleDark};\n  }\n`;\n\nconst HomeLinkIcon = styled(HomeLink)`\n  overflow: hidden;\n  width: 100%;\n  ${flexCenter};\n`;\n\nconst ExternalHomeLink = styled(\n  ({\n    isCentered,\n    ...props\n  }: CenterableProps & React.ComponentProps<typeof ExternalLink>) => (\n    <ExternalLink {...props} />\n  )\n)<CenterableProps>`\n  color: ${p => p.theme.purple};\n\n  &:hover {\n    color: ${p => p.theme.purpleDark};\n  }\n\n  ${p => p.isCentered && flexCenter};\n`;\n\ntype SupportLinkProps = {\n  isOnPremise: boolean;\n  href: string;\n  to: string;\n  isCentered?: boolean;\n} & (\n  | {isOnPremise: true} & React.ComponentProps<typeof ExternalLink>\n  | {isOnPremise: false} & React.ComponentProps<typeof HomeLink>);\n\nconst SupportLinkComponent = ({\n  isCentered,\n  isOnPremise,\n  href,\n  to,\n  ...props\n}: SupportLinkProps) => {\n  if (isOnPremise) {\n    return <ExternalHomeLink isCentered={isCentered} href={href} {...props} />;\n  }\n  return <HomeLink to={to} {...props} />;\n};\n\nSupportLinkComponent.propTypes = {\n  isOnPremise: PropTypes.bool,\n  href: PropTypes.string,\n  to: PropTypes.string,\n  isCentered: PropTypes.bool,\n  children: PropTypes.node,\n};\n\nconst AvatarContainer = styled('div')`\n  margin-bottom: 20px;\n`;\n\nconst OrganizationName = styled('div')`\n  line-height: 1.1em;\n\n  ${overflowEllipsis};\n`;\n\nconst GridLayout = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-gap: 16px;\n`;\n\nconst GridPanel = styled(Panel)`\n  margin-bottom: 0;\n`;\n"],"sourceRoot":""}