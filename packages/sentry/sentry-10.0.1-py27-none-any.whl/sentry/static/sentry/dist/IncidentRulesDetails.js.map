{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/incidentRules/details.tsx"],"names":["getTitle","render","title","this","renderComponent","onRequestSuccess","data","props","params","orgId","incidentRuleId","setState","loading","resp","triggers","map","trigger","api","requestPromise","id","actions","Promise","all","actionsTriggersTuples","Map","getActions","rule","get","getDefaultState","getEndpoints","renderBody","state","IncidentRulesDetails"],"mappings":"yIAQA,2B,+CAgBA,OAbU,iBACR,YAAAA,SAAA,WACE,MAAO,IAGT,YAAAC,OAAA,WACE,IAAMC,EAAQC,KAAKH,WACnB,OACE,kBAAC,IAAa,CAACE,OAAUA,EAAWA,EAAK,MAAQ,IAAE,UAChDC,KAAKC,oBAId,EAhBA,C,QAGU,G,sHCeV,yE,OAoBE,EAAAC,iBAAmB,SAAO,G,IAACC,EAAA,EAAAA,K,gIACnB,EAA0BH,KAAKI,MAAMC,OAApCC,EAAK,QAAEC,EAAc,iBAG5BP,KAAKQ,SAAS,CAACC,SAAS,I,iBAYyB,O,sBATzCC,EAAOP,EAAKQ,SAASC,KAAI,SAAMC,GAAO,+C,kEAC1B,SAAMb,KAAKc,IAAIC,eAC7B,kBAAkBT,EAAK,gBAAgBC,EAAc,aACnDM,EAAQG,GAAE,c,OAGd,OALMC,EAAU,SAKhB,GAAO,CAACJ,EAAQG,GAAIC,cAGyB,GAAMC,QAAQC,IAAIT,I,cAA3DU,EAAyC,SAC/CpB,KAAKQ,SAAS,CACZS,QAAS,IAAII,IAAID,K,6BAGnB,YAAgB,YAAE,4B,oBAEpBpB,KAAKQ,SAAS,CAACC,SAAS,I,YAG1B,EAAAa,WAAa,SAACC,EAAMN,GAClB,IAAMN,EAAWY,EAAKZ,SAASC,KAAI,SAAAC,GAAW,kCACzCA,GAAO,CACVI,QAASA,EAAQO,IAAIX,EAAQG,KAFe,QAK9C,kCACKO,GAAI,CACPZ,SAAQ,K,EAgBd,OAtEmC,iBACjC,YAAAc,gBAAA,WACE,kCACK,YAAMA,gBAAe,YAAE,CAC1BR,QAAS,IAAII,OAIjB,YAAAK,aAAA,WACQ,wBAEN,MAAO,CACL,CAAC,OAAQ,kBAHJ,EAAApB,MAG2B,gBAHpB,EAAAC,eAGkD,OA8ClE,YAAAoB,WAAA,WACS,IAAApB,EAAA,kBAAAA,eACAgB,EAAA,WAAAA,KAEP,OACE,kBAAC,IAAQ,eACHvB,KAAKI,MAAK,CACdG,eAAgBA,EAChBgB,KAAMvB,KAAKsB,WAAWC,EAAMvB,KAAK4B,MAAMX,aAI/C,EAtEA,CAAmC,KAwEpB,sBAAiBY","file":"IncidentRulesDetails.js","sourcesContent":["import DocumentTitle from 'react-document-title';\nimport React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import {RouteComponentProps} from 'react-router/lib/Router';\nimport React from 'react';\n\nimport {IncidentRule} from 'app/views/settings/incidentRules/types';\nimport {Organization} from 'app/types';\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {t} from 'app/locale';\nimport AsyncView from 'app/views/asyncView';\nimport RuleForm from 'app/views/settings/incidentRules/ruleForm';\nimport withOrganization from 'app/utils/withOrganization';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n  incidentRuleId: string;\n};\n\ntype Props = {\n  organization: Organization;\n} & RouteComponentProps<RouteParams, {}>;\n\ntype State = {\n  rule: IncidentRule;\n  actions: Map<string, any>; // This is temp\n} & AsyncView['state'];\n\nclass IncidentRulesDetails extends AsyncView<Props, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      actions: new Map(),\n    };\n  }\n\n  getEndpoints() {\n    const {orgId, incidentRuleId} = this.props.params;\n\n    return [\n      ['rule', `/organizations/${orgId}/alert-rules/${incidentRuleId}/`] as [\n        string,\n        string\n      ],\n    ];\n  }\n\n  // XXX(billy): This is temporary, ideally we want actions fetched with triggers?\n  onRequestSuccess = async ({data}) => {\n    const {orgId, incidentRuleId} = this.props.params;\n\n    // fetch actions for trigger\n    this.setState({loading: true});\n\n    try {\n      const resp = data.triggers.map(async trigger => {\n        const actions = await this.api.requestPromise(\n          `/organizations/${orgId}/alert-rules/${incidentRuleId}/triggers/${\n            trigger.id\n          }/actions/`\n        );\n        return [trigger.id, actions];\n      });\n\n      const actionsTriggersTuples: [string, any][] = await Promise.all(resp);\n      this.setState({\n        actions: new Map(actionsTriggersTuples),\n      });\n    } catch (_err) {\n      addErrorMessage(t('Unable to fetch actions'));\n    }\n    this.setState({loading: false});\n  };\n\n  getActions = (rule, actions) => {\n    const triggers = rule.triggers.map(trigger => ({\n      ...trigger,\n      actions: actions.get(trigger.id) || [],\n    }));\n\n    return {\n      ...rule,\n      triggers,\n    };\n  };\n\n  renderBody() {\n    const {incidentRuleId} = this.props.params;\n    const {rule} = this.state;\n\n    return (\n      <RuleForm\n        {...this.props}\n        incidentRuleId={incidentRuleId}\n        rule={this.getActions(rule, this.state.actions)}\n      />\n    );\n  }\n}\n\nexport default withOrganization(IncidentRulesDetails);\n"],"sourceRoot":""}