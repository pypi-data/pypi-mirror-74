{"version":3,"sources":["webpack:///./app/components/dateTime.tsx","webpack:///./app/components/deviceName.tsx","webpack:///./app/components/fileSize.tsx","webpack:///./app/components/searchBar.jsx","webpack:///./app/utils/attachmentUrl.tsx","webpack:///./app/components/eventsTable/eventsTableRow.jsx","webpack:///./app/components/eventsTable/eventsTable.jsx","webpack:///./app/views/organizationGroupDetails/groupEvents.jsx"],"names":["getFormat","clock24Hours","dateOnly","timeOnly","seconds","shortDate","render","date","utc","user","get","options","format","this","carriedProps","tz","timezone","propTypes","any","isRequired","bool","defaultProps","Component","deviceNameMapper","model","iOSDeviceList","modelIdentifier","split","modelId","splice","join","modelName","generationByIdentifier","undefined","loadDeviceListModule","props","state","componentDidMount","_isMounted","then","setState","componentWillUnmount","children","string","className","bytes","value","fixed","SearchBar","args","blur","searchInputRef","current","onSubmit","evt","preventDefault","onSearch","query","clearSearch","defaultQuery","onQueryFocus","dropdownVisible","onQueryBlur","onQueryChange","target","React","createRef","nextProps","classNames","type","placeholder","name","ref","autoComplete","onBlur","onChange","onClick","PureComponent","hasAttachmentsRole","isSuperuser","availableRoles","attachmentsRole","role","Array","isArray","roleIds","map","r","requiredIndex","indexOf","getDownloadUrl","attachment","organization","eventId","projectId","slug","id","Organization","EventAttachment","func","AttachmentUrl","EventsTableRow","event","crashFile","crashFileType","url","href","size","orgId","groupId","tagList","hasUser","tagMap","tags","forEach","tag","key","link","to","dateCreated","title","substr","renderCrashFileLink","gravatar","email","withOrganization","EventsTable","events","find","t","GroupEvents","handleSearch","targetQueryParams","location","params","browserHistory","push","pathname","fetchData","loading","error","pick","limit","api","request","method","success","data","_","jqXHR","eventList","pageLinks","getResponseHeader","err","parseApiError","queryParams","search","group","filter","project","message","onRetry","length","renderResults","renderNoQueryResults","renderEmpty","style","marginBottom","renderBody","withApi"],"mappings":"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","file":"OrganizationGroupEvents.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport moment from 'moment-timezone';\n\nimport ConfigStore from 'app/stores/configStore';\n\ntype Props = {\n  date: moment.MomentInput;\n  dateOnly?: boolean;\n  timeOnly?: boolean;\n  shortDate?: boolean;\n  seconds?: boolean;\n  utc?: boolean;\n};\n\nclass DateTime extends React.Component<Props> {\n  static propTypes = {\n    date: PropTypes.any.isRequired,\n    dateOnly: PropTypes.bool,\n    timeOnly: PropTypes.bool,\n    shortDate: PropTypes.bool,\n    seconds: PropTypes.bool,\n    utc: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    seconds: true,\n  };\n\n  getFormat = ({clock24Hours}: {clock24Hours: boolean}): string => {\n    const {dateOnly, timeOnly, seconds, shortDate} = this.props;\n\n    // October 26, 2017\n    if (dateOnly) {\n      return 'LL';\n    }\n\n    // 4:57 PM\n    if (timeOnly) {\n      return 'LT';\n    }\n\n    if (shortDate) {\n      return 'MM/DD/YYYY';\n    }\n\n    if (clock24Hours) {\n      return 'MMMM D YYYY HH:mm:ss z';\n    }\n\n    // Oct 26, 2017 11:30:30 AM\n    if (seconds) {\n      return 'll LTS z';\n    }\n\n    // Default is Oct 26, 2017 11:30 AM\n    return 'lll';\n  };\n\n  render() {\n    const {\n      date,\n      seconds, // eslint-disable-line no-unused-vars\n      shortDate, // eslint-disable-line no-unused-vars\n      dateOnly, // eslint-disable-line no-unused-vars\n      utc,\n      timeOnly: _timeOnly, // eslint-disable-line no-unused-vars\n      ...carriedProps\n    } = this.props;\n    const user = ConfigStore.get('user');\n    const options = user ? user.options : {};\n    const format = this.getFormat(options);\n\n    return (\n      <time {...carriedProps}>\n        {utc\n          ? moment.utc(date).format(format)\n          : moment.tz(date, options.timezone).format(format)}\n      </time>\n    );\n  }\n}\n\nexport default DateTime;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport {IOSDeviceList} from 'app/types/iOSDeviceList';\n\nexport function deviceNameMapper(model: string, iOSDeviceList): string {\n  const modelIdentifier = model.split(' ')[0];\n  const modelId = model\n    .split(' ')\n    .splice(1)\n    .join(' ');\n  const modelName = iOSDeviceList.generationByIdentifier(modelIdentifier);\n  return modelName === undefined ? model : modelName + ' ' + modelId;\n}\n\nexport async function loadDeviceListModule() {\n  return import(/* webpackChunkName: \"iOSDeviceList\" */ 'ios-device-list');\n}\n\ntype Props = {\n  children?: string;\n};\n\ntype State = {\n  iOSDeviceList: IOSDeviceList | null;\n};\n/**\n * This is used to map iOS Device Names to model name.\n * This asynchronously loads the ios-device-list library because of its size\n */\nexport default class DeviceName extends React.Component<Props, State> {\n  static propTypes = {\n    children: PropTypes.string,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      iOSDeviceList: null,\n    };\n  }\n\n  private _isMounted?: boolean;\n\n  componentDidMount() {\n    // This is to handle react's warning on calling setState for unmounted components\n    // Since we can't cancel promises, we need to do this\n    this._isMounted = true;\n\n    // This library is very big, so we are codesplitting it based on size and\n    // the relatively small utility this library provides\n    loadDeviceListModule().then(iOSDeviceList => {\n      if (!this._isMounted) {\n        return;\n      }\n\n      this.setState({iOSDeviceList});\n    });\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    const {children} = this.props;\n    const {iOSDeviceList} = this.state;\n\n    // Children can be undefined, need to return null or else react throws\n    if (!children) {\n      return null;\n    }\n\n    // If library has not loaded yet, then just render the raw model string, better than empty\n    if (!iOSDeviceList) {\n      return children;\n    }\n\n    return (\n      <span data-test-id=\"loaded-device-name\">\n        {deviceNameMapper(children, iOSDeviceList)}\n      </span>\n    );\n  }\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport {formatBytes} from 'app/utils';\nimport getDynamicText from 'app/utils/getDynamicText';\n\ntype Props = {\n  className?: string;\n  bytes: number;\n};\n\nfunction FileSize(props: Props) {\n  const {className, bytes} = props;\n\n  return (\n    <span className={className}>\n      {getDynamicText({value: formatBytes(bytes), fixed: 'xx KB'})}\n    </span>\n  );\n}\n\nFileSize.propTypes = {\n  className: PropTypes.string,\n  bytes: PropTypes.number.isRequired,\n};\n\nexport default FileSize;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\n\nclass SearchBar extends React.PureComponent {\n  static propTypes = {\n    query: PropTypes.string,\n    defaultQuery: PropTypes.string,\n    onSearch: PropTypes.func,\n    placeholder: PropTypes.string,\n  };\n\n  static defaultProps = {\n    defaultQuery: '',\n    query: '',\n    onSearch: function() {},\n  };\n\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      query: this.props.query || this.props.defaultQuery,\n    };\n    this.searchInputRef = React.createRef();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.query !== this.props.query) {\n      this.setState({\n        query: nextProps.query,\n      });\n    }\n  }\n\n  blur = () => {\n    this.searchInputRef.current.blur();\n  };\n\n  onSubmit = evt => {\n    evt.preventDefault();\n    this.blur();\n    this.props.onSearch(this.state.query);\n  };\n\n  clearSearch = () => {\n    this.setState({query: this.props.defaultQuery}, () =>\n      this.props.onSearch(this.state.query)\n    );\n  };\n\n  onQueryFocus = () => {\n    this.setState({\n      dropdownVisible: true,\n    });\n  };\n\n  onQueryBlur = () => {\n    this.setState({dropdownVisible: false});\n  };\n\n  onQueryChange = evt => {\n    this.setState({query: evt.target.value});\n  };\n\n  render() {\n    const {className} = this.props;\n    return (\n      <div className={classNames('search', className)}>\n        <form className=\"form-horizontal\" onSubmit={this.onSubmit}>\n          <div>\n            <input\n              type=\"text\"\n              className=\"search-input form-control\"\n              placeholder={this.props.placeholder}\n              name=\"query\"\n              ref={this.searchInputRef}\n              autoComplete=\"off\"\n              value={this.state.query}\n              onBlur={this.onQueryBlur}\n              onChange={this.onQueryChange}\n            />\n            <span className=\"icon-search\" />\n            {this.state.query !== this.props.defaultQuery && (\n              <div>\n                <a className=\"search-clear-form\" onClick={this.clearSearch}>\n                  <span className=\"icon-circle-cross\" />\n                </a>\n              </div>\n            )}\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {Organization, EventAttachment} from 'app/types';\nimport ConfigStore from 'app/stores/configStore';\nimport withOrganization from 'app/utils/withOrganization';\nimport SentryTypes from 'app/sentryTypes';\n\ntype Props = {\n  organization: Organization;\n  projectId: string;\n  eventId: string;\n  attachment: EventAttachment;\n  children: (downloadUrl: string | null) => React.ReactNode;\n};\n\nclass AttachmentUrl extends React.PureComponent<Props> {\n  static propTypes = {\n    organization: SentryTypes.Organization.isRequired,\n    projectId: PropTypes.string.isRequired,\n    eventId: PropTypes.string.isRequired,\n    attachment: SentryTypes.EventAttachment.isRequired,\n    children: PropTypes.func.isRequired,\n  };\n\n  hasAttachmentsRole() {\n    const user = ConfigStore.get('user');\n    if (!user) {\n      return false;\n    }\n\n    if (user.isSuperuser) {\n      return true;\n    }\n\n    const {availableRoles, attachmentsRole, role} = this.props.organization;\n    if (!Array.isArray(availableRoles)) {\n      return false;\n    }\n\n    const roleIds = availableRoles.map(r => r.id);\n    const requiredIndex = roleIds.indexOf(attachmentsRole);\n    const currentIndex = roleIds.indexOf(role || '');\n    return currentIndex >= requiredIndex;\n  }\n\n  getDownloadUrl() {\n    const {attachment, organization, eventId, projectId} = this.props;\n    return `/api/0/projects/${\n      organization.slug\n    }/${projectId}/events/${eventId}/attachments/${attachment.id}/`;\n  }\n\n  render() {\n    const {children} = this.props;\n    return children(this.hasAttachmentsRole() ? this.getDownloadUrl() : null);\n  }\n}\n\nexport default withOrganization(AttachmentUrl);\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport AttachmentUrl from 'app/utils/attachmentUrl';\nimport UserAvatar from 'app/components/avatar/userAvatar';\nimport DateTime from 'app/components/dateTime';\nimport DeviceName from 'app/components/deviceName';\nimport FileSize from 'app/components/fileSize';\nimport GlobalSelectionLink from 'app/components/globalSelectionLink';\nimport SentryTypes from 'app/sentryTypes';\nimport withOrganization from 'app/utils/withOrganization';\n\nclass EventsTableRow extends React.Component {\n  static propTypes = {\n    hasUser: PropTypes.bool,\n    orgId: PropTypes.string.isRequired,\n    groupId: PropTypes.string.isRequired,\n    projectId: PropTypes.string,\n    event: SentryTypes.Event.isRequired,\n    tagList: PropTypes.arrayOf(SentryTypes.Tag),\n  };\n\n  renderCrashFileLink() {\n    const {event, projectId} = this.props;\n    if (!event.crashFile) {\n      return null;\n    }\n\n    const crashFileType =\n      event.crashFile.type === 'event.minidump' ? 'Minidump' : 'Crash file';\n\n    return (\n      <AttachmentUrl\n        projectId={projectId}\n        eventId={event.id}\n        attachment={event.crashFile}\n      >\n        {url =>\n          url && (\n            <small>\n              {crashFileType}: <a href={`${url}?download=1`}>{event.crashFile.name}</a> (\n              <FileSize bytes={event.crashFile.size} />)\n            </small>\n          )\n        }\n      </AttachmentUrl>\n    );\n  }\n\n  render() {\n    const {className, event, orgId, groupId, tagList, hasUser} = this.props;\n    const tagMap = {};\n    event.tags.forEach(tag => {\n      tagMap[tag.key] = tag.value;\n    });\n    const link = `/organizations/${orgId}/issues/${groupId}/events/${event.id}/`;\n\n    return (\n      <tr key={event.id} className={className}>\n        <td>\n          <h5>\n            <GlobalSelectionLink to={link}>\n              <DateTime date={event.dateCreated} />\n            </GlobalSelectionLink>\n            <small>{event.title.substr(0, 100)}</small>\n            {this.renderCrashFileLink()}\n          </h5>\n        </td>\n\n        {hasUser && (\n          <td className=\"event-user table-user-info\">\n            {event.user ? (\n              <div>\n                <UserAvatar\n                  user={event.user}\n                  size={24}\n                  className=\"avatar\"\n                  gravatar={false}\n                />\n                {event.user.email}\n              </div>\n            ) : (\n              <span>—</span>\n            )}\n          </td>\n        )}\n\n        {tagList.map(tag => {\n          return (\n            <td key={tag.key}>\n              <div>\n                {tag.key === 'device' ? (\n                  <DeviceName>{tagMap[tag.key]}</DeviceName>\n                ) : (\n                  tagMap[tag.key]\n                )}\n              </div>\n            </td>\n          );\n        })}\n      </tr>\n    );\n  }\n}\n\nexport {EventsTableRow};\nexport default withOrganization(EventsTableRow);\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {t} from 'app/locale';\nimport CustomPropTypes from 'app/sentryTypes';\nimport EventsTableRow from 'app/components/eventsTable/eventsTableRow';\n\nclass EventsTable extends React.Component {\n  static propTypes = {\n    events: PropTypes.arrayOf(CustomPropTypes.Event),\n    tagList: PropTypes.arrayOf(CustomPropTypes.Tag),\n    orgId: PropTypes.string.isRequired,\n    projectId: PropTypes.string.isRequired,\n    groupId: PropTypes.string.isRequired,\n  };\n\n  render() {\n    const {events, tagList, orgId, projectId, groupId} = this.props;\n\n    const hasUser = !!events.find(event => event.user);\n\n    return (\n      <table className=\"table events-table\">\n        <thead>\n          <tr>\n            <th>{t('ID')}</th>\n            {hasUser && <th>{t('User')}</th>}\n\n            {tagList.map(tag => {\n              return <th key={tag.key}>{tag.name}</th>;\n            })}\n          </tr>\n        </thead>\n        <tbody>\n          {events.map(event => {\n            return (\n              <EventsTableRow\n                key={event.id}\n                event={event}\n                orgId={orgId}\n                projectId={projectId}\n                groupId={groupId}\n                tagList={tagList}\n                hasUser={hasUser}\n              />\n            );\n          })}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default EventsTable;\n","import PropTypes from 'prop-types';\nimport {browserHistory} from 'react-router';\nimport React from 'react';\nimport pick from 'lodash/pick';\n\nimport SentryTypes from 'app/sentryTypes';\nimport {Panel, PanelBody} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport withApi from 'app/utils/withApi';\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport EventsTable from 'app/components/eventsTable/eventsTable';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport Pagination from 'app/components/pagination';\nimport SearchBar from 'app/components/searchBar';\nimport parseApiError from 'app/utils/parseApiError';\n\nclass GroupEvents extends React.Component {\n  static propTypes = {\n    api: PropTypes.object,\n    group: SentryTypes.Group.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n\n    const queryParams = this.props.location.query;\n    this.state = {\n      eventList: [],\n      loading: true,\n      error: false,\n      pageLinks: '',\n      query: queryParams.query || '',\n    };\n  }\n\n  componentWillMount() {\n    this.fetchData();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.location.search !== nextProps.location.search) {\n      const queryParams = nextProps.location.query;\n\n      this.setState(\n        {\n          query: queryParams.query,\n        },\n        this.fetchData\n      );\n    }\n  }\n\n  handleSearch = query => {\n    const targetQueryParams = {...this.props.location.query};\n    targetQueryParams.query = query;\n    const {groupId, orgId} = this.props.params;\n\n    browserHistory.push({\n      pathname: `/organizations/${orgId}/issues/${groupId}/events/`,\n      query: targetQueryParams,\n    });\n  };\n\n  fetchData = () => {\n    this.setState({\n      loading: true,\n      error: false,\n    });\n\n    const query = {\n      ...pick(this.props.location.query, ['cursor', 'environment']),\n      limit: 50,\n      query: this.state.query,\n    };\n\n    this.props.api.request(`/issues/${this.props.params.groupId}/events/`, {\n      query,\n      method: 'GET',\n      success: (data, _, jqXHR) => {\n        this.setState({\n          eventList: data,\n          error: false,\n          loading: false,\n          pageLinks: jqXHR.getResponseHeader('Link'),\n        });\n      },\n      error: err => {\n        this.setState({\n          error: parseApiError(err),\n          loading: false,\n        });\n      },\n    });\n  };\n\n  renderNoQueryResults() {\n    return (\n      <EmptyStateWarning>\n        <p>{t('Sorry, no events match your search query.')}</p>\n      </EmptyStateWarning>\n    );\n  }\n\n  renderEmpty() {\n    return (\n      <EmptyStateWarning>\n        <p>{t(\"There don't seem to be any events yet.\")}</p>\n      </EmptyStateWarning>\n    );\n  }\n\n  renderResults() {\n    const {group, params} = this.props;\n    const tagList = group.tags.filter(tag => tag.key !== 'user') || [];\n\n    return (\n      <EventsTable\n        tagList={tagList}\n        events={this.state.eventList}\n        orgId={params.orgId}\n        projectId={group.project.slug}\n        groupId={params.groupId}\n      />\n    );\n  }\n\n  renderBody() {\n    let body;\n\n    if (this.state.loading) {\n      body = <LoadingIndicator />;\n    } else if (this.state.error) {\n      body = <LoadingError message={this.state.error} onRetry={this.fetchData} />;\n    } else if (this.state.eventList.length > 0) {\n      body = this.renderResults();\n    } else if (this.state.query && this.state.query !== '') {\n      body = this.renderNoQueryResults();\n    } else {\n      body = this.renderEmpty();\n    }\n\n    return body;\n  }\n\n  render() {\n    return (\n      <div>\n        <div style={{marginBottom: 20}}>\n          <SearchBar\n            defaultQuery=\"\"\n            placeholder={t('search event id, message, or tags')}\n            query={this.state.query}\n            onSearch={this.handleSearch}\n          />\n        </div>\n        <Panel className=\"event-list\">\n          <PanelBody>{this.renderBody()}</PanelBody>\n        </Panel>\n        <Pagination pageLinks={this.state.pageLinks} />\n      </div>\n    );\n  }\n}\n\nexport {GroupEvents};\n\nexport default withApi(GroupEvents);\n"],"sourceRoot":""}