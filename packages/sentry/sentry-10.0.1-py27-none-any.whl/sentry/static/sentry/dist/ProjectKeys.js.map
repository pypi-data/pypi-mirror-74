{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/components/clippedBox.jsx","webpack:///./app/views/settings/project/projectKeys/projectKeyCredentials.tsx","webpack:///./app/views/settings/project/projectKeys/list/keyRow.tsx","webpack:///./app/views/settings/project/projectKeys/list/index.tsx"],"names":["getTitle","render","title","this","renderComponent","icon","action","tabs","noTitleStyles","props","TitleAndActions","Icon","Title","styled","Action","propTypes","node","isRequired","bool","defaultProps","Component","p","StyledSettingsPageHeading","SettingsPageHeading","recreateRoute","to","options","lastRootIndex","routeIndex","routes","params","location","stepBack","paths","map","path","indexOf","slice","baseRoute","query","search","fullRoute","join","routeName","orgSlug","withSentry","tmpl","ClippedBox","args","reveal","e","stopPropagation","setState","clipped","revealed","state","defaultClipped","renderedHeight","ReactDOM","findDOMNode","offsetHeight","clipHeight","className","classnames","style","maxHeight","children","onClick","priority","size","btnText","React","t","DEFAULT_PROPS","showDsn","showDsnPublic","showSecurityEndpoint","showMinidump","showUnreal","showPublicKey","showSecretKey","showProjectId","projectId","data","Fragment","label","inline","flexibleControlStateSize","value","dsn","fixed","help","secret","security","link","href","minidump","unreal","handleRemove","onRemove","handleEnable","onToggle","handleDisable","access","editUrl","id","controlActive","has","controls","key","isActive","disabled","onConfirm","confirmText","message","ClientKeyItemPanel","hasButtons","PanelHeaderLink","Controls","c","n","StyledPanelBody","theme","space","handleRemoveKey","oldKeyList","keyList","filter","orgId","api","requestPromise","method","handleToggleKey","handleCreateKey","routeTitle","getEndpoints","renderEmpty","description","renderResults","organization","Set","pageLinks","keyListPageLinks","renderBody","isEmpty","length","code","withOrganization","withProject"],"mappings":"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","file":"ProjectKeys.js","sourcesContent":["import DocumentTitle from 'react-document-title';\nimport React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport space from 'app/styles/space';\nimport {HeaderTitle} from 'app/styles/organization';\n\ntype Props = {\n  // The title\n  title: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n\n  className?: string;\n\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // Actions on opposite end of title bar from the title\n  action?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass SettingsPageHeading extends React.Component<Props> {\n  static propTypes = {\n    icon: PropTypes.node,\n    title: PropTypes.node.isRequired,\n    action: PropTypes.node,\n    tabs: PropTypes.node,\n    // Disables font styles in the title. Allows for more custom titles.\n    noTitleStyles: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {icon, title, action, tabs, noTitleStyles, ...props} = this.props;\n    return (\n      <div {...props}>\n        <TitleAndActions>\n          {icon && <Icon>{icon}</Icon>}\n          {title && (\n            <Title tabs={tabs} styled={noTitleStyles}>\n              <HeaderTitle>{title}</HeaderTitle>\n            </Title>\n          )}\n          {action && <Action tabs={tabs}>{action}</Action>}\n        </TitleAndActions>\n\n        {tabs && <div>{tabs}</div>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p =>\n    !p.styled &&\n    `\n    font-size: 20px;\n    font-weight: bold;`};\n  margin: ${p => (p.tabs ? `${space(4)} 0 ${space(2)}` : `${space(4)} 0`)};\n  flex: 1;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{tabs?: React.ReactNode}>`\n  ${p => (p.tabs ? `margin-top: ${space(2)}` : null)};\n`;\n\nconst StyledSettingsPageHeading = styled(SettingsPageHeading)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nexport default StyledSettingsPageHeading;\n","import {Location} from 'history';\nimport {PlainRoute} from 'react-router/lib/Route';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\n\ntype Options = {\n  routes: PlainRoute[];\n  location: Location;\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(to: string | PlainRoute, options: Options): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const query = typeof location !== 'undefined' && location.search ? location.search : '';\n\n  const fullRoute = `${baseRoute.join('')}${typeof to !== 'string' ? '' : to}${query}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true\n): string {\n  const tmpl = `${routeName} - ${orgSlug}`;\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport classnames from 'classnames';\n\nimport {t} from 'app/locale';\nimport Button from 'app/components/button';\n\nclass ClippedBox extends React.Component {\n  static propTypes = {\n    title: PropTypes.string,\n    defaultClipped: PropTypes.bool,\n    clipHeight: PropTypes.number,\n    btnText: PropTypes.string,\n  };\n\n  static defaultProps = {\n    defaultClipped: false,\n    clipHeight: 200,\n    renderedHeight: null,\n    btnText: t('Show More'),\n  };\n\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      clipped: this.props.defaultClipped,\n      revealed: false, // True once user has clicked \"Show More\" button\n    };\n  }\n\n  componentDidMount() {\n    const renderedHeight = ReactDOM.findDOMNode(this).offsetHeight;\n\n    if (!this.state.clipped && renderedHeight > this.props.clipHeight) {\n      /*eslint react/no-did-mount-set-state:0*/\n      // okay if this causes re-render; cannot determine until\n      // rendered first anyways\n      this.setState({\n        clipped: true,\n      });\n    }\n  }\n\n  reveal = e => {\n    e.stopPropagation();\n\n    this.setState({\n      clipped: false,\n      revealed: true,\n    });\n  };\n\n  render() {\n    const className = classnames('box-clippable', {\n      clipped: this.state.clipped,\n      revealed: this.state.revealed,\n    });\n\n    return (\n      <div\n        className={className}\n        style={{maxHeight: this.state.clipped ? this.props.clipHeight : null}}\n      >\n        {this.props.title && <h5>{this.props.title}</h5>}\n        {this.props.children}\n\n        {this.state.clipped && (\n          <div className=\"clip-fade\">\n            <Button onClick={this.reveal} priority=\"primary\" size=\"xsmall\">\n              {this.props.btnText}\n            </Button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default ClippedBox;\n","import React from 'react';\n\nimport {ProjectKey} from 'app/views/settings/project/projectKeys/types';\nimport {t, tct} from 'app/locale';\nimport ExternalLink from 'app/components/links/externalLink';\nimport Field from 'app/views/settings/components/forms/field';\nimport TextCopyInput from 'app/views/settings/components/forms/textCopyInput';\nimport getDynamicText from 'app/utils/getDynamicText';\n\nconst DEFAULT_PROPS = {\n  showDsn: true,\n  showDsnPublic: true,\n  showSecurityEndpoint: true,\n  showMinidump: true,\n  showUnreal: true,\n  showPublicKey: false,\n  showSecretKey: false,\n  showProjectId: false,\n};\n\ntype Props = {\n  projectId: string;\n  data: ProjectKey;\n} & Partial<typeof DEFAULT_PROPS>;\n\nclass ProjectKeyCredentials extends React.Component<Props> {\n  static defaultProps = DEFAULT_PROPS;\n\n  render() {\n    const {\n      projectId,\n      data,\n      showDsn,\n      showDsnPublic,\n      showSecurityEndpoint,\n      showMinidump,\n      showUnreal,\n      showPublicKey,\n      showSecretKey,\n      showProjectId,\n    } = this.props;\n\n    return (\n      <React.Fragment>\n        {showDsnPublic && (\n          <Field label={t('DSN')} inline={false} flexibleControlStateSize>\n            <TextCopyInput>\n              {getDynamicText({\n                value: data.dsn.public,\n                fixed: '__DSN__',\n              })}\n            </TextCopyInput>\n          </Field>\n        )}\n\n        {showDsn && (\n          <Field\n            label={t('DSN (Deprecated)')}\n            help={t(\n              \"This DSN includes the secret which is no longer required by Sentry' newer versions of SDKs. If you are unsure which to use, follow installation instructions for your language.\"\n            )}\n            inline={false}\n            flexibleControlStateSize\n          >\n            <TextCopyInput>\n              {getDynamicText({\n                value: data.dsn.secret,\n                fixed: '__DSN_DEPRECATED__',\n              })}\n            </TextCopyInput>\n          </Field>\n        )}\n\n        {showSecurityEndpoint && (\n          <Field\n            label={t('Security Header Endpoint')}\n            help={t(\n              'Use your security header endpoint for features like CSP and Expect-CT reports.'\n            )}\n            inline={false}\n            flexibleControlStateSize\n          >\n            <TextCopyInput>\n              {getDynamicText({\n                value: data.dsn.security,\n                fixed: '__SECURITY_HEADER_ENDPOINT__',\n              })}\n            </TextCopyInput>\n          </Field>\n        )}\n\n        {showMinidump && (\n          <Field\n            label={t('Minidump Endpoint')}\n            help={tct(\n              'Use this endpoint to upload [link], for example with Electron, Crashpad or Breakpad.',\n              {\n                link: (\n                  <ExternalLink href=\"https://docs.sentry.io/clients/minidump/\">\n                    minidump crash reports\n                  </ExternalLink>\n                ),\n              }\n            )}\n            inline={false}\n            flexibleControlStateSize\n          >\n            <TextCopyInput>\n              {getDynamicText({\n                value: data.dsn.minidump,\n                fixed: '__MINIDUMP_ENDPOINT__',\n              })}\n            </TextCopyInput>\n          </Field>\n        )}\n\n        {showUnreal && (\n          <Field\n            label={t('Unreal Engine 4 Endpoint')}\n            help={t('Use this endpoint to configure your UE4 Crash Reporter.')}\n            inline={false}\n            flexibleControlStateSize\n          >\n            <TextCopyInput>\n              {getDynamicText({\n                value: data.dsn.unreal || '',\n                fixed: '__UNREAL_ENDPOINT__',\n              })}\n            </TextCopyInput>\n          </Field>\n        )}\n\n        {showPublicKey && (\n          <Field label={t('Public Key')} inline flexibleControlStateSize>\n            <TextCopyInput>\n              {getDynamicText({\n                value: data.public,\n                fixed: '__PUBLICKEY__',\n              })}\n            </TextCopyInput>\n          </Field>\n        )}\n\n        {showSecretKey && (\n          <Field label={t('Secret Key')} inline flexibleControlStateSize>\n            <TextCopyInput>\n              {getDynamicText({\n                value: data.secret,\n                fixed: '__SECRETKEY__',\n              })}\n            </TextCopyInput>\n          </Field>\n        )}\n\n        {showProjectId && (\n          <Field label={t('Project ID')} inline flexibleControlStateSize>\n            <TextCopyInput>\n              {getDynamicText({\n                value: projectId,\n                fixed: '__PROJECTID__',\n              })}\n            </TextCopyInput>\n          </Field>\n        )}\n      </React.Fragment>\n    );\n  }\n}\nexport default ProjectKeyCredentials;\n","import {Link} from 'react-router';\nimport {RouteComponentProps} from 'react-router/lib/Router';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport {Client} from 'app/api';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {ProjectKey} from 'app/views/settings/project/projectKeys/types';\nimport {t} from 'app/locale';\nimport Button from 'app/components/button';\nimport ClippedBox from 'app/components/clippedBox';\nimport Confirm from 'app/components/confirm';\nimport ProjectKeyCredentials from 'app/views/settings/project/projectKeys/projectKeyCredentials';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport space from 'app/styles/space';\nimport {Scope} from 'app/types';\n\ntype Props = {\n  api: Client;\n  orgId: string;\n  projectId: string;\n  data: ProjectKey;\n  access: Set<Scope>;\n  onToggle: (isActive: boolean, data: ProjectKey) => void;\n  onRemove: (data: ProjectKey) => void;\n} & Pick<RouteComponentProps<{}, {}>, 'routes' | 'location' | 'params'>;\n\nclass KeyRow extends React.Component<Props> {\n  handleRemove = () => {\n    const {data, onRemove} = this.props;\n    onRemove(data);\n  };\n\n  handleEnable = () => {\n    const {onToggle, data} = this.props;\n    onToggle(true, data);\n  };\n\n  handleDisable = () => {\n    const {onToggle, data} = this.props;\n    onToggle(false, data);\n  };\n\n  render() {\n    const {access, data, routes, location, params} = this.props;\n    const editUrl = recreateRoute(`${data.id}/`, {routes, params, location});\n    const controlActive = access.has('project:write');\n\n    const controls = [\n      <Button key=\"edit\" to={editUrl} size=\"small\">\n        {t('Configure')}\n      </Button>,\n      <Button\n        key=\"toggle\"\n        size=\"small\"\n        onClick={data.isActive ? this.handleDisable : this.handleEnable}\n        disabled={!controlActive}\n      >\n        {data.isActive ? t('Disable') : t('Enable')}\n      </Button>,\n      <Confirm\n        key=\"remove\"\n        priority=\"danger\"\n        disabled={!controlActive}\n        onConfirm={this.handleRemove}\n        confirmText={t('Remove Key')}\n        message={t(\n          'Are you sure you want to remove this key? This action is irreversible.'\n        )}\n      >\n        <Button size=\"small\" disabled={!controlActive} icon=\"icon-trash\" />\n      </Confirm>,\n    ];\n\n    return (\n      <ClientKeyItemPanel>\n        <PanelHeader hasButtons>\n          <Title disabled={!data.isActive}>\n            <PanelHeaderLink to={editUrl}>{data.label}</PanelHeaderLink>\n            {!data.isActive && (\n              <small>\n                {' \\u2014  '}\n                {t('Disabled')}\n              </small>\n            )}\n          </Title>\n          <Controls>\n            {controls.map((c, n) => (\n              <span key={n}> {c}</span>\n            ))}\n          </Controls>\n        </PanelHeader>\n\n        <ClippedBox clipHeight={300} defaultClipped btnText={t('Expand')}>\n          <StyledPanelBody disabled={!data.isActive}>\n            <ProjectKeyCredentials projectId={`${data.projectId}`} data={data} />\n          </StyledPanelBody>\n        </ClippedBox>\n      </ClientKeyItemPanel>\n    );\n  }\n}\n\nexport default KeyRow;\n\nconst ClientKeyItemPanel = styled(Panel)`\n  .box-clippable {\n    padding: 0;\n    margin: 0;\n\n    .clip-fade {\n      padding-bottom: 20px;\n    }\n  }\n`;\n\nconst PanelHeaderLink = styled(Link)`\n  color: ${p => p.theme.gray3};\n`;\n\nconst Title = styled('div')<{disabled: boolean}>`\n  flex: 1;\n  ${p => (p.disabled ? 'opacity: 0.5;' : '')};\n  margin-right: ${space(1)};\n`;\n\nconst Controls = styled('div')`\n  display: grid;\n  align-items: center;\n  grid-gap: ${space(1)};\n  grid-auto-flow: column;\n`;\n\nconst StyledPanelBody = styled(PanelBody)<{disabled: boolean}>`\n  ${p => (p.disabled ? 'opacity: 0.5;' : '')};\n`;\n","import {\n  addLoadingMessage,\n  addErrorMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\n\nimport {RouteComponentProps} from 'react-router/lib/Router';\nimport React from 'react';\n\nimport {Organization, Project} from 'app/types';\nimport {Panel} from 'app/components/panels';\nimport {ProjectKey} from 'app/views/settings/project/projectKeys/types';\n\nimport {t, tct} from 'app/locale';\nimport AsyncView from 'app/views/asyncView';\nimport Button from 'app/components/button';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport ExternalLink from 'app/components/links/externalLink';\nimport Pagination from 'app/components/pagination';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport withOrganization from 'app/utils/withOrganization';\nimport withProject from 'app/utils/withProject';\n\nimport KeyRow from './keyRow';\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n} & RouteComponentProps<{orgId: string; projectId: string}, {}>;\n\ntype State = {\n  keyList: ProjectKey[];\n} & AsyncView['state'];\n\nclass ProjectKeys extends AsyncView<Props, State> {\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('Client Keys'), projectId, false);\n  }\n\n  getEndpoints(): [string, string][] {\n    const {orgId, projectId} = this.props.params;\n    return [['keyList', `/projects/${orgId}/${projectId}/keys/`]];\n  }\n\n  /**\n   * Optimistically remove key\n   */\n  handleRemoveKey = async (data: ProjectKey) => {\n    const oldKeyList = [...this.state.keyList];\n\n    addLoadingMessage(t('Revoking key..'));\n\n    this.setState(state => {\n      return {\n        keyList: state.keyList.filter(key => {\n          return key.id !== data.id;\n        }),\n      };\n    });\n\n    const {orgId, projectId} = this.props.params;\n\n    try {\n      await this.api.requestPromise(`/projects/${orgId}/${projectId}/keys/${data.id}/`, {\n        method: 'DELETE',\n      });\n      addSuccessMessage(t('Revoked key'));\n    } catch (_err) {\n      this.setState({\n        keyList: oldKeyList,\n      });\n      addErrorMessage(t('Unable to revoke key'));\n    }\n  };\n\n  handleToggleKey = async (isActive: boolean, data: ProjectKey) => {\n    const oldKeyList = [...this.state.keyList];\n\n    addLoadingMessage(t('Saving changes..'));\n\n    this.setState(state => {\n      const keyList = state.keyList.map(key => {\n        if (key.id === data.id) {\n          return {\n            ...key,\n            isActive: !data.isActive,\n          };\n        }\n\n        return key;\n      });\n      return {keyList};\n    });\n\n    const {orgId, projectId} = this.props.params;\n\n    try {\n      await this.api.requestPromise(`/projects/${orgId}/${projectId}/keys/${data.id}/`, {\n        method: 'PUT',\n        data: {isActive},\n      });\n      addSuccessMessage(isActive ? t('Enabled key') : t('Disabled key'));\n    } catch (_err) {\n      addErrorMessage(isActive ? t('Error enabling key') : t('Error disabling key'));\n      this.setState({keyList: oldKeyList});\n    }\n  };\n\n  handleCreateKey = async () => {\n    const {orgId, projectId} = this.props.params;\n\n    try {\n      const data: ProjectKey = await this.api.requestPromise(\n        `/projects/${orgId}/${projectId}/keys/`,\n        {\n          method: 'POST',\n        }\n      );\n\n      this.setState(state => {\n        return {\n          keyList: [...state.keyList, data],\n        };\n      });\n      addSuccessMessage(t('Created a new key.'));\n    } catch (_err) {\n      addErrorMessage(t('Unable to create new key. Please try again.'));\n    }\n  };\n\n  renderEmpty() {\n    return (\n      <Panel>\n        <EmptyMessage\n          icon=\"icon-circle-exclamation\"\n          description={t('There are no keys active for this project.')}\n        />\n      </Panel>\n    );\n  }\n\n  renderResults() {\n    const {location, organization, routes, params} = this.props;\n    const {orgId, projectId} = params;\n    const access = new Set(organization.access);\n\n    return (\n      <React.Fragment>\n        {this.state.keyList.map(key => {\n          return (\n            <KeyRow\n              api={this.api}\n              access={access}\n              key={key.id}\n              orgId={orgId}\n              projectId={`${projectId}`}\n              data={key}\n              onToggle={this.handleToggleKey}\n              onRemove={this.handleRemoveKey}\n              routes={routes}\n              location={location}\n              params={params}\n            />\n          );\n        })}\n        <Pagination pageLinks={this.state.keyListPageLinks} />\n      </React.Fragment>\n    );\n  }\n\n  renderBody() {\n    const access = new Set(this.props.organization.access);\n    const isEmpty = !this.state.keyList.length;\n\n    return (\n      <div data-test-id=\"project-keys\">\n        <SettingsPageHeader\n          title={t('Client Keys')}\n          action={\n            access.has('project:write') ? (\n              <Button\n                onClick={this.handleCreateKey}\n                size=\"small\"\n                priority=\"primary\"\n                icon=\"icon-circle-add\"\n              >\n                {t('Generate New Key')}\n              </Button>\n            ) : null\n          }\n        />\n        <TextBlock>\n          {tct(\n            `To send data to Sentry you will need to configure an SDK with a client key\n          (usually referred to as the [code:SENTRY_DSN] value). For more\n          information on integrating Sentry with your application take a look at our\n          [link:documentation].`,\n            {\n              link: <ExternalLink href=\"https://docs.sentry.io/\" />,\n              code: <code />,\n            }\n          )}\n        </TextBlock>\n\n        {isEmpty ? this.renderEmpty() : this.renderResults()}\n      </div>\n    );\n  }\n}\n\nexport default withOrganization(withProject(ProjectKeys));\n"],"sourceRoot":""}