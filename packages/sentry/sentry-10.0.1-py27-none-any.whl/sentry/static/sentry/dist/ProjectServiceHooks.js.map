{"version":3,"sources":["webpack:///./app/components/asyncComponentSearchInput.tsx","webpack:///./app/views/permissionDenied.jsx","webpack:///./app/components/asyncComponent.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/components/switch.tsx","webpack:///./app/components/truncate.jsx","webpack:///./app/views/settings/project/projectServiceHooks.jsx"],"names":["state","query","busy","immediateQuery","searchQuery","this","props","location","api","setState","requestPromise","url","includeAllArgs","method","data","jqXHR","onSuccess","onError","debounceWait","handleChange","handleInputChange","evt","target","value","handleSearch","updateRoute","onSearchSubmit","preventDefault","router","push","pathname","render","placeholder","children","className","defaultSearchBar","Form","onSubmit","onChange","StyledLoadingIndicator","size","hideMessage","mini","undefined","defaultProps","Component","PermissionDenied","routes","context","organization","project","route","getRouteStringFromRoutes","Sentry","scope","setFingerprint","setExtra","features","access","Error","title","t","message","tct","link","href","React","contextTypes","PropTypes","object","withRouter","wrapErrorHandling","component","fn","args","error","console","setTimeout","reloadOnVisible","shouldReloadOnVisible","shouldReload","shouldRenderBadRequests","markShouldMeasure","remainingRequests","_measurement","hasMeasured","finished","remountComponent","reloadData","getDefaultState","fetchData","visibilityReloader","loading","document","hidden","extraState","endpoints","getEndpoints","length","clear","forEach","stateKey","endpoint","params","options","locationQuery","paginate","cursor","request","success","_","handleRequestSuccess","allowError","handleError","bind","mark","componentWillMount","addEventListener","componentWillReceiveProps","_newProps","_newContext","componentDidUpdate","prevProps","prevContext","isRouterInContext","isLocationInProps","currentLocation","prevLocation","routeString","measure","name","start","finishProfile","search","componentWillUnmount","removeEventListener","reloading","errors","onRequestSuccess","_resp","onRequestError","_args","initialRequest","prevState","getResponseHeader","responseText","category","level","getEndpointParams","warn","getEndpoint","renderSearchInput","firstEndpoint","stateKeyOrDefault","urlOrDefault","renderError","renderLoading","disableLog","disableReport","unauthorizedErrors","Object","values","find","resp","status","permissionErrors","shouldLogSentry","badRequests","filter","responseJSON","detail","map","join","disableLogSentry","onRetry","renderComponent","renderBody","propTypes","getTitle","icon","action","tabs","noTitleStyles","TitleAndActions","Icon","Title","styled","Action","node","isRequired","bool","p","StyledSettingsPageHeading","SettingsPageHeading","Switch","isActive","isLoading","isDisabled","toggle","id","SwitchButton","type","onClick","role","Toggle","getSize","getToggleSize","getToggleTop","getTranslateX","theme","borderDark","green","Truncate","onFocus","e","maxLength","isExpanded","onBlur","leftTrim","isTruncated","shortValue","slice","onMouseOver","onMouseOut","ServiceHookRow","orgId","projectId","hook","label","to","help","events","onToggleActive","ProjectServiceHooks","loadingIndicator","IndicatorStore","add","remove","hookList","h","duration","Fragment","key","body","renderResults","renderEmpty","Set","has","data-test-id","priority","AsyncView"],"mappings":"sPAwDA,yE,OAME,EAAAA,MAAe,CACbC,MAAO,GACPC,MAAM,GAGR,EAAAC,eAAiB,SAAOC,GAAmB,+C,4EACnC,EAAkBC,KAAKC,MAAtBC,EAAQ,WAAEC,EAAG,MACpBH,KAAKI,SAAS,CAACP,MAAM,I,iBAGK,O,sBAAA,GAAMM,EAAIE,eAAe,GAAGL,KAAKC,MAAMK,IAAO,CACpEC,gBAAgB,EAChBC,OAAQ,MACRZ,MAAO,OAAF,IAAE,CAAF,eAAMM,EAASN,OAAK,CAAEA,MAAOG,O,cAH9B,oBAAkB,SAItB,IAJKU,EAAI,KAAIC,EAAK,KAMhBV,KAAKL,MAAMC,QAAUG,GACvBC,KAAKC,MAAMU,UAAUF,EAAMC,G,6BAG7BV,KAAKC,MAAMW,U,oBAGbZ,KAAKI,SAAS,CAACP,MAAM,I,YAGvB,EAAAD,MAAQ,IAAS,EAAKE,eAAgB,EAAKG,MAAMY,cAEjD,EAAAC,aAAe,SAAClB,GACd,EAAKA,MAAMA,GACX,EAAKQ,SAAS,CAACR,MAAK,KAGtB,EAAAmB,kBAAoB,SAACC,GACnB,SAAKF,aAAaE,EAAIC,OAAOC,QAK/B,EAAAC,aAAe,SAACH,GACR,cAACI,EAAA,EAAAA,YAAaC,EAAA,EAAAA,eAIpB,GAHAL,EAAIM,iBAGAF,EAAa,CACT,cAACG,EAAA,EAAAA,OAAQ,IAAArB,SACfqB,EAAOC,KAAK,CACVC,SAAU,EAASA,SACnB7B,MAAO,CACLA,MAAO,EAAKD,MAAMC,SAKM,mBAAnByB,GAGXA,EAAe,EAAK1B,MAAMC,MAAOoB,I,EAuBrC,OAtFwC,iBAkEtC,YAAAU,OAAA,WACQ,iBAACC,EAAA,EAAAA,YAAaC,EAAA,EAAAA,SAAUC,EAAA,EAAAA,UACxB,aAAChC,EAAA,EAAAA,KAAMD,EAAA,EAAAA,MAEPkC,EACJ,kBAACC,EAAI,CAACC,SAAUhC,KAAKmB,cACnB,kBAAC,IAAK,CACJD,MAAOtB,EACPqC,SAAUjC,KAAKe,kBACfc,UAAWA,EACXF,YAAaA,IAEd9B,GAAQ,kBAACqC,EAAsB,CAACC,KAAM,GAAIC,aAAW,EAACC,MAAI,KAI/D,YAAoBC,IAAbV,EACHE,EACAF,EAAS,CAACE,iBAAgB,EAAEjC,KAAI,EAAEqB,MAAOtB,EAAOkB,aAAcd,KAAKc,gBAnFlE,EAAAyB,aAAe,CACpBZ,YAAa,YACbd,aAAc,KAmFlB,EAtFA,CAAwC,IAAM2B,WAwFxCN,EAAyB,YAAO,UAAV,kBAAG,CAAwB,6MAOjDH,EAAO,YAAO,OAAV,kBAAG,CAAc,iFASZ,eAAuB,G,6HCnJhCU,E,oJAUgB,IACXC,EAAU1C,KAAKC,MAAfyC,OADW,EAEc1C,KAAK2C,QAA9BC,EAFW,EAEXA,aAAcC,EAFH,EAEGA,QAEfC,EAAQC,YAAyBL,GACvCM,KAAiB,SAAAC,GACfA,EAAMC,eAAe,CAlBR,oBAkBqBJ,IAClCG,EAAME,SAAS,QAASL,GACxBG,EAAME,SAAS,cAAgBP,GAAgBA,EAAaQ,UAAa,IACzEH,EAAME,SAAS,YAAcP,GAAgBA,EAAaS,QAAW,IACrEJ,EAAME,SAAS,kBAAoBN,GAAWA,EAAQO,UAAa,IACnEJ,IAAwB,IAAIM,MAAJ,UAvBX,qBAuBW,OAA0BR,EAAQ,MAAH,OAASA,GAAU,W,+BAK5E,OACE,kBAAC,IAAD,CAAeS,MAAOC,YAAE,sBACtB,kBAAC,IAAD,CACEC,QAASC,YACP,gIACA,CACEC,KAAM,kBAAC,IAAD,CAAcC,KAAK,sD,GAhCRC,IAAMrB,WAA/BC,E,+BAAAA,EAKGqB,aAAe,CACpBlB,aAAcmB,IAAUC,OACxBnB,QAASkB,IAAUC,QAkCRC,2BAAWxB,G,SCR1B,SAASyB,EACPC,EACAC,GAEA,OAAO,W,IAAC,sDACN,IACE,OAAOA,EAAE,yBAAIC,IACb,MAAOC,GAOP,OALAC,QAAQD,MAAMA,GACdE,YAAW,WACT,MAAMF,KAERH,EAAU/D,SAAS,CAACkE,MAAK,IAClB,OAKb,kBAoCE,WAAYrE,EAAU0C,GAAtB,MACE,YAAM1C,EAAO0C,IAAQ,K,OAnBvB,EAAA8B,iBAAkB,EAOlB,EAAAC,uBAAwB,EAMxB,EAAAC,cAAe,EAGf,EAAAC,yBAA0B,EAwF1B,EAAAzE,IAAc,IAAI,IAsBlB,EAAA0E,kBAAoB,SAAC,G,IAAA,kBACnBC,EAAA,EAAAA,kBACAR,EAAA,EAAAA,MAEK,EAAKS,aAAaC,cACrB,EAAKD,aAAaE,SAAiC,IAAtBH,EAC7B,EAAKC,aAAaT,MAAQA,GAAS,EAAKS,aAAaT,QAIzD,EAAAY,iBAAmB,WACb,EAAKP,aACP,EAAKQ,aAEL,EAAK/E,SAAS,EAAKgF,kBAAmB,EAAKC,YAI/C,EAAAC,mBAAqB,WACnB,SAAKZ,wBACJ,EAAK/E,MAAM4F,UACXC,SAASC,QACV,EAAKN,cAMP,EAAAE,UAAY,SAACK,GACX,IAAMC,EAAY,EAAKC,eAElBD,EAAUE,QAMf,EAAK1F,IAAI2F,QAET,EAAK1F,SAAQ,aACXmF,SAAS,EACTjB,OAAO,EACPQ,kBAAmBa,EAAUE,QAC1BH,IAGLC,EAAUI,SAAQ,SAAC,G,IAAA,mBAACC,EAAA,KAAUC,EAAA,KAAUC,EAAA,KAAQC,EAAA,KAC9CA,EAAUA,GAAW,GAGrB,IAAMC,EAAiB,EAAKnG,MAAMC,UAAY,EAAKD,MAAMC,SAASN,OAAU,GACxEA,EAASsG,GAAUA,EAAOtG,OAAU,IAGpCuG,EAAQE,UAAYD,EAAcE,UACpC1G,EAAQ,OAAH,IAAG,CAAH,eAAOwG,GAAkBxG,IAGhC,EAAKO,IAAIoG,QAAQN,EAAQ,yBACvBzF,OAAQ,OACL0F,GAAM,CACTtG,MAAK,EACL4G,QAAS,SAAC/F,EAAMgG,EAAG/F,GACjB,EAAKgG,qBAAqB,CAACV,SAAQ,EAAEvF,KAAI,EAAEC,MAAK,IAAG,IAErD4D,MAAO,YAGD6B,EAAQQ,YAAcR,EAAQQ,WAAW,KAC3C,EAAQ,MAEV,EAAKC,YAAY,EAAO,CAACZ,EAAUC,EAAUC,EAAQC,YAvCzD,EAAK/F,SAAS,CAACmF,SAAS,EAAOjB,OAAO,KAzIxC,EAAKe,UAAYnB,EAAkB,EAAM,EAAKmB,UAAUwB,KAAK,IAC7D,EAAKnF,OAASwC,EAAkB,EAAM,EAAKxC,OAAOmF,KAAK,IAEvD,EAAKlH,MAAQ,EAAKyF,kBAElB,EAAKL,aAAe,CAClBC,aAAa,GAEX/E,EAAMyC,QAAUzC,EAAMyC,QACxB,IAAOoE,KAAK,mBAAmB,OAAA/D,EAAA,GAAyB9C,EAAMyC,S,EAqWpE,OAlZU,iBAiDR,YAAAqE,mBAAA,WACE/G,KAAKG,IAAM,IAAI,IACfH,KAAKqF,YAEDrF,KAAKyE,iBACPe,SAASwB,iBAAiB,mBAAoBhH,KAAKsF,qBAKvD,YAAA2B,0BAAA,SAA0BC,EAAcC,KAExC,YAAAC,mBAAA,SAAmBC,EAAcC,GAC/B,IAAMC,IAAsBD,EAAY/F,OAClCiG,OAA2ClF,IAAvB+E,EAAUnH,SAE9BuH,EAAkBD,EACpBxH,KAAKC,MAAMC,SACXqH,EACAvH,KAAK2C,QAAQpB,OAAOrB,SACpB,KACEwH,EAAeF,EACjBH,EAAUnH,SACVqH,EACAD,EAAY/F,OAAOrB,SACnB,KAEJ,GAAMuH,GAAmBC,EAAzB,CAMA,IACG1H,KAAK+E,aAAaC,aACnBhF,KAAK+E,aAAaE,UAClBjF,KAAKC,MAAMyC,OACX,CACA,IAAMiF,EAAc,OAAA5E,EAAA,GAAyB/C,KAAKC,MAAMyC,QACxD,IAAOkF,QAAQ,CACbC,KAAM,gCACNC,MAAO,mBAAmBH,EAC1BlH,KAAM,CACJqC,MAAO6E,EACPrD,MAAOtE,KAAK+E,aAAaT,SAG7BtE,KAAK+E,aAAaC,aAAc,EAGQ,mBAA7BhF,KAAKC,MAAM8H,eACpB/H,KAAKC,MAAM8H,gBAMZ,IAAQ/H,KAAKC,MAAMiG,OAAQmB,EAAUnB,SACtCuB,EAAgBO,SAAWN,EAAaM,QACxCP,EAAgB9H,QAAU+H,EAAa/H,OAEvCK,KAAKkF,qBAIT,YAAA+C,qBAAA,WACEjI,KAAKG,IAAI2F,QACTN,SAAS0C,oBAAoB,mBAAoBlI,KAAKsF,qBAOxD,YAAAF,gBAAA,WACE,IAAMO,EAAY3F,KAAK4F,eACjBjG,EAAQ,CAEZ4F,SAAS,EAET4C,WAAW,EAEX7D,OAAO,EACP8D,OAAQ,IAKV,OAHAzC,EAAUI,SAAQ,SAAC,G,IAAA,mBAACC,EAAA,KAAU,KAC5BrG,EAAMqG,GAAY,QAEbrG,GA4BT,YAAAwF,WAAA,WACEnF,KAAKqF,UAAU,CAAC8C,WAAW,KAoD7B,YAAAE,iBAAA,SAAiBC,KAIjB,YAAAC,eAAA,SAAeD,EAAOE,KAItB,YAAA9B,qBAAA,SAAqB,EAAyB+B,GAA9C,WAAsBzC,EAAA,EAAAA,SAAUvF,EAAA,EAAAA,KAAMC,EAAA,EAAAA,MACpCV,KAAKI,UAAS,SAAAsI,G,MACN/I,IAAK,MACRqG,GAAWvF,EAEZ,EAAIuF,EAAQ,aAActF,GAASA,EAAMiI,kBAAkB,QAC5D,GASD,OAPIF,IACF9I,EAAMmF,kBAAoB4D,EAAU5D,kBAAqB,EACzDnF,EAAM4F,QAAUmD,EAAU5D,kBAAqB,EAC/CnF,EAAMwI,UAAYO,EAAUP,WAAaxI,EAAM4F,QAC/C,EAAKV,kBAAkB,CAACC,kBAAmBnF,EAAMmF,qBAG5CnF,KAETK,KAAKqI,iBAAiB,CAACrC,SAAQ,EAAEvF,KAAI,EAAEC,MAAK,KAG9C,YAAAkG,YAAA,SAAYtC,EAAOD,GAAnB,WACS2B,EAAD,iBAAC,GACH1B,GAASA,EAAMsE,cACjB,IAAqB,CACnBnF,QAASa,EAAMsE,aACfC,SAAU,MACVC,MAAO,IAAgBxF,QAG3BtD,KAAKI,UAAS,SAAAsI,G,QACNnD,EAAUmD,EAAU5D,kBAAqB,EACzCnF,IAAK,MACRqG,GAAW,KACZ,EAAAoC,OAAM,2BACDM,EAAUN,UAAM,MAClBpC,GAAW1B,EAAK,IAEnB,EAAAA,MAAOoE,EAAUpE,SAAWA,EAC5B,EAAAQ,kBAAmB4D,EAAU5D,kBAAqB,EAClD,EAAAS,QAAO,EACP,EAAA4C,UAAWO,EAAUP,WAAa5C,EACnC,GAGD,OAFA,EAAKV,kBAAkB,CAACC,kBAAmBnF,EAAMmF,kBAAmBR,OAAO,IAEpE3E,KAETK,KAAKuI,eAAejE,EAAOD,IAM7B,YAAA0E,kBAAA,WAGE,OADAxE,QAAQyE,KAAK,mCACN,IAMT,YAAAC,YAAA,WAGE,OADA1E,QAAQyE,KAAK,6BACN,MAUT,YAAApD,aAAA,WACE,IAAMK,EAAWjG,KAAKiJ,cACtB,OAAKhD,EAGE,CAAC,CAAC,OAAQA,EAAUjG,KAAK+I,sBAFvB,IAKX,YAAAG,kBAAA,SAAkB,GAAlB,WAAmBlD,EAAA,EAAAA,SAAU1F,EAAA,EAAAA,IAAK,oCACzB6I,EAAD,2CAAC,GACDC,EAAoBpD,GAAamD,GAAiBA,EAAc,GAChEE,EAAe/I,GAAQ6I,GAAiBA,EAAc,GAC5D,OACE,kBAAC,EAAyB,aACxB7I,IAAK+I,GACDpJ,EAAK,CACTE,IAAKH,KAAKG,IACVQ,UAAW,SAACF,EAAMC,GAChB,EAAKgG,qBAAqB,CAACV,SAAUoD,EAAmB3I,KAAI,EAAEC,MAAK,KAErEE,QAAS,WACP,EAAK0I,YAAY,IAAIhG,MAAM,8CAMnC,YAAAiG,cAAA,WACE,OAAO,kBAAC,UAAgB,OAG1B,YAAAD,YAAA,SAAYhF,EAAekF,EAAoBC,QAApB,IAAAD,OAAA,QAAoB,IAAAC,OAAA,GACtC,IAAArB,EAAA,WAAAA,OAGDsB,EAAqBC,OAAOC,OAAOxB,GAAQyB,MAC/C,SAAAC,GAAQ,OAAAA,GAAA,MAAQA,EAAKC,UAIjBC,EAAmBL,OAAOC,OAAOxB,GAAQyB,MAC7C,SAAAC,GAAQ,OAAAA,GAAA,MAAQA,EAAKC,UAKjBE,IACFN,OAAOC,OAAOxB,GAAQyB,MAAK,SAAAC,GAAQ,OAAAA,GAAA,IAAQA,EAAKC,WAAiBP,EAErE,GAAIE,EACF,OACE,kBAAC,IAAY,CAACjG,QAAS,YAAE,qDAI7B,GAAIuG,EACF,OAAO,kBAAC,EAAgB,MAG1B,GAAIhK,KAAK4E,wBAAyB,CAChC,IAAMsF,EAAcP,OAAOC,OAAOxB,GAC/B+B,QACC,SAAAL,GACE,OAAAA,GAAwB,MAAhBA,EAAKC,QAAkBD,EAAKM,cAAgBN,EAAKM,aAAaC,UAEzEC,KAAI,SAAAR,GAAQ,OAAAA,EAAKM,aAAL,UAEf,GAAIF,EAAYrE,OACd,OAAO,kBAAC,IAAY,CAACpC,QAASyG,EAAYK,KAAK,QAInD,OACE,kBAAC,IAAU,CACTjG,MAAOA,EACPH,UAAWnE,KACXwK,kBAAmBP,EACnBR,cAAeA,EACfgB,QAASzK,KAAKkF,oBAKpB,YAAAwF,gBAAA,WACE,OAAO1K,KAAKL,MAAM4F,SAAavF,KAAK2E,cAAiB3E,KAAKL,MAAMwI,UAE5DnI,KAAKL,MAAM2E,MACXtE,KAAKsJ,YAAY,IAAIhG,MAAM,0CAC3BtD,KAAK2K,aAHL3K,KAAKuJ,iBASX,YAAAoB,WAAA,WAEE,MAAM,IAAIrH,MAAM,oBAGlB,YAAA5B,OAAA,WACE,OAAO1B,KAAK0K,mBA/YP,EAAAE,UAAiB,CACtB1K,SAAU,IAAU8D,OACpBzC,OAAQ,IAAUyC,QAGb,EAAAF,aAAe,CACpBvC,OAAQ,IAAUyC,QA2YtB,EArZA,CAGU,IAAMxB,WAHK,O,+ECzDrB,2B,+CAgBA,OAbU,iBACR,YAAAqI,SAAA,WACE,MAAO,IAGT,YAAAnJ,OAAA,WACE,IAAM6B,EAAQvD,KAAK6K,WACnB,OACE,kBAAC,IAAa,CAACtH,OAAUA,EAAWA,EAAK,MAAQ,IAAE,UAChDvD,KAAK0K,oBAId,EAhBA,C,QAGU,G,sHCcV,2B,+CAgCA,OAhCkC,iBAchC,YAAAhJ,OAAA,WACE,IAAM,aAACoJ,EAAA,EAAAA,KAAMvH,EAAA,EAAAA,MAAOwH,EAAA,EAAAA,OAAQC,EAAA,EAAAA,KAAMC,EAAA,EAAAA,cAAe,kEACjD,OACE,uCAAShL,GACP,kBAACiL,EAAe,KACbJ,GAAQ,kBAACK,EAAI,KAAEL,GACfvH,GACC,kBAAC6H,EAAK,CAACJ,KAAMA,EAAMK,OAAQJ,GACzB,kBAAC,IAAW,KAAE1H,IAGjBwH,GAAU,kBAACO,EAAM,CAACN,KAAMA,GAAOD,IAGjCC,GAAQ,6BAAMA,KA3Bd,EAAAJ,UAAY,CACjBE,KAAM,IAAUS,KAChBhI,MAAO,IAAUgI,KAAKC,WACtBT,OAAQ,IAAUQ,KAClBP,KAAM,IAAUO,KAEhBN,cAAe,IAAUQ,MAGpB,EAAAlJ,aAAe,CACpB0I,eAAe,GAqBnB,EAhCA,CAAkC,IAAMzI,WAuClC0I,EAAkB,YAAO,MAAV,qBAAG,CAAa,uHAK/BE,EAAQ,YAAO,MAAV,qBAAG,CAAa,8DAA8C,OAKlD,gBACkD,sBALrE,SAAAM,GACA,OAACA,EAAEL,QACH,oDAGQ,SAAAK,GAAK,OAACA,EAAEV,KAAU,YAAM,GAAE,MAAM,YAAM,GAAU,YAAM,GAAjD,QAIXG,EAAO,YAAO,MAAV,qBAAG,CAAa,qEACA,SAAR,YAAM,IAGlBG,EAAS,YAAO,MAAV,qBAAG,CAAa,kCAA0B,OACF,UAAhD,SAAAI,GAAK,OAACA,EAAEV,KAAO,eAAe,YAAM,GAA/B,QAGHW,EAA4B,YAAOC,EAAV,qBAAG,CAA2B,mEAE5D,wCAEwB,SAAR,YAAM,IAGR,O,oEChFTC,EAA0B,SAAC,G,IAC/B1J,EAAA,EAAAA,KACA2J,EAAA,EAAAA,SACAC,EAAA,EAAAA,UACAC,EAAA,EAAAA,WACAC,EAAA,EAAAA,OACAC,EAAA,EAAAA,GACArK,EAAA,EAAAA,UACI,OACJ,kBAACsK,EAAY,CACXD,GAAIA,EACJE,KAAK,SACLvK,UAAWA,EACXwK,QAASL,OAAa1J,EAAY2J,EAClCK,KAAK,WAAU,eACDR,EACdC,UAAWA,EACXC,WAAYA,EACZF,SAAUA,EACV3J,KAAMA,EAAI,eACG,UAEb,kBAACoK,EAAM,CAACP,WAAYA,EAAYF,SAAUA,EAAU3J,KAAMA,MAa9D0J,EAAOtJ,aAAe,CACpBJ,KAAM,MAKR,I,IAAMqK,EAAU,SAACd,GAAkB,MAAY,OAAXA,EAAEvJ,KAAgB,GAAnB,IAC7BsK,EAAgB,SAACf,GAAkB,OAAAc,EAAQd,IAAiB,OAAXA,EAAEvJ,KAAgB,EAAhC,KACnCuK,EAAe,SAAChB,GAAkB,MAAY,OAAXA,EAAEvJ,KAAgB,EAAnB,GAClCwK,EAAgB,SAACjB,GACrB,OAAAA,EAAEI,SAAWY,EAAahB,GAAKc,EAAQd,GAAKgB,EAAahB,IAErDS,EAAe,YAAO,SAAV,oBAAG,CAAgB,ggBAAY,uFAIiC,6HAIR,wBACJ,gBACnD,iBACW,yBACJ,yEAKiB,gIAbrB,SAAAT,GAAK,OAACA,EAAEI,SAAWJ,EAAEkB,MAAMC,WAAanB,EAAEkB,MAArC,eAIf,SAAAlB,GAAK,OAACA,EAAEK,WAAaL,EAAEM,WAAa,cAA/B,aACG,SAAAN,GAAK,OAACA,EAAEK,WAAaL,EAAEM,WAAa,OAA/B,OACbQ,GACD,SAAAd,GAAK,SAAAc,EAAQd,KACLc,GAKC,SAAAd,GAAK,OAAAA,EAAEkB,MAAF,cAUnBL,EAAS,YAAO,OAAV,oBAAG,CAAc,kPAAY,4GAKpB,gCACkB,kBACf,kBACC,sBACwC,iBACpB,SALpCG,EACiBC,EACfF,EACCA,GACI,SAAAf,GAAK,OAACA,EAAEI,SAAWJ,EAAEkB,MAAME,MAAQpB,EAAEkB,MAAhC,SACR,SAAAlB,GAAK,OAACA,EAAEM,WAAa,GAAhB,QAEH,O,uICjGTe,E,YAYJ,aAAqB,+CAAN1I,EAAM,yBAANA,EAAM,uBACnB,iDAASA,MAMX2I,QAAU,SAAAC,GAAK,MACc,EAAKhN,MAAzBiB,EADM,EACNA,MAAOgM,EADD,EACCA,UACVhM,EAAM2E,QAAUqH,GAGpB,EAAK9M,SAAS,CAAC+M,YAAY,KAZR,EAerBC,OAAS,SAAAH,GACH,EAAKtN,MAAMwN,YACb,EAAK/M,SAAS,CAAC+M,YAAY,KAf7B,EAAKxN,MAAQ,CACXwN,YAAY,GAHK,E,sDAqBZ,MAC8BnN,KAAKC,MAAnCoN,EADA,EACAA,SAAUH,EADV,EACUA,UAAWhM,EADrB,EACqBA,MACtBoM,EAAcpM,EAAM2E,OAASqH,EAC/BK,EAAa,GAIbA,EAFAD,EACED,EAEA,mCAASnM,EAAMsM,MAAMtM,EAAM2E,QAAUqH,EAAY,GAAIhM,EAAM2E,SAGhD,8BAAO3E,EAAMsM,MAAM,EAAGN,EAAY,GAAlC,MAGFhM,EAGf,IAAIW,EAAY7B,KAAKC,MAAM4B,WAAa,GAMxC,OALAA,GAAa,aACT7B,KAAKL,MAAMwN,aACbtL,GAAa,aAIb,0BACEA,UAAWA,EACX4L,YAAazN,KAAKgN,QAClBU,WAAY1N,KAAKoN,OACjBJ,QAAShN,KAAKgN,QACdI,OAAQpN,KAAKoN,QAEb,0BAAMvL,UAAU,eAAe0L,GAC9BD,GAAe,0BAAMzL,UAAU,cAAcX,Q,GAjE/B2C,IAAMrB,WAAvBuK,E,uBAAAA,EAOGxK,aAAe,CACpB8K,UAAU,EACVH,UAAW,IA8DAH,O,0hBC3DTY,E,mLAQJhO,MAAQ,CACN4F,SAAS,EACTjB,OAAO,G,wDAGA,MAC0BtE,KAAKC,MAA/B2N,EADA,EACAA,MAAOC,EADP,EACOA,UAAWC,EADlB,EACkBA,KACzB,OACE,kBAAC,IAAD,CACEC,MACE,kBAAC,OAAD,CAAMC,GAAE,oBAAeJ,EAAf,qBAAiCC,EAAjC,kBAAoDC,EAAK5B,GAAzD,MACN,kBAAC,IAAD,CAAUhL,MAAO4M,EAAKxN,OAG1B2N,KACEH,EAAKI,QAAiC,IAAvBJ,EAAKI,OAAOrI,OACzB,+BAAQiI,EAAKI,OAAO3D,KAAK,OAEzB,+BACE,sDAKN,kBAAC,IAAD,CACEuB,SAA0B,WAAhBgC,EAAK/D,OACf5H,KAAK,KACL8J,OAAQjM,KAAKC,MAAMkO,sB,GAnCAtK,IAAMrB,WAA7BmL,E,iCA0CeS,E,mLAUnBD,eAAiB,SAAAL,GAAQ,MACI,EAAK7N,MAAMiG,OAA/B0H,EADgB,EAChBA,MAAOC,EADS,EACTA,UACRQ,EAAmBC,IAAeC,IAAI/K,YAAE,qBAC9C,EAAKrD,IAAIoG,QAAT,oBAA8BqH,EAA9B,YAAuCC,EAAvC,kBAA0DC,EAAK5B,GAA/D,KAAsE,CACpE1L,OAAQ,MACRC,KAAM,CACJqL,SAA0B,WAAhBgC,EAAK/D,QAEjBvD,QAAS,SAAA/F,GACP6N,IAAeE,OAAOH,GACtB,IAAMI,EAAW,EAAK9O,MAAM8O,SAASnE,KAAI,SAAAoE,GACvC,OAAIA,EAAExC,KAAOzL,EAAKyL,G,iVAChB,IACKwC,EADL,GAEKjO,GAGAiO,KAET,EAAKtO,SAAS,CAACqO,cAEjBnK,MAAO,WACLgK,IAAeE,OAAOH,GACtBC,IAAeC,IACb/K,YAAE,mDACF,QACA,CACEmL,SAAU,U,8DAhCL,MACc3O,KAAKC,MAAMiG,OAA/B0H,EADM,EACNA,MAAOC,EADD,EACCA,UACd,MAAO,CAAC,CAAC,WAAD,oBAA0BD,EAA1B,YAAmCC,EAAnC,e,oCAsCR,OACE,kBAAC,IAAD,KACGrK,YAAE,+D,sCAKO,aACaxD,KAAKC,MAAMiG,OAA/B0H,EADO,EACPA,MAAOC,EADA,EACAA,UAEd,OACE,kBAAC,IAAMe,SAAP,KACE,kBAAC,IAAD,CAAaC,IAAI,UAAUrL,YAAE,iBAC7B,kBAAC,IAAD,CAAWqL,IAAI,QACb,kBAAC,IAAD,CAAYzC,KAAK,OAAOtB,KAAK,2BAA7B,qFAIC9K,KAAKL,MAAM8O,SAASnE,KAAI,SAAAwD,GACvB,OACE,kBAACH,EAAD,CACEkB,IAAKf,EAAK5B,GACV0B,MAAOA,EACPC,UAAWA,EACXC,KAAMA,EACNK,eAAgB,EAAKA,eAAetH,KAAK,EAAMiH,Y,mCAU3D,IAAIgB,EAEFA,EADE9O,KAAKL,MAAM8O,SAAS5I,OAAS,EACxB7F,KAAK+O,gBAEL/O,KAAKgP,cALH,MAQgBhP,KAAKC,MAAMiG,OAA/B0H,EARI,EAQJA,MAAOC,EARH,EAQGA,UACRxK,EAAS,IAAI4L,IAAIjP,KAAK2C,QAAQC,aAAaS,QAEjD,OACE,yBAAKxB,UAAU,6BACb,kBAAC,IAAD,CACE0B,MAAOC,YAAE,iBACTuH,OACE1H,EAAO6L,IAAI,iBACT,kBAAC,IAAD,CACEC,eAAa,mBACbnB,GAAE,oBAAeJ,EAAf,qBAAiCC,EAAjC,eACF1L,KAAK,QACLiN,SAAS,WAET,0BAAMvN,UAAU,cANlB,IAOS2B,YAAE,oBAET,OAGR,kBAAC,IAAD,KAAQsL,Q,GA5GiCO,KAA5BjB,EACZtK,aAAe,CACpBlB,aAAcmB,IAAUC,OAAOwH","file":"ProjectServiceHooks.js","sourcesContent":["import * as ReactRouter from 'react-router';\nimport debounce from 'lodash/debounce';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport Input from 'app/views/settings/components/forms/controls/input';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {Client} from 'app/api';\n\ntype RenderProps = {\n  defaultSearchBar: React.ReactNode;\n  busy: boolean;\n  handleChange: (value: string) => void;\n  value: string;\n};\n\ntype Props = ReactRouter.WithRouterProps & {\n  api: Client;\n  className?: string;\n  /**\n   * URL to make the search request to\n   */\n  url: string;\n  /**\n   * Placeholder text in the search input\n   */\n  placeholder?: string;\n  /**\n   * Time in milliseconds to wait before firing off the request\n   */\n  debounceWait?: number;\n  /**\n   * Updates URL with search query in the URL param: `query`\n   */\n  updateRoute?: boolean;\n\n  onSearchSubmit?: (query: string, event: React.FormEvent) => void;\n  onSuccess: (data: object, jqXHR: JQueryXHR | undefined) => void;\n  onError: () => void;\n\n  /**\n   * A render-prop child may be passed to handle custom rendering of the input.\n   */\n  children?: (otps: RenderProps) => React.ReactNode;\n};\n\ntype State = {\n  query: string;\n  busy: boolean;\n};\n\n/**\n * This is a search input that can be easily used in AsyncComponent/Views.\n *\n * It probably doesn't make too much sense outside of an AsyncComponent atm.\n */\nclass AsyncComponentSearchInput extends React.Component<Props, State> {\n  static defaultProps = {\n    placeholder: 'Search...',\n    debounceWait: 200,\n  };\n\n  state: State = {\n    query: '',\n    busy: false,\n  };\n\n  immediateQuery = async (searchQuery: string) => {\n    const {location, api} = this.props;\n    this.setState({busy: true});\n\n    try {\n      const [data, , jqXHR] = await api.requestPromise(`${this.props.url}`, {\n        includeAllArgs: true,\n        method: 'GET',\n        query: {...location.query, query: searchQuery},\n      });\n      // only update data if the request's query matches the current query\n      if (this.state.query === searchQuery) {\n        this.props.onSuccess(data, jqXHR);\n      }\n    } catch {\n      this.props.onError();\n    }\n\n    this.setState({busy: false});\n  };\n\n  query = debounce(this.immediateQuery, this.props.debounceWait);\n\n  handleChange = (query: string) => {\n    this.query(query);\n    this.setState({query});\n  };\n\n  handleInputChange = (evt: React.ChangeEvent<HTMLInputElement>) =>\n    this.handleChange(evt.target.value);\n\n  /**\n   * This is called when \"Enter\" (more specifically a form \"submit\" event) is pressed.\n   */\n  handleSearch = (evt: React.FormEvent<HTMLFormElement>) => {\n    const {updateRoute, onSearchSubmit} = this.props;\n    evt.preventDefault();\n\n    // Update the URL to reflect search term.\n    if (updateRoute) {\n      const {router, location} = this.props;\n      router.push({\n        pathname: location.pathname,\n        query: {\n          query: this.state.query,\n        },\n      });\n    }\n\n    if (typeof onSearchSubmit !== 'function') {\n      return;\n    }\n    onSearchSubmit(this.state.query, evt);\n  };\n\n  render() {\n    const {placeholder, children, className} = this.props;\n    const {busy, query} = this.state;\n\n    const defaultSearchBar = (\n      <Form onSubmit={this.handleSearch}>\n        <Input\n          value={query}\n          onChange={this.handleInputChange}\n          className={className}\n          placeholder={placeholder}\n        />\n        {busy && <StyledLoadingIndicator size={18} hideMessage mini />}\n      </Form>\n    );\n\n    return children === undefined\n      ? defaultSearchBar\n      : children({defaultSearchBar, busy, value: query, handleChange: this.handleChange});\n  }\n}\n\nconst StyledLoadingIndicator = styled(LoadingIndicator)`\n  position: absolute;\n  right: 25px;\n  top: 50%;\n  transform: translateY(-13px);\n`;\n\nconst Form = styled('form')`\n  position: relative;\n`;\n\n// XXX(epurkhiser): The withRouter HoC has incorrect typings. It does not\n// correctly remove the WithRouterProps from the return type of the HoC, thus\n// we manually have to do this.\ntype PropsWithoutRouter = Omit<Props, keyof ReactRouter.WithRouterProps>;\n\nexport default ReactRouter.withRouter(AsyncComponentSearchInput) as React.ComponentClass<\n  PropsWithoutRouter\n>;\n","import {withRouter} from 'react-router';\nimport DocumentTitle from 'react-document-title';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport * as Sentry from '@sentry/browser';\n\nimport {t, tct} from 'app/locale';\nimport ExternalLink from 'app/components/links/externalLink';\nimport LoadingError from 'app/components/loadingError';\nimport getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';\n\nconst ERROR_NAME = 'Permission Denied';\n\nclass PermissionDenied extends React.Component {\n  static propTypes = {\n    routes: PropTypes.array,\n  };\n\n  static contextTypes = {\n    organization: PropTypes.object,\n    project: PropTypes.object,\n  };\n\n  componentDidMount() {\n    const {routes} = this.props;\n    const {organization, project} = this.context;\n\n    const route = getRouteStringFromRoutes(routes);\n    Sentry.withScope(scope => {\n      scope.setFingerprint([ERROR_NAME, route]);\n      scope.setExtra('route', route);\n      scope.setExtra('orgFeatures', (organization && organization.features) || []);\n      scope.setExtra('orgAccess', (organization && organization.access) || []);\n      scope.setExtra('projectFeatures', (project && project.features) || []);\n      Sentry.captureException(new Error(`${ERROR_NAME}${route ? ` : ${route}` : ''}`));\n    });\n  }\n\n  render() {\n    return (\n      <DocumentTitle title={t('Permission Denied')}>\n        <LoadingError\n          message={tct(\n            'Your role does not have the necessary permissions to access this resource, please read more about [link:organizational roles]',\n            {\n              link: <ExternalLink href=\"https://docs.sentry.io/learn/membership/\" />,\n            }\n          )}\n        />\n      </DocumentTitle>\n    );\n  }\n}\n\nexport default withRouter(PermissionDenied);\n","import isEqual from 'lodash/isEqual';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport * as Sentry from '@sentry/browser';\nimport {RouteComponentProps} from 'react-router/lib/Router';\n\nimport {Client} from 'app/api';\nimport {metric} from 'app/utils/analytics';\nimport {t} from 'app/locale';\nimport AsyncComponentSearchInput from 'app/components/asyncComponentSearchInput';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport PermissionDenied from 'app/views/permissionDenied';\nimport RouteError from 'app/views/routeError';\nimport getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';\n\ntype AsyncComponentProps = {\n  // optional sentry APM profiling\n  // Note we don't decorate `AsyncComponent` but rather the subclass\n  // so we can get its component name\n  finishProfile?: () => void;\n} & Partial<RouteComponentProps<{}, {}>>;\n\ntype AsyncComponentState = {\n  loading: boolean;\n  reloading: boolean;\n  error: boolean;\n  errors: object;\n  remainingRequests?: number;\n  [key: string]: any;\n};\n\ntype SearchInputProps = React.ComponentProps<typeof AsyncComponentSearchInput>;\n\ntype RenderSearchInputArgs = Omit<\n  SearchInputProps,\n  'api' | 'onSuccess' | 'onError' | 'url'\n> & {\n  stateKey?: string;\n  url?: SearchInputProps['url'];\n};\n\n/**\n * Wraps methods on the AsyncComponent to catch errors and set the `error`\n * state on error.\n */\nfunction wrapErrorHandling<T extends any[], U>(\n  component: AsyncComponent,\n  fn: (...args: T) => U\n) {\n  return (...args: T): U | null => {\n    try {\n      return fn(...args);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error(error);\n      setTimeout(() => {\n        throw error;\n      });\n      component.setState({error});\n      return null;\n    }\n  };\n}\n\nexport default class AsyncComponent<\n  P extends AsyncComponentProps = AsyncComponentProps,\n  S extends AsyncComponentState = AsyncComponentState\n> extends React.Component<P, S> {\n  static propTypes: any = {\n    location: PropTypes.object,\n    router: PropTypes.object,\n  };\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  // Override this flag to have the component reload it's state when the window\n  // becomes visible again. This will set the loading and reloading state, but\n  // will not render a loading state during reloading.\n  //\n  // eslint-disable-next-line react/sort-comp\n  reloadOnVisible = false;\n\n  // When enabling reloadOnVisible, this flag may be used to turn on and off\n  // the reloading. This is useful if your component only needs to reload when\n  // becoming visible during certain states.\n  //\n  // eslint-disable-next-line react/sort-comp\n  shouldReloadOnVisible = false;\n\n  // This affects how the component behaves when `remountComponent` is called\n  // By default, the component gets put back into a \"loading\" state when re-fetching data.\n  // If this is true, then when we fetch data, the original ready component remains mounted\n  // and it will need to handle any additional \"reloading\" states\n  shouldReload = false;\n\n  // should `renderError` render the `detail` attribute of a 400 error\n  shouldRenderBadRequests = false;\n\n  constructor(props: P, context: any) {\n    super(props, context);\n\n    this.fetchData = wrapErrorHandling(this, this.fetchData.bind(this));\n    this.render = wrapErrorHandling(this, this.render.bind(this));\n\n    this.state = this.getDefaultState() as Readonly<S>;\n\n    this._measurement = {\n      hasMeasured: false,\n    };\n    if (props.routes && props.routes) {\n      metric.mark(`async-component-${getRouteStringFromRoutes(props.routes)}`);\n    }\n  }\n\n  componentWillMount() {\n    this.api = new Client();\n    this.fetchData();\n\n    if (this.reloadOnVisible) {\n      document.addEventListener('visibilitychange', this.visibilityReloader);\n    }\n  }\n\n  // Compatiblity shim for child classes that call super on this hook.\n  componentWillReceiveProps(_newProps: P, _newContext: any) {}\n\n  componentDidUpdate(prevProps: P, prevContext: any) {\n    const isRouterInContext = !!prevContext.router;\n    const isLocationInProps = prevProps.location !== undefined;\n\n    const currentLocation = isLocationInProps\n      ? this.props.location\n      : isRouterInContext\n      ? this.context.router.location\n      : null;\n    const prevLocation = isLocationInProps\n      ? prevProps.location\n      : isRouterInContext\n      ? prevContext.router.location\n      : null;\n\n    if (!(currentLocation && prevLocation)) {\n      return;\n    }\n\n    // Take a measurement from when this component is initially created until it finishes it's first\n    // set of API requests\n    if (\n      !this._measurement.hasMeasured &&\n      this._measurement.finished &&\n      this.props.routes\n    ) {\n      const routeString = getRouteStringFromRoutes(this.props.routes);\n      metric.measure({\n        name: 'app.component.async-component',\n        start: `async-component-${routeString}`,\n        data: {\n          route: routeString,\n          error: this._measurement.error,\n        },\n      });\n      this._measurement.hasMeasured = true;\n\n      // sentry apm profiling\n      if (typeof this.props.finishProfile === 'function') {\n        this.props.finishProfile();\n      }\n    }\n\n    // Re-fetch data when router params change.\n    if (\n      !isEqual(this.props.params, prevProps.params) ||\n      currentLocation.search !== prevLocation.search ||\n      currentLocation.state !== prevLocation.state\n    ) {\n      this.remountComponent();\n    }\n  }\n\n  componentWillUnmount() {\n    this.api.clear();\n    document.removeEventListener('visibilitychange', this.visibilityReloader);\n  }\n\n  api: Client = new Client();\n  private _measurement: any;\n\n  // XXX: cant call this getInitialState as React whines\n  getDefaultState(): AsyncComponentState {\n    const endpoints = this.getEndpoints();\n    const state = {\n      // has all data finished requesting?\n      loading: true,\n      // is the component reload\n      reloading: false,\n      // is there an error loading ANY data?\n      error: false,\n      errors: {},\n    };\n    endpoints.forEach(([stateKey, _endpoint]) => {\n      state[stateKey] = null;\n    });\n    return state;\n  }\n\n  // Check if we should measure render time for this component\n  markShouldMeasure = ({\n    remainingRequests,\n    error,\n  }: {remainingRequests?: number; error?: any} = {}) => {\n    if (!this._measurement.hasMeasured) {\n      this._measurement.finished = remainingRequests === 0;\n      this._measurement.error = error || this._measurement.error;\n    }\n  };\n\n  remountComponent = () => {\n    if (this.shouldReload) {\n      this.reloadData();\n    } else {\n      this.setState(this.getDefaultState(), this.fetchData);\n    }\n  };\n\n  visibilityReloader = () =>\n    this.shouldReloadOnVisible &&\n    !this.state.loading &&\n    !document.hidden &&\n    this.reloadData();\n\n  reloadData() {\n    this.fetchData({reloading: true});\n  }\n\n  fetchData = (extraState?: object) => {\n    const endpoints = this.getEndpoints();\n\n    if (!endpoints.length) {\n      this.setState({loading: false, error: false});\n      return;\n    }\n\n    // Cancel any in flight requests\n    this.api.clear();\n\n    this.setState({\n      loading: true,\n      error: false,\n      remainingRequests: endpoints.length,\n      ...extraState,\n    });\n\n    endpoints.forEach(([stateKey, endpoint, params, options]) => {\n      options = options || {};\n      // If you're using nested async components/views make sure to pass the\n      // props through so that the child component has access to props.location\n      const locationQuery = (this.props.location && this.props.location.query) || {};\n      let query = (params && params.query) || {};\n      // If paginate option then pass entire `query` object to API call\n      // It should only be expecting `query.cursor` for pagination\n      if (options.paginate || locationQuery.cursor) {\n        query = {...locationQuery, ...query};\n      }\n\n      this.api.request(endpoint, {\n        method: 'GET',\n        ...params,\n        query,\n        success: (data, _, jqXHR) => {\n          this.handleRequestSuccess({stateKey, data, jqXHR}, true);\n        },\n        error: error => {\n          // Allow endpoints to fail\n          // allowError can have side effects to handle the error\n          if (options.allowError && options.allowError(error)) {\n            error = null;\n          }\n          this.handleError(error, [stateKey, endpoint, params, options]);\n        },\n      });\n    });\n  };\n\n  onRequestSuccess(_resp /*{stateKey, data, jqXHR}*/) {\n    // Allow children to implement this\n  }\n\n  onRequestError(_resp, _args) {\n    // Allow children to implement this\n  }\n\n  handleRequestSuccess({stateKey, data, jqXHR}, initialRequest?: boolean) {\n    this.setState(prevState => {\n      const state = {\n        [stateKey]: data,\n        // TODO(billy): This currently fails if this request is retried by SudoModal\n        [`${stateKey}PageLinks`]: jqXHR && jqXHR.getResponseHeader('Link'),\n      };\n\n      if (initialRequest) {\n        state.remainingRequests = prevState.remainingRequests! - 1;\n        state.loading = prevState.remainingRequests! > 1;\n        state.reloading = prevState.reloading && state.loading;\n        this.markShouldMeasure({remainingRequests: state.remainingRequests});\n      }\n\n      return state;\n    });\n    this.onRequestSuccess({stateKey, data, jqXHR});\n  }\n\n  handleError(error, args) {\n    const [stateKey] = args;\n    if (error && error.responseText) {\n      Sentry.addBreadcrumb({\n        message: error.responseText,\n        category: 'xhr',\n        level: Sentry.Severity.Error,\n      });\n    }\n    this.setState(prevState => {\n      const loading = prevState.remainingRequests! > 1;\n      const state: AsyncComponentState = {\n        [stateKey]: null,\n        errors: {\n          ...prevState.errors,\n          [stateKey]: error,\n        },\n        error: prevState.error || !!error,\n        remainingRequests: prevState.remainingRequests! - 1,\n        loading,\n        reloading: prevState.reloading && loading,\n      };\n      this.markShouldMeasure({remainingRequests: state.remainingRequests, error: true});\n\n      return state;\n    });\n    this.onRequestError(error, args);\n  }\n\n  /**\n   * @deprecated use getEndpoints\n   */\n  getEndpointParams() {\n    // eslint-disable-next-line no-console\n    console.warn('getEndpointParams is deprecated');\n    return {};\n  }\n\n  /**\n   * @deprecated use getEndpoints\n   */\n  getEndpoint() {\n    // eslint-disable-next-line no-console\n    console.warn('getEndpoint is deprecated');\n    return null;\n  }\n\n  /**\n   * Return a list of endpoint queries to make.\n   *\n   * return [\n   *   ['stateKeyName', '/endpoint/', {optional: 'query params'}, {options}]\n   * ]\n   */\n  getEndpoints(): [string, string, any?, any?][] {\n    const endpoint = this.getEndpoint();\n    if (!endpoint) {\n      return [];\n    }\n    return [['data', endpoint, this.getEndpointParams()]];\n  }\n\n  renderSearchInput({stateKey, url, ...props}: RenderSearchInputArgs) {\n    const [firstEndpoint] = this.getEndpoints() || [null];\n    const stateKeyOrDefault = stateKey || (firstEndpoint && firstEndpoint[0]);\n    const urlOrDefault = url || (firstEndpoint && firstEndpoint[1]);\n    return (\n      <AsyncComponentSearchInput\n        url={urlOrDefault}\n        {...props}\n        api={this.api}\n        onSuccess={(data, jqXHR) => {\n          this.handleRequestSuccess({stateKey: stateKeyOrDefault, data, jqXHR});\n        }}\n        onError={() => {\n          this.renderError(new Error('Error with AsyncComponentSearchInput'));\n        }}\n      />\n    );\n  }\n\n  renderLoading() {\n    return <LoadingIndicator />;\n  }\n\n  renderError(error?: Error, disableLog = false, disableReport = false): React.ReactNode {\n    const {errors} = this.state;\n\n    // 401s are captured by SudoModal, but may be passed back to AsyncComponent if they close the modal without identifying\n    const unauthorizedErrors = Object.values(errors).find(\n      resp => resp && resp.status === 401\n    );\n\n    // Look through endpoint results to see if we had any 403s, means their role can not access resource\n    const permissionErrors = Object.values(errors).find(\n      resp => resp && resp.status === 403\n    );\n\n    // If all error responses have status code === 0, then show error message but don't\n    // log it to sentry\n    const shouldLogSentry =\n      !!Object.values(errors).find(resp => resp && resp.status !== 0) || disableLog;\n\n    if (unauthorizedErrors) {\n      return (\n        <LoadingError message={t('You are not authorized to access this resource.')} />\n      );\n    }\n\n    if (permissionErrors) {\n      return <PermissionDenied />;\n    }\n\n    if (this.shouldRenderBadRequests) {\n      const badRequests = Object.values(errors)\n        .filter(\n          resp =>\n            resp && resp.status === 400 && resp.responseJSON && resp.responseJSON.detail\n        )\n        .map(resp => resp.responseJSON.detail);\n\n      if (badRequests.length) {\n        return <LoadingError message={badRequests.join('\\n')} />;\n      }\n    }\n\n    return (\n      <RouteError\n        error={error}\n        component={this}\n        disableLogSentry={!shouldLogSentry}\n        disableReport={disableReport}\n        onRetry={this.remountComponent}\n      />\n    );\n  }\n\n  renderComponent() {\n    return this.state.loading && (!this.shouldReload || !this.state.reloading)\n      ? this.renderLoading()\n      : this.state.error\n      ? this.renderError(new Error('Unable to load all required endpoints'))\n      : this.renderBody();\n  }\n\n  /**\n   * Renders once all endpoints have been loaded\n   */\n  renderBody(): React.ReactNode {\n    // Allow children to implement this\n    throw new Error('Not implemented');\n  }\n\n  render() {\n    return this.renderComponent();\n  }\n}\n","import DocumentTitle from 'react-document-title';\nimport React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport space from 'app/styles/space';\nimport {HeaderTitle} from 'app/styles/organization';\n\ntype Props = {\n  // The title\n  title: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n\n  className?: string;\n\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // Actions on opposite end of title bar from the title\n  action?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass SettingsPageHeading extends React.Component<Props> {\n  static propTypes = {\n    icon: PropTypes.node,\n    title: PropTypes.node.isRequired,\n    action: PropTypes.node,\n    tabs: PropTypes.node,\n    // Disables font styles in the title. Allows for more custom titles.\n    noTitleStyles: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {icon, title, action, tabs, noTitleStyles, ...props} = this.props;\n    return (\n      <div {...props}>\n        <TitleAndActions>\n          {icon && <Icon>{icon}</Icon>}\n          {title && (\n            <Title tabs={tabs} styled={noTitleStyles}>\n              <HeaderTitle>{title}</HeaderTitle>\n            </Title>\n          )}\n          {action && <Action tabs={tabs}>{action}</Action>}\n        </TitleAndActions>\n\n        {tabs && <div>{tabs}</div>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p =>\n    !p.styled &&\n    `\n    font-size: 20px;\n    font-weight: bold;`};\n  margin: ${p => (p.tabs ? `${space(4)} 0 ${space(2)}` : `${space(4)} 0`)};\n  flex: 1;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{tabs?: React.ReactNode}>`\n  ${p => (p.tabs ? `margin-top: ${space(2)}` : null)};\n`;\n\nconst StyledSettingsPageHeading = styled(SettingsPageHeading)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nexport default StyledSettingsPageHeading;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\n\ntype Props = {\n  className?: string;\n  id?: string;\n  size?: 'sm' | 'lg';\n  isActive?: boolean;\n  isLoading?: boolean;\n  isDisabled?: boolean;\n  toggle: React.HTMLProps<HTMLButtonElement>['onClick'];\n};\n\nconst Switch: React.FC<Props> = ({\n  size,\n  isActive,\n  isLoading,\n  isDisabled,\n  toggle,\n  id,\n  className,\n}) => (\n  <SwitchButton\n    id={id}\n    type=\"button\"\n    className={className}\n    onClick={isDisabled ? undefined : toggle}\n    role=\"checkbox\"\n    aria-checked={isActive}\n    isLoading={isLoading}\n    isDisabled={isDisabled}\n    isActive={isActive}\n    size={size}\n    data-test-id=\"switch\"\n  >\n    <Toggle isDisabled={isDisabled} isActive={isActive} size={size} />\n  </SwitchButton>\n);\n\nSwitch.propTypes = {\n  id: PropTypes.string,\n  size: PropTypes.oneOf(['sm', 'lg']),\n  isActive: PropTypes.bool,\n  isLoading: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n  toggle: PropTypes.func.isRequired,\n};\n\nSwitch.defaultProps = {\n  size: 'sm',\n};\n\ntype StyleProps = Partial<Props>;\n\nconst getSize = (p: StyleProps) => (p.size === 'sm' ? 16 : 24);\nconst getToggleSize = (p: StyleProps) => getSize(p) - (p.size === 'sm' ? 6 : 10);\nconst getToggleTop = (p: StyleProps) => (p.size === 'sm' ? 2 : 4);\nconst getTranslateX = (p: StyleProps) =>\n  p.isActive ? getToggleTop(p) + getSize(p) : getToggleTop(p);\n\nconst SwitchButton = styled('button')<StyleProps>`\n  display: inline-block;\n  background: none;\n  padding: 0;\n  border: 1px solid ${p => (p.isActive ? p.theme.borderDark : p.theme.borderLight)};\n  position: relative;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.04);\n  transition: 0.15s border ease;\n  cursor: ${p => (p.isLoading || p.isDisabled ? 'not-allowed' : 'pointer')};\n  pointer-events: ${p => (p.isLoading || p.isDisabled ? 'none' : null)};\n  height: ${getSize}px;\n  width: ${p => getSize(p) * 2}px;\n  border-radius: ${getSize}px;\n\n  &:hover,\n  &:focus {\n    outline: none;\n    border-color: ${p => p.theme.borderDark};\n  }\n\n  &:focus,\n  &.focus-visible {\n    outline: none;\n    box-shadow: rgba(209, 202, 216, 0.5) 0 0 0 3px;\n  }\n`;\n\nconst Toggle = styled('span')<StyleProps>`\n  display: block;\n  position: absolute;\n  border-radius: 50%;\n  transition: 0.25s all ease;\n  top: ${getToggleTop}px;\n  transform: translateX(${getTranslateX}px);\n  width: ${getToggleSize}px;\n  height: ${getToggleSize}px;\n  background: ${p => (p.isActive ? p.theme.green : p.theme.gray6)};\n  opacity: ${p => (p.isDisabled ? 0.4 : null)};\n`;\nexport default Switch;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nclass Truncate extends React.Component {\n  static propTypes = {\n    value: PropTypes.string.isRequired,\n    leftTrim: PropTypes.bool,\n    maxLength: PropTypes.number,\n  };\n\n  static defaultProps = {\n    leftTrim: false,\n    maxLength: 50,\n  };\n\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isExpanded: false,\n    };\n  }\n\n  onFocus = e => {\n    const {value, maxLength} = this.props;\n    if (value.length <= maxLength) {\n      return;\n    }\n    this.setState({isExpanded: true});\n  };\n\n  onBlur = e => {\n    if (this.state.isExpanded) {\n      this.setState({isExpanded: false});\n    }\n  };\n\n  render() {\n    const {leftTrim, maxLength, value} = this.props;\n    const isTruncated = value.length > maxLength;\n    let shortValue = '';\n\n    if (isTruncated) {\n      if (leftTrim) {\n        shortValue = (\n          <span>… {value.slice(value.length - (maxLength - 4), value.length)}</span>\n        );\n      } else {\n        shortValue = <span>{value.slice(0, maxLength - 4)} …</span>;\n      }\n    } else {\n      shortValue = value;\n    }\n\n    let className = this.props.className || '';\n    className += ' truncated';\n    if (this.state.isExpanded) {\n      className += ' expanded';\n    }\n\n    return (\n      <span\n        className={className}\n        onMouseOver={this.onFocus}\n        onMouseOut={this.onBlur}\n        onFocus={this.onFocus}\n        onBlur={this.onBlur}\n      >\n        <span className=\"short-value\">{shortValue}</span>\n        {isTruncated && <span className=\"full-value\">{value}</span>}\n      </span>\n    );\n  }\n}\n\nexport default Truncate;\n","import PropTypes from 'prop-types';\nimport {Link} from 'react-router';\nimport React from 'react';\n\nimport {t} from 'app/locale';\nimport AsyncView from 'app/views/asyncView';\nimport Button from 'app/components/button';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport Field from 'app/views/settings/components/forms/field';\nimport IndicatorStore from 'app/stores/indicatorStore';\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'app/components/panels';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport Switch from 'app/components/switch';\nimport Truncate from 'app/components/truncate';\n\nclass ServiceHookRow extends React.Component {\n  static propTypes = {\n    orgId: PropTypes.string.isRequired,\n    projectId: PropTypes.string.isRequired,\n    hook: PropTypes.object.isRequired,\n    onToggleActive: PropTypes.func.isRequired,\n  };\n\n  state = {\n    loading: false,\n    error: false,\n  };\n\n  render() {\n    const {orgId, projectId, hook} = this.props;\n    return (\n      <Field\n        label={\n          <Link to={`/settings/${orgId}/projects/${projectId}/hooks/${hook.id}/`}>\n            <Truncate value={hook.url} />\n          </Link>\n        }\n        help={\n          hook.events && hook.events.length !== 0 ? (\n            <small>{hook.events.join(', ')}</small>\n          ) : (\n            <small>\n              <em>no events configured</em>\n            </small>\n          )\n        }\n      >\n        <Switch\n          isActive={hook.status === 'active'}\n          size=\"lg\"\n          toggle={this.props.onToggleActive}\n        />\n      </Field>\n    );\n  }\n}\n\nexport default class ProjectServiceHooks extends AsyncView {\n  static contextTypes = {\n    organization: PropTypes.object.isRequired,\n  };\n\n  getEndpoints() {\n    const {orgId, projectId} = this.props.params;\n    return [['hookList', `/projects/${orgId}/${projectId}/hooks/`]];\n  }\n\n  onToggleActive = hook => {\n    const {orgId, projectId} = this.props.params;\n    const loadingIndicator = IndicatorStore.add(t('Saving changes..'));\n    this.api.request(`/projects/${orgId}/${projectId}/hooks/${hook.id}/`, {\n      method: 'PUT',\n      data: {\n        isActive: hook.status !== 'active',\n      },\n      success: data => {\n        IndicatorStore.remove(loadingIndicator);\n        const hookList = this.state.hookList.map(h => {\n          if (h.id === data.id) {\n            return {\n              ...h,\n              ...data,\n            };\n          }\n          return h;\n        });\n        this.setState({hookList});\n      },\n      error: () => {\n        IndicatorStore.remove(loadingIndicator);\n        IndicatorStore.add(\n          t('Unable to remove application. Please try again.'),\n          'error',\n          {\n            duration: 3000,\n          }\n        );\n      },\n    });\n  };\n\n  renderEmpty() {\n    return (\n      <EmptyMessage>\n        {t('There are no service hooks associated with this project.')}\n      </EmptyMessage>\n    );\n  }\n\n  renderResults() {\n    const {orgId, projectId} = this.props.params;\n\n    return (\n      <React.Fragment>\n        <PanelHeader key=\"header\">{t('Service Hook')}</PanelHeader>\n        <PanelBody key=\"body\">\n          <PanelAlert type=\"info\" icon=\"icon-circle-exclamation\">\n            Service Hooks are an early adopter preview feature and will change in the\n            future.\n          </PanelAlert>\n          {this.state.hookList.map(hook => {\n            return (\n              <ServiceHookRow\n                key={hook.id}\n                orgId={orgId}\n                projectId={projectId}\n                hook={hook}\n                onToggleActive={this.onToggleActive.bind(this, hook)}\n              />\n            );\n          })}\n        </PanelBody>\n      </React.Fragment>\n    );\n  }\n\n  renderBody() {\n    let body;\n    if (this.state.hookList.length > 0) {\n      body = this.renderResults();\n    } else {\n      body = this.renderEmpty();\n    }\n\n    const {orgId, projectId} = this.props.params;\n    const access = new Set(this.context.organization.access);\n\n    return (\n      <div className=\"ref-project-service-hooks\">\n        <SettingsPageHeader\n          title={t('Service Hooks')}\n          action={\n            access.has('project:write') ? (\n              <Button\n                data-test-id=\"new-service-hook\"\n                to={`/settings/${orgId}/projects/${projectId}/hooks/new/`}\n                size=\"small\"\n                priority=\"primary\"\n              >\n                <span className=\"icon-plus\" />\n                &nbsp;{t('Create New Hook')}\n              </Button>\n            ) : null\n          }\n        />\n        <Panel>{body}</Panel>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}