{"version":3,"sources":["webpack:///./app/components/text.tsx","webpack:///./app/components/modals/redirectToProject.jsx","webpack:///./app/utils/recreateRoute.tsx"],"names":["space","RedirectToProjectModal","props","state","timer","setInterval","window","location","assign","getNewPath","setState","this","params","slug","recreateRoute","projectId","Header","Body","Fragment","t","tct","project","ButtonWrapper","priority","href","React","Component","withRouter","styled","to","options","lastRootIndex","routeIndex","routes","stepBack","paths","map","path","indexOf","slice","baseRoute","query","search","fullRoute","join"],"mappings":"0RAmBe,EAbF,YAAO,MAAV,qBAAG,CAAa,mKACZ,UAEL,2BACmB,yBACC,gDAGA,qBAPzB,IAEA,IACgB,OAAAA,EAAA,GAAM,GACL,OAAAA,EAAA,GAAM,GAGN,OAAAA,EAAA,GAAM,I,snBCJrBC,E,YAWJ,WAAYC,GAAO,0BACjB,4BAAMA,KAEDC,MAAQ,CACXC,MAAO,GAJQ,E,iEAQC,WAClBC,aAAY,WACN,EAAKF,MAAMC,OAAS,EACtBE,OAAOC,SAASC,OAAO,EAAKC,cAI9B,EAAKC,UAAS,SAAAP,GAAK,MAAK,CACtBC,MAAOD,EAAMC,MAAQ,QAEtB,O,mCAGQ,MACYO,KAAKT,MAArBU,EADI,EACJA,OAAQC,EADJ,EACIA,KAEf,OAAOC,YAAc,GAAD,KACfH,KAAKT,MADU,CAElBU,OAAQ,EAAF,GACDA,EADC,CAEJG,UAAWF,S,+BAKR,MACsBF,KAAKT,MAA3BW,EADA,EACAA,KAAMG,EADN,EACMA,OAAQC,EADd,EACcA,KACrB,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACF,EAAD,KAASG,YAAE,kCAEX,kBAACF,EAAD,KACE,6BACE,kBAAC,EAAD,KACE,2BAAIE,YAAE,uCAEN,2BACGC,YACC,4EACA,CACEC,QAAS,gCAASR,GAClBT,MAAO,GAAF,OAAKO,KAAKR,MAAMC,UAI3B,kBAACkB,EAAD,KACE,kBAAC,IAAD,CAAQC,SAAS,UAAUC,KAAMb,KAAKF,cACnCU,YAAE,iBAAkBN,a,GAlEFY,IAAMC,WAArCzB,E,qCA6ES0B,+BAAW1B,GAAX0B,IAGTL,EAAgBM,YAAO,MAAV,oBAAGA,CAAH,2C,kCCxFnB,iEA2Bc,SAAUd,EAAce,EAAyBC,GACtD,IAEHC,EACAC,EAHGC,EAAA,EAAAA,OAAQrB,EAAA,EAAAA,OAAQL,EAAA,EAAAA,SAAU2B,EAAA,EAAAA,SAC3BC,EAAQF,EAAOG,KAAI,SAAC,GAAW,OAAV,EAAAC,MAAkB,MAK3B,iBAAPR,GACTG,EAAaC,EAAOK,QAAQT,GAAM,EAClCE,EAAgB,IAAcI,EAAMI,MAAM,EAAGP,IAAa,SAAAK,GAAQ,YAAAA,EAAK,OAEvEN,EAAgB,IAAcI,GAAO,SAAAE,GAAQ,YAAAA,EAAK,MAGpD,IAAIG,EAAYL,EAAMI,MAAMR,EAAeC,QAEnB,IAAbE,IACTM,EAAYA,EAAUD,MAAM,EAAGL,IAGjC,IAAMO,OAA4B,IAAblC,GAA4BA,EAASmC,OAASnC,EAASmC,OAAS,GAE/EC,EAAY,GAAGH,EAAUI,KAAK,KAAoB,iBAAPf,EAAkB,GAAKA,GAAKY,EAE7E,OAAO,YAAoBE,EAAW/B","file":"RedirectToProjectModal.js","sourcesContent":["import styled from 'react-emotion';\n\nimport space from 'app/styles/space';\nimport textStyles from 'app/styles/text';\nimport Panel from 'app/components/panels/panel';\n\nconst Text = styled('div')`\n  ${textStyles};\n\n  ${Panel} & {\n    padding-left: ${space(2)};\n    padding-right: ${space(2)};\n\n    &:first-child {\n      padding-top: ${space(2)};\n    }\n  }\n`;\n\nexport default Text;\n","import {withRouter} from 'react-router';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport {t, tct} from 'app/locale';\nimport Button from 'app/components/button';\nimport Text from 'app/components/text';\nimport recreateRoute from 'app/utils/recreateRoute';\n\nclass RedirectToProjectModal extends React.Component {\n  static propTypes = {\n    /**\n     * New slug to redirect to\n     */\n    slug: PropTypes.string.isRequired,\n\n    Header: PropTypes.oneOfType([PropTypes.func, PropTypes.node]).isRequired,\n    Body: PropTypes.oneOfType([PropTypes.func, PropTypes.node]).isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      timer: 5,\n    };\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      if (this.state.timer <= 1) {\n        window.location.assign(this.getNewPath());\n        return;\n      }\n\n      this.setState(state => ({\n        timer: state.timer - 1,\n      }));\n    }, 1000);\n  }\n\n  getNewPath() {\n    const {params, slug} = this.props;\n\n    return recreateRoute('', {\n      ...this.props,\n      params: {\n        ...params,\n        projectId: slug,\n      },\n    });\n  }\n\n  render() {\n    const {slug, Header, Body} = this.props;\n    return (\n      <React.Fragment>\n        <Header>{t('Redirecting to New Project...')}</Header>\n\n        <Body>\n          <div>\n            <Text>\n              <p>{t('The project slug has been changed.')}</p>\n\n              <p>\n                {tct(\n                  'You will be redirected to the new project [project] in [timer] seconds...',\n                  {\n                    project: <strong>{slug}</strong>,\n                    timer: `${this.state.timer}`,\n                  }\n                )}\n              </p>\n              <ButtonWrapper>\n                <Button priority=\"primary\" href={this.getNewPath()}>\n                  {t('Continue to %s', slug)}\n                </Button>\n              </ButtonWrapper>\n            </Text>\n          </div>\n        </Body>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withRouter(RedirectToProjectModal);\nexport {RedirectToProjectModal};\n\nconst ButtonWrapper = styled('div')`\n  display: flex;\n  justify-content: flex-end;\n`;\n","import {Location} from 'history';\nimport {PlainRoute} from 'react-router/lib/Route';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\n\ntype Options = {\n  routes: PlainRoute[];\n  location: Location;\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(to: string | PlainRoute, options: Options): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const query = typeof location !== 'undefined' && location.search ? location.search : '';\n\n  const fullRoute = `${baseRoute.join('')}${typeof to !== 'string' ? '' : to}${query}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n"],"sourceRoot":""}