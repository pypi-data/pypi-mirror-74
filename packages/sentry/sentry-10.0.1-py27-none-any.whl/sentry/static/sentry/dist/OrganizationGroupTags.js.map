{"version":3,"sources":["webpack:///./app/components/deviceName.tsx","webpack:///./app/views/organizationGroupDetails/groupTags.jsx"],"names":["deviceNameMapper","model","iOSDeviceList","modelIdentifier","split","modelId","splice","join","modelName","generationByIdentifier","undefined","loadDeviceListModule","props","state","componentDidMount","this","_isMounted","then","setState","componentWillUnmount","render","children","propTypes","string","Component","GroupTags","fetchData","api","group","environments","loading","error","request","id","query","environment","success","data","tagList","prevProps","isEqual","organization","baseUrl","slug","onRetry","map","tag","tagIdx","valueChildren","topValues","tagValue","tagValueIdx","pct","percent","count","totalValues","key","value","data-test-id","className","to","pathname","style","width","name","px","hasButtons","textTransform","fontSize","t","disablePadding","listStyleType","padding","margin","wrap","type","tct","link","href","getTagsDocsUrl","React","withApi","withOrganization"],"mappings":"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","file":"OrganizationGroupTags.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport {IOSDeviceList} from 'app/types/iOSDeviceList';\n\nexport function deviceNameMapper(model: string, iOSDeviceList): string {\n  const modelIdentifier = model.split(' ')[0];\n  const modelId = model\n    .split(' ')\n    .splice(1)\n    .join(' ');\n  const modelName = iOSDeviceList.generationByIdentifier(modelIdentifier);\n  return modelName === undefined ? model : modelName + ' ' + modelId;\n}\n\nexport async function loadDeviceListModule() {\n  return import(/* webpackChunkName: \"iOSDeviceList\" */ 'ios-device-list');\n}\n\ntype Props = {\n  children?: string;\n};\n\ntype State = {\n  iOSDeviceList: IOSDeviceList | null;\n};\n/**\n * This is used to map iOS Device Names to model name.\n * This asynchronously loads the ios-device-list library because of its size\n */\nexport default class DeviceName extends React.Component<Props, State> {\n  static propTypes = {\n    children: PropTypes.string,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      iOSDeviceList: null,\n    };\n  }\n\n  private _isMounted?: boolean;\n\n  componentDidMount() {\n    // This is to handle react's warning on calling setState for unmounted components\n    // Since we can't cancel promises, we need to do this\n    this._isMounted = true;\n\n    // This library is very big, so we are codesplitting it based on size and\n    // the relatively small utility this library provides\n    loadDeviceListModule().then(iOSDeviceList => {\n      if (!this._isMounted) {\n        return;\n      }\n\n      this.setState({iOSDeviceList});\n    });\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    const {children} = this.props;\n    const {iOSDeviceList} = this.state;\n\n    // Children can be undefined, need to return null or else react throws\n    if (!children) {\n      return null;\n    }\n\n    // If library has not loaded yet, then just render the raw model string, better than empty\n    if (!iOSDeviceList) {\n      return children;\n    }\n\n    return (\n      <span data-test-id=\"loaded-device-name\">\n        {deviceNameMapper(children, iOSDeviceList)}\n      </span>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Box, Flex} from 'grid-emotion';\nimport isEqual from 'lodash/isEqual';\n\nimport SentryTypes from 'app/sentryTypes';\nimport Count from 'app/components/count';\nimport DeviceName from 'app/components/deviceName';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {percent} from 'app/utils';\nimport {t, tct} from 'app/locale';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport Alert from 'app/components/alert';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\nimport GlobalSelectionLink from 'app/components/globalSelectionLink';\n\nclass GroupTags extends React.Component {\n  static propTypes = {\n    organization: SentryTypes.Organization.isRequired,\n    group: SentryTypes.Group.isRequired,\n    api: PropTypes.object.isRequired,\n    environments: PropTypes.arrayOf(PropTypes.string).isRequired,\n  };\n\n  constructor() {\n    super();\n    this.state = {\n      tagList: null,\n      loading: true,\n      error: false,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!isEqual(prevProps.environments, this.props.environments)) {\n      this.fetchData();\n    }\n  }\n\n  fetchData = () => {\n    const {api, group, environments} = this.props;\n    this.setState({\n      loading: true,\n      error: false,\n    });\n    api.request(`/issues/${group.id}/tags/`, {\n      query: {environment: environments},\n      success: data => {\n        this.setState({\n          tagList: data,\n          error: false,\n          loading: false,\n        });\n      },\n      error: () => {\n        this.setState({\n          error: true,\n          loading: false,\n        });\n      },\n    });\n  };\n\n  getTagsDocsUrl() {\n    return 'https://docs.sentry.io/hosted/learn/context/';\n  }\n\n  render() {\n    const {group, organization} = this.props;\n\n    let children = [];\n\n    const baseUrl = `/organizations/${organization.slug}/issues/`;\n\n    if (this.state.loading) {\n      return <LoadingIndicator />;\n    } else if (this.state.error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    if (this.state.tagList) {\n      children = this.state.tagList.map((tag, tagIdx) => {\n        const valueChildren = tag.topValues.map((tagValue, tagValueIdx) => {\n          const pct = percent(tagValue.count, tag.totalValues);\n          const query = tagValue.query || `${tag.key}:\"${tagValue.value}\"`;\n          return (\n            <li key={tagValueIdx} data-test-id={tag.key}>\n              <GlobalSelectionLink\n                className=\"tag-bar\"\n                to={{\n                  pathname: `${baseUrl}${group.id}/events/`,\n                  query: {query},\n                }}\n              >\n                <span className=\"tag-bar-background\" style={{width: pct + '%'}} />\n                <span className=\"tag-bar-label\">\n                  <DeviceName>{tagValue.name}</DeviceName>\n                </span>\n                <span className=\"tag-bar-count\">\n                  <Count value={tagValue.count} />\n                </span>\n              </GlobalSelectionLink>\n            </li>\n          );\n        });\n\n        return (\n          <Box key={tagIdx} px={1} width={0.5}>\n            <Panel>\n              <PanelHeader hasButtons style={{textTransform: 'none'}}>\n                <div style={{fontSize: 16}}>{tag.key}</div>\n                <Flex>\n                  <GlobalSelectionLink\n                    className=\"btn btn-default btn-sm\"\n                    to={`${baseUrl}${group.id}/tags/${tag.key}/`}\n                  >\n                    {t('More Details')}\n                  </GlobalSelectionLink>\n                </Flex>\n              </PanelHeader>\n              <PanelBody disablePadding={false}>\n                <ul style={{listStyleType: 'none', padding: 0, margin: 0}}>\n                  {valueChildren}\n                </ul>\n              </PanelBody>\n            </Panel>\n          </Box>\n        );\n      });\n    }\n\n    return (\n      <div>\n        <Flex wrap=\"wrap\">{children}</Flex>\n        <Alert type=\"info\">\n          {tct(\n            'Tags are automatically indexed for searching and breakdown charts. Learn how to [link: add custom tags to issues]',\n            {\n              link: <a href={this.getTagsDocsUrl()} />,\n            }\n          )}\n        </Alert>\n      </div>\n    );\n  }\n}\n\nexport default withApi(withOrganization(GroupTags));\n"],"sourceRoot":""}