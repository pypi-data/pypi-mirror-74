{"version":3,"sources":["webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/views/projectInstall/platform.jsx"],"names":["props","_title","title","objSlug","children","ProjectInstallPlatform","state","loading","error","html","fetchData","a","async","api","params","orgId","projectId","platform","setState","loadDocs","this","window","scrollTo","redirectToNeutralDocs","url","browserHistory","push","project","platforms","find","p","id","issueStreamLink","gettingStartedLink","hasButtons","t","name","Actions","size","href","link","external","type","tct","docLink","disablePadding","onRetry","Fragment","DocumentationWrapper","dangerouslySetInnerHTML","__html","isGettingStarted","priority","to","style","marginTop","location","indexOf","React","Component","styled","space","withApi","withOrganization","withProject"],"mappings":"6FAAA,sCAkBe,IAPoD,SACjEA,GAEA,IAAMC,EAAYD,EAAME,MAAK,MAAMF,EAAMG,QAAO,YAChD,OAAO,kBAAC,IAAa,CAACD,MAAOD,GAASD,EAAMI,Y,mVCKxCC,E,mLAMJC,MAAQ,CACNC,SAAS,EACTC,OAAO,EACPC,KAAM,M,EAmBRC,UAAY,wCAAAC,EAAAC,OAAA,yDACY,EAAKZ,MAApBa,EADG,EACHA,IAAKC,EADF,EACEA,OACLC,EAA8BD,EAA9BC,MAAOC,EAAuBF,EAAvBE,UAAWC,EAAYH,EAAZG,SAEzB,EAAKC,SAAS,CAACX,SAAS,IAJd,oBAAAI,EAAA,MAOaQ,YAASN,EAAKE,EAAOC,EAAWC,IAP7C,gBAODR,EAPC,EAODA,KACP,EAAKS,SAAS,CAACT,SARP,kDAUR,EAAKS,SAAS,CAACV,MAAK,OAVZ,QAaV,EAAKU,SAAS,CAACX,SAAS,IAbd,0D,mEAfVa,KAAKV,YACLW,OAAOC,SAAS,EAAG,GAFD,IAIXL,EAAYG,KAAKpB,MAAMc,OAAvBG,SAGFA,GAAyB,UAAbA,GACfG,KAAKG,0B,8CAwBe,MACKH,KAAKpB,MAAMc,OAA/BC,EADe,EACfA,MAAOC,EADQ,EACRA,UAERQ,EAAM,kBAAH,OAAqBT,EAArB,qBAAuCC,EAAvC,qBAETS,iBAAeC,KAAKF,K,+BAGb,MACmBJ,KAAKpB,MAAxB2B,EADA,EACAA,QAASb,EADT,EACSA,OACTC,EAAoBD,EAApBC,MAAOC,EAAaF,EAAbE,UAERC,EAAWW,IAAUC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,KAAOjB,EAAOG,YAErD,IAAKA,EACH,OAAO,kBAAC,IAAD,MAGT,IAAMe,EAAkB,kBAAH,OAAqBjB,EAArB,4BACnBY,EAAQI,GADW,YAGfE,EAAqB,kBAAH,OAAqBlB,EAArB,qBAAuCC,EAAvC,qBAExB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAakB,YAAU,GACpBC,YAAE,yBAA0B,CAAClB,SAAUA,EAASmB,OACjD,kBAACC,EAAD,KACE,kBAAC,IAAD,CAAQC,KAAK,QAAQC,KAAMN,GACxBE,YAAE,WAEL,kBAAC,IAAD,CAAQG,KAAK,QAAQC,KAAMtB,EAASuB,KAAMC,UAAQ,GAC/CN,YAAE,yBAKT,kBAAC,IAAD,CAAYO,KAAK,QACdC,YAAI,8MAMH,CACE1B,SAAUA,EAASmB,KACnBQ,QAAS,uBAAGL,KAAMtB,EAASuB,UAKjC,kBAAC,IAAD,CAAWK,gBAAgB,GACxBzB,KAAKd,MAAMC,QACV,kBAAC,UAAD,MACEa,KAAKd,MAAME,MACb,kBAAC,IAAD,CAAcsC,QAAS1B,KAAKV,YAE5B,kBAAC,IAAMqC,SAAP,KACE,kBAAC,IAAD,CACE7C,MAAK,UAAKiC,YAAE,aAAP,YAAuBlB,EAASmB,MACrCjC,QAASa,IAEX,kBAACgC,EAAD,CAAsBC,wBAAyB,CAACC,OAAQ9B,KAAKd,MAAMG,SAItEW,KAAK+B,kBACJ,kBAAC,IAAD,CACEC,SAAS,UACTd,KAAK,QACLe,GAAIrB,EACJsB,MAAO,CAACC,UAAW,KAElBpB,YAAE,6C,uCA5Fb,OAAOd,OAAOmC,SAASjB,KAAKkB,QAAQ,mBAAqB,M,GAzBxBC,IAAMC,WAArCtD,E,qCA8HN,IAAM2C,EAAuBY,YAAO,MAAV,qBAAGA,CAAH,sEAUpBvB,EAAUuB,YAAO,MAAV,qBAAGA,CAAH,+CAGCC,YAAM,GAHP,KAOEC,sBAAQC,YAAiBC,YAAY3D","file":"ProjectInstallPlatform.js","sourcesContent":["import React, {FunctionComponent} from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype DocumentTitleProps = {\n  // Main page title\n  title: string;\n  // Organization or project slug to give title some context\n  objSlug: string;\n  children?: React.ReactNode;\n};\n\nconst SentryDocumentTitle: FunctionComponent<DocumentTitleProps> = (\n  props: DocumentTitleProps\n) => {\n  const _title = `${props.title} - ${props.objSlug} - Sentry`;\n  return <DocumentTitle title={_title}>{props.children}</DocumentTitle>;\n};\n\nexport default SentryDocumentTitle;\n","import {browserHistory} from 'react-router';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'app/components/panels';\nimport {loadDocs} from 'app/actionCreators/projects';\nimport {t, tct} from 'app/locale';\nimport Button from 'app/components/button';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport NotFound from 'app/components/errors/notFound';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport SentryTypes from 'app/sentryTypes';\nimport platforms from 'app/data/platforms';\nimport space from 'app/styles/space';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\nimport withProject from 'app/utils/withProject';\n\nclass ProjectInstallPlatform extends React.Component {\n  static propTypes = {\n    api: PropTypes.object,\n    project: SentryTypes.Project.isRequired,\n  };\n\n  state = {\n    loading: true,\n    error: false,\n    html: null,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n    window.scrollTo(0, 0);\n\n    const {platform} = this.props.params;\n\n    //redirect if platform is not known.\n    if (!platform || platform === 'other') {\n      this.redirectToNeutralDocs();\n    }\n  }\n\n  get isGettingStarted() {\n    return window.location.href.indexOf('getting-started') > 0;\n  }\n\n  fetchData = async () => {\n    const {api, params} = this.props;\n    const {orgId, projectId, platform} = params;\n\n    this.setState({loading: true});\n\n    try {\n      const {html} = await loadDocs(api, orgId, projectId, platform);\n      this.setState({html});\n    } catch (error) {\n      this.setState({error});\n    }\n\n    this.setState({loading: false});\n  };\n\n  redirectToNeutralDocs() {\n    const {orgId, projectId} = this.props.params;\n\n    const url = `/organizations/${orgId}/projects/${projectId}/getting-started/`;\n\n    browserHistory.push(url);\n  }\n\n  render() {\n    const {project, params} = this.props;\n    const {orgId, projectId} = params;\n\n    const platform = platforms.find(p => p.id === params.platform);\n\n    if (!platform) {\n      return <NotFound />;\n    }\n\n    const issueStreamLink = `/organizations/${orgId}/issues/?project=${\n      project.id\n    }#welcome`;\n    const gettingStartedLink = `/organizations/${orgId}/projects/${projectId}/getting-started/`;\n\n    return (\n      <Panel>\n        <PanelHeader hasButtons>\n          {t('Configure %(platform)s', {platform: platform.name})}\n          <Actions>\n            <Button size=\"small\" href={gettingStartedLink}>\n              {t('< Back')}\n            </Button>\n            <Button size=\"small\" href={platform.link} external>\n              {t('Full Documentation')}\n            </Button>\n          </Actions>\n        </PanelHeader>\n\n        <PanelAlert type=\"info\">\n          {tct(\n            `\n             This is a quick getting started guide. For in-depth instructions\n             on integrating Sentry with [platform], view\n             [docLink:our complete documentation].\n            `,\n            {\n              platform: platform.name,\n              docLink: <a href={platform.link} />,\n            }\n          )}\n        </PanelAlert>\n\n        <PanelBody disablePadding={false}>\n          {this.state.loading ? (\n            <LoadingIndicator />\n          ) : this.state.error ? (\n            <LoadingError onRetry={this.fetchData} />\n          ) : (\n            <React.Fragment>\n              <SentryDocumentTitle\n                title={`${t('Configure')} ${platform.name}`}\n                objSlug={projectId}\n              />\n              <DocumentationWrapper dangerouslySetInnerHTML={{__html: this.state.html}} />\n            </React.Fragment>\n          )}\n\n          {this.isGettingStarted && (\n            <Button\n              priority=\"primary\"\n              size=\"large\"\n              to={issueStreamLink}\n              style={{marginTop: 20}}\n            >\n              {t('Got it! Take me to the Issue Stream.')}\n            </Button>\n          )}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n\nconst DocumentationWrapper = styled('div')`\n  p {\n    line-height: 1.5;\n  }\n  pre {\n    word-break: break-all;\n    white-space: pre-wrap;\n  }\n`;\n\nconst Actions = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  grid-gap: ${space(1)};\n`;\n\nexport {ProjectInstallPlatform};\nexport default withApi(withOrganization(withProject(ProjectInstallPlatform)));\n"],"sourceRoot":""}