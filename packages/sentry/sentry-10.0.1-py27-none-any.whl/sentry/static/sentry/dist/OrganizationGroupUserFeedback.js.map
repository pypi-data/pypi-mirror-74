{"version":3,"sources":["webpack:///./app/components/dateTime.tsx","webpack:///./app/components/placeholder.tsx","webpack:///./app/views/userFeedback/userFeedbackEmpty.tsx","webpack:////workspace/node_modules/sentry-dreamy-components/dist/user-feedback.svg","webpack:///./app/views/organizationGroupDetails/utils.jsx","webpack:///./app/views/organizationGroupDetails/groupUserFeedback.jsx"],"names":["getFormat","clock24Hours","dateOnly","timeOnly","seconds","shortDate","render","date","utc","user","get","options","format","this","carriedProps","tz","timezone","propTypes","any","isRequired","bool","defaultProps","Component","Placeholder","props","className","children","p","theme","shape","bottomGutter","width","height","componentDidMount","organization","projectIds","window","sentryEmbedCallback","embed","submit","_body","_submitInProgress","setTimeout","onSuccess","hasAnyFeedback","eventKey","org_id","parseInt","id","projects","componentWillUnmount","length","filter","includes","some","hasUserReports","trackAnalytics","eventName","organization_id","loadingProjects","UserFeedbackLanding","IllustrationContainer","CardComponentContainer","Illustration","data","StyledBox","ButtonList","external","onClick","href","priority","eventId","Organization","arrayOf","string","src","UserFeedbackEmpty","module","exports","fetchGroupEventAndMarkSeen","api","orgId","projectId","groupId","envNames","url","query","environment","promise","requestPromise","then","bulkUpdate","itemIds","failSilently","hasSeen","fetchGroupUserReports","Client","includeAllArgs","getEventEnvironment","event","tag","tags","find","key","value","GroupUserFeedback","fetchData","setState","loading","error","group","params","jqXHR","reportList","pageLinks","getResponseHeader","state","prevProps","isEqual","onRetry","map","item","idx","report","slug","issueId","project","React","withOrganization"],"mappings":"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","file":"OrganizationGroupUserFeedback.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport moment from 'moment-timezone';\n\nimport ConfigStore from 'app/stores/configStore';\n\ntype Props = {\n  date: moment.MomentInput;\n  dateOnly?: boolean;\n  timeOnly?: boolean;\n  shortDate?: boolean;\n  seconds?: boolean;\n  utc?: boolean;\n};\n\nclass DateTime extends React.Component<Props> {\n  static propTypes = {\n    date: PropTypes.any.isRequired,\n    dateOnly: PropTypes.bool,\n    timeOnly: PropTypes.bool,\n    shortDate: PropTypes.bool,\n    seconds: PropTypes.bool,\n    utc: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    seconds: true,\n  };\n\n  getFormat = ({clock24Hours}: {clock24Hours: boolean}): string => {\n    const {dateOnly, timeOnly, seconds, shortDate} = this.props;\n\n    // October 26, 2017\n    if (dateOnly) {\n      return 'LL';\n    }\n\n    // 4:57 PM\n    if (timeOnly) {\n      return 'LT';\n    }\n\n    if (shortDate) {\n      return 'MM/DD/YYYY';\n    }\n\n    if (clock24Hours) {\n      return 'MMMM D YYYY HH:mm:ss z';\n    }\n\n    // Oct 26, 2017 11:30:30 AM\n    if (seconds) {\n      return 'll LTS z';\n    }\n\n    // Default is Oct 26, 2017 11:30 AM\n    return 'lll';\n  };\n\n  render() {\n    const {\n      date,\n      seconds, // eslint-disable-line no-unused-vars\n      shortDate, // eslint-disable-line no-unused-vars\n      dateOnly, // eslint-disable-line no-unused-vars\n      utc,\n      timeOnly: _timeOnly, // eslint-disable-line no-unused-vars\n      ...carriedProps\n    } = this.props;\n    const user = ConfigStore.get('user');\n    const options = user ? user.options : {};\n    const format = this.getFormat(options);\n\n    return (\n      <time {...carriedProps}>\n        {utc\n          ? moment.utc(date).format(format)\n          : moment.tz(date, options.timezone).format(format)}\n      </time>\n    );\n  }\n}\n\nexport default DateTime;\n","import React from 'react';\nimport styled from 'react-emotion';\nimport PropTypes from 'prop-types';\n\nimport space from 'app/styles/space';\n\nconst defaultProps = {\n  shape: 'rect' as 'rect' | 'circle',\n  bottomGutter: 0 as Parameters<typeof space>[0],\n  width: '100%',\n  height: '60px',\n};\n\ntype DefaultProps = Readonly<typeof defaultProps>;\n\ntype Props = {\n  className?: string;\n  children?: React.ReactNode;\n} & Partial<DefaultProps>;\n\nconst Placeholder = styled((props: Props) => {\n  const {className, children} = props;\n  return (\n    <div data-test-id=\"loading-placeholder\" className={className}>\n      {children}\n    </div>\n  );\n})<Props>`\n  display: flex;\n  flex-direction: column;\n  flex-shrink: 0;\n  justify-content: center;\n\n  background-color: ${p => p.theme.placeholderBackground};\n  width: ${p => p.width};\n  height: ${p => p.height};\n  ${p => (p.shape === 'circle' ? 'border-radius: 100%;' : '')}\n  ${p =>\n    typeof p.bottomGutter === 'number' && p.bottomGutter > 0\n      ? `margin-bottom: ${space(p.bottomGutter)};`\n      : ''}\n`;\n\nPlaceholder.defaultProps = defaultProps;\n\nPlaceholder.propTypes = {\n  shape: PropTypes.oneOf(['rect', 'circle']),\n  width: PropTypes.string,\n  height: PropTypes.string,\n  bottomGutter: PropTypes.number as any,\n};\n\nexport default Placeholder;\n","import React from 'react';\nimport styled from 'react-emotion';\nimport PropTypes from 'prop-types';\nimport * as Sentry from '@sentry/browser';\n\nimport {Organization, Project} from 'app/types';\nimport {t} from 'app/locale';\nimport {trackAnalyticsEvent, trackAdhocEvent} from 'app/utils/analytics';\nimport Button from 'app/components/button';\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport SentryTypes from 'app/sentryTypes';\nimport space from 'app/styles/space';\nimport userFeedback from 'sentry-dreamy-components/dist/user-feedback.svg';\nimport withOrganization from 'app/utils/withOrganization';\nimport withProjects from 'app/utils/withProjects';\n\ntype Props = {\n  organization: Organization;\n  projects: Project[];\n  loadingProjects: boolean;\n  projectIds?: string[];\n};\n\ntype IllustrationProps = {\n  data: string;\n  className?: string;\n};\n\nclass UserFeedbackEmpty extends React.Component<Props> {\n  static propTypes = {\n    organization: SentryTypes.Organization.isRequired,\n    projectIds: PropTypes.arrayOf(PropTypes.string.isRequired),\n  };\n\n  componentDidMount() {\n    const {organization, projectIds} = this.props;\n\n    window.sentryEmbedCallback = function(embed) {\n      // Mock the embed's submit xhr to always be successful\n      // NOTE: this will not have errors if the form is empty\n      embed.submit = function(_body) {\n        this._submitInProgress = true;\n        setTimeout(() => {\n          this._submitInProgress = false;\n          this.onSuccess();\n        }, 500);\n      };\n    };\n\n    if (this.hasAnyFeedback === false) {\n      // send to reload only due to higher event volume\n      trackAdhocEvent({\n        eventKey: 'user_feedback.viewed',\n        org_id: parseInt(organization.id, 10),\n        projects: projectIds,\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    window.sentryEmbedCallback = null;\n  }\n\n  get hasAnyFeedback() {\n    const {projects, projectIds} = this.props;\n\n    const selectedProjects =\n      projectIds && projectIds.length\n        ? projects.filter(({id}) => projectIds.includes(id))\n        : projects;\n\n    return selectedProjects.some(({hasUserReports}) => hasUserReports);\n  }\n\n  trackAnalytics({eventKey, eventName}: {eventKey: string; eventName: string}) {\n    const {organization, projectIds} = this.props;\n\n    trackAnalyticsEvent({\n      eventKey,\n      eventName,\n      organization_id: organization.id,\n      projects: projectIds,\n    });\n  }\n\n  render() {\n    // Show no user reports if waiting for projects to load or if there is no feedback\n    if (this.props.loadingProjects || this.hasAnyFeedback !== false) {\n      return (\n        <EmptyStateWarning>\n          <p>{t('Sorry, no user reports match your filters.')}</p>\n        </EmptyStateWarning>\n      );\n    }\n    // Show landing page after projects have loaded and it is confirmed no projects have feedback\n    return (\n      <UserFeedbackLanding>\n        <IllustrationContainer>\n          <CardComponentContainer>\n            <Illustration data={userFeedback} />\n          </CardComponentContainer>\n        </IllustrationContainer>\n\n        <StyledBox>\n          <h3>{t('No User Feedback Collected')}</h3>\n          <p>\n            {t(\n              `Don't rely on stack traces and graphs alone to understand\n              the cause and impact of errors. Enable User Feedback to collect\n              your users' comments when they encounter a crash or bug.`\n            )}\n          </p>\n          <ButtonList>\n            <Button\n              external\n              onClick={() =>\n                this.trackAnalytics({\n                  eventKey: 'user_feedback.docs_clicked',\n                  eventName: 'User Feedback Docs Clicked',\n                })\n              }\n              href=\"https://docs.sentry.io/enriching-error-data/user-feedback/\"\n            >\n              {t('Read the docs')}\n            </Button>\n            <Button\n              priority=\"primary\"\n              onClick={() => {\n                Sentry.showReportDialog({\n                  // should never make it to the Sentry API, but just in case, use throwaway id\n                  eventId: '00000000000000000000000000000000',\n                });\n\n                this.trackAnalytics({\n                  eventKey: 'user_feedback.dialog_opened',\n                  eventName: 'User Feedback Dialog Opened',\n                });\n              }}\n            >\n              {t('Open the report dialog')}\n            </Button>\n          </ButtonList>\n        </StyledBox>\n      </UserFeedbackLanding>\n    );\n  }\n}\n\nconst UserFeedbackLanding = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-wrap: wrap;\n  min-height: 450px;\n  padding: ${space(1)};\n`;\n\nconst StyledBox = styled('div')`\n  flex: 1;\n  padding: ${space(3)};\n`;\n\nconst IllustrationContainer = styled(StyledBox)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst CardComponentContainer = styled('div')`\n  width: 550px;\n  height: 340px;\n\n  img {\n    vertical-align: baseline;\n  }\n\n  @media (max-width: 1150px) {\n    font-size: ${p => p.theme.fontSizeMedium};\n    width: 450px;\n  }\n\n  @media (max-width: 1000px) {\n    font-size: ${p => p.theme.fontSizeSmall};\n    width: 320px;\n    max-height: 180px;\n  }\n`;\n\nconst Illustration = styled(({data, className}: IllustrationProps) => (\n  <object data={data} className={className}>\n    <img src={data} className={className} />\n  </object>\n))`\n  width: 100%;\n  height: 100%;\n`;\n\nconst ButtonList = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(130px, max-content));\n  grid-gap: ${space(1)};\n`;\n\nexport {UserFeedbackEmpty};\n\nexport default withOrganization(withProjects(UserFeedbackEmpty));\n","module.exports = __webpack_public_path__ + \"user-feedback.svg\";","import {Client} from 'app/api';\n\n/**\n * Fetches group data and mark as seen\n *\n * @param {String} orgId organization slug\n * @param {String} projectId project slug\n * @param {String} groupId groupId\n * @param {String} eventId eventId or \"latest\" or \"oldest\"\n * @returns {Promise<Object>}\n */\nexport function fetchGroupEventAndMarkSeen(\n  api,\n  orgId,\n  projectId,\n  groupId,\n  eventId,\n  envNames\n) {\n  const url =\n    eventId === 'latest' || eventId === 'oldest'\n      ? `/issues/${groupId}/events/${eventId}/`\n      : `/projects/${orgId}/${projectId}/events/${eventId}/`;\n\n  const query = {};\n  if (envNames.length !== 0) {\n    query.environment = envNames;\n  }\n\n  const promise = api.requestPromise(url, {query});\n\n  promise.then(data => {\n    api.bulkUpdate({\n      orgId,\n      projectId,\n      itemIds: [groupId],\n      failSilently: true,\n      data: {hasSeen: true},\n    });\n    return data;\n  });\n\n  return promise;\n}\n\nexport function fetchGroupUserReports(groupId, query) {\n  const api = new Client();\n\n  return api.requestPromise(`/issues/${groupId}/user-reports/`, {\n    includeAllArgs: true,\n    query,\n  });\n}\n\n/**\n * Returns the environment name for an event or null\n *\n * @param {Object} event\n * @returns {String|Void}\n */\nexport function getEventEnvironment(event) {\n  const tag = event.tags.find(({key}) => key === 'environment');\n\n  return tag ? tag.value : null;\n}\n","import React from 'react';\nimport isEqual from 'lodash/isEqual';\n\nimport SentryTypes from 'app/sentryTypes';\nimport EventUserFeedback from 'app/components/events/userFeedback';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {Panel} from 'app/components/panels';\nimport Pagination from 'app/components/pagination';\nimport withOrganization from 'app/utils/withOrganization';\nimport UserFeedbackEmpty from 'app/views/userFeedback/userFeedbackEmpty';\nimport {fetchGroupUserReports} from './utils';\n\nclass GroupUserFeedback extends React.Component {\n  static propTypes = {\n    organization: SentryTypes.Organization.isRequired,\n    group: SentryTypes.Group.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      error: false,\n      reportList: [],\n      pageLinks: '',\n    };\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!isEqual(prevProps.params, this.props.params)) {\n      this.fetchData();\n    }\n  }\n\n  fetchData = () => {\n    this.setState({\n      loading: true,\n      error: false,\n    });\n\n    fetchGroupUserReports(this.props.group.id, this.props.params)\n      .then(([data, _, jqXHR]) => {\n        this.setState({\n          error: false,\n          loading: false,\n          reportList: data,\n          pageLinks: jqXHR.getResponseHeader('Link'),\n        });\n      })\n      .catch(() => {\n        this.setState({\n          error: true,\n          loading: false,\n        });\n      });\n  };\n\n  render() {\n    const {reportList} = this.state;\n    const {organization, group} = this.props;\n\n    if (this.state.loading) {\n      return <LoadingIndicator />;\n    } else if (this.state.error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    if (reportList.length) {\n      return (\n        <div className=\"row\">\n          <div className=\"col-md-9\">\n            {reportList.map((item, idx) => {\n              return (\n                <EventUserFeedback\n                  key={idx}\n                  report={item}\n                  orgId={organization.slug}\n                  issueId={group.id}\n                />\n              );\n            })}\n            <Pagination pageLinks={this.state.pageLinks} />\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <Panel>\n        <UserFeedbackEmpty projectIds={[group.project.id]} />\n      </Panel>\n    );\n  }\n}\n\nexport default withOrganization(GroupUserFeedback);\n"],"sourceRoot":""}