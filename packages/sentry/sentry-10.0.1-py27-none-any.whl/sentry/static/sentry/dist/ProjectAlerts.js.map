{"version":3,"sources":["webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/components/navTabs.tsx","webpack:///./app/components/links/listLink.tsx","webpack:///./app/views/settings/projectAlerts/projectAlertHeader.jsx","webpack:///./app/views/settings/projectAlerts/index.tsx"],"names":["render","icon","title","action","tabs","noTitleStyles","props","TitleAndActions","Icon","Title","styled","Action","propTypes","node","isRequired","bool","defaultProps","Component","p","StyledSettingsPageHeading","SettingsPageHeading","underlined","className","mergedClassName","tabProps","isActive","to","query","index","context","router","pathname","getClassName","_classNames","activeClassName","children","carriedProps","this","onlyActiveOnIndex","displayName","contextTypes","object","withOrganization","organization","projectId","canEditRule","access","includes","basePath","slug","t","disabled","priority","size","React","params","Fragment"],"mappings":"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","file":"ProjectAlerts.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport space from 'app/styles/space';\nimport {HeaderTitle} from 'app/styles/organization';\n\ntype Props = {\n  // The title\n  title: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n\n  className?: string;\n\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // Actions on opposite end of title bar from the title\n  action?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass SettingsPageHeading extends React.Component<Props> {\n  static propTypes = {\n    icon: PropTypes.node,\n    title: PropTypes.node.isRequired,\n    action: PropTypes.node,\n    tabs: PropTypes.node,\n    // Disables font styles in the title. Allows for more custom titles.\n    noTitleStyles: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {icon, title, action, tabs, noTitleStyles, ...props} = this.props;\n    return (\n      <div {...props}>\n        <TitleAndActions>\n          {icon && <Icon>{icon}</Icon>}\n          {title && (\n            <Title tabs={tabs} styled={noTitleStyles}>\n              <HeaderTitle>{title}</HeaderTitle>\n            </Title>\n          )}\n          {action && <Action tabs={tabs}>{action}</Action>}\n        </TitleAndActions>\n\n        {tabs && <div>{tabs}</div>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p =>\n    !p.styled &&\n    `\n    font-size: 20px;\n    font-weight: bold;`};\n  margin: ${p => (p.tabs ? `${space(4)} 0 ${space(2)}` : `${space(4)} 0`)};\n  flex: 1;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{tabs?: React.ReactNode}>`\n  ${p => (p.tabs ? `margin-top: ${space(2)}` : null)};\n`;\n\nconst StyledSettingsPageHeading = styled(SettingsPageHeading)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nexport default StyledSettingsPageHeading;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\ntype Props = {\n  underlined?: boolean;\n  className?: string;\n};\n\ntype NavProps = Omit<React.HTMLProps<HTMLUListElement>, keyof Props> & Props;\n\nfunction NavTabs(props: NavProps) {\n  const {underlined, className, ...tabProps} = props;\n  const mergedClassName = classnames('nav nav-tabs', className, {\n    'border-bottom': underlined,\n  });\n  return <ul className={mergedClassName} {...tabProps} />;\n}\n\nNavTabs.propTypes = {\n  underlined: PropTypes.bool,\n};\n\nexport default NavTabs;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport omit from 'lodash/omit';\nimport {Link} from 'react-router';\nimport classNames from 'classnames';\nimport {LocationDescriptor} from 'history';\n\ntype Props = {\n  to: LocationDescriptor;\n  index: boolean;\n  activeClassName: string;\n  className?: string;\n  query?: string;\n  onClick?: () => void;\n  // If supplied by parent component, decides whether link element\n  // is \"active\" or not ... overriding default behavior of strict\n  // route matching\n  isActive?: (location: LocationDescriptor, indexOnly?: boolean) => boolean;\n};\n\nclass ListLink extends React.Component<Props> {\n  static displayName = 'ListLink';\n\n  static contextTypes = {\n    router: PropTypes.object.isRequired,\n  };\n\n  static defaultProps: Partial<Props> = {\n    activeClassName: 'active',\n    index: false,\n  };\n\n  isActive = () => {\n    const {isActive, to, query, index} = this.props;\n\n    return (isActive || this.context.router.isActive)({pathname: to, query}, index);\n  };\n\n  getClassName = () => {\n    const _classNames = {};\n    const {className, activeClassName} = this.props;\n\n    if (className) {\n      _classNames[className] = true;\n    }\n\n    if (this.isActive()) {\n      _classNames[activeClassName] = true;\n    }\n\n    return classNames(_classNames);\n  };\n\n  render() {\n    const {index, children} = this.props;\n    const carriedProps = omit(this.props, 'activeClassName', 'isActive', 'index');\n\n    return (\n      <li className={this.getClassName()}>\n        <Link {...carriedProps} onlyActiveOnIndex={index}>\n          {children}\n        </Link>\n      </li>\n    );\n  }\n}\n\nexport default ListLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {t} from 'app/locale';\nimport SentryTypes from 'app/sentryTypes';\nimport Button from 'app/components/button';\nimport ListLink from 'app/components/links/listLink';\nimport NavTabs from 'app/components/navTabs';\n\nimport Tooltip from 'app/components/tooltip';\n\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\n\nimport withOrganization from 'app/utils/withOrganization';\n\nexport default withOrganization(\n  class ProjectAlertHeader extends React.Component {\n    static propTypes = {\n      organization: SentryTypes.Organization.isRequired,\n      projectId: PropTypes.string.isRequired,\n    };\n\n    render() {\n      const {organization, projectId} = this.props;\n\n      const canEditRule = organization.access.includes('project:write');\n\n      const basePath = `/settings/${organization.slug}/projects/${projectId}/alerts/`;\n\n      return (\n        <SettingsPageHeader\n          title={t('Alerts')}\n          action={\n            <Tooltip\n              disabled={canEditRule}\n              title={t('You do not have permission to edit alert rules.')}\n            >\n              <Button\n                to={`${basePath}rules/new/`}\n                disabled={!canEditRule}\n                priority=\"primary\"\n                size=\"small\"\n                icon=\"icon-circle-add\"\n              >\n                {t('New Alert Rule')}\n              </Button>\n            </Tooltip>\n          }\n          tabs={\n            <NavTabs underlined>\n              <ListLink to={`${basePath}rules/`}>{t('Rules')}</ListLink>\n              <ListLink to={`${basePath}settings/`}>{t('Settings')}</ListLink>\n            </NavTabs>\n          }\n        />\n      );\n    }\n  }\n);\n","import {Params} from 'react-router/lib/Router';\nimport React from 'react';\n\nimport ProjectAlertHeader from './projectAlertHeader';\n\ntype Props = {\n  params: Params;\n  children: React.ReactNode;\n};\n\nfunction ProjectAlerts({params, children}: Props) {\n  return (\n    <React.Fragment>\n      <ProjectAlertHeader projectId={params.projectId} />\n      {children}\n    </React.Fragment>\n  );\n}\n\nexport default ProjectAlerts;\n"],"sourceRoot":""}