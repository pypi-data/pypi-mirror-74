{"version":3,"sources":["webpack:///./app/components/badge.tsx","webpack:///./app/views/settings/components/settingsNavItem.tsx","webpack:///./app/views/settings/components/settingsNavigationGroup.tsx","webpack:///./app/views/settings/components/settingsNavigation.tsx","webpack:///./app/views/settings/account/accountSettingsNavigation.tsx","webpack:///./app/views/settings/account/accountSettingsLayout.jsx"],"names":["priorityColors","new","red","strong","blue","highlight","green","Badge","priority","text","props","p","StyledTag","StyledNavItem","theme","badge","label","index","id","LabelHook","hookName","defaultComponent","children","Fragment","renderedBadge","size","border","onlyActiveOnIndex","activeClassName","NavSection","SettingsHeading","organization","project","name","items","map","path","title","show","badgeResult","to","replaceRouterParams","orgId","slug","projectId","key","componentDidCatch","error","errorInfo","scope","Object","keys","forEach","setExtra","window","location","href","render","navigationObjects","hooks","hookConfigs","navWithHooks","concat","config","otherProps","Hook","i","cloneElement","defaultProps","Component","navigationConfiguration","AccountSettingsLayout","this","prevProps","access","fetchOrganizationDetails","setActive","loadProjects","renderNavigation","React","childContextTypes","SentryTypes","Organization","withLatestContext"],"mappings":"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","file":"AccountSettingsLayout.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\nimport space from 'app/styles/space';\nimport theme from 'app/utils/theme';\n\nconst priorityColors = {\n  new: theme.red,\n  strong: theme.blue,\n  highlight: theme.green,\n} as const;\n\ntype Props = React.HTMLProps<HTMLSpanElement> & {\n  text?: string | number | null;\n  priority?: keyof typeof priorityColors;\n  className?: string;\n};\n\nconst Badge = styled(({priority, text, ...props}: Props) => (\n  <span {...props}>{text}</span>\n))<Props>`\n  display: inline-block;\n  height: 20px;\n  min-width: 20px;\n  line-height: 20px;\n  border-radius: 20px;\n  padding: 0 5px;\n  margin-left: ${space(0.5)};\n  font-size: 75%;\n  font-weight: 600;\n  text-align: center;\n  color: #fff;\n  background: ${p => (p.priority ? priorityColors[p.priority] : theme.gray1)};\n  transition: background 100ms linear;\n\n  position: relative;\n  top: -1px;\n`;\n\nBadge.propTypes = {\n  text: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  priority: PropTypes.oneOf(['strong', 'new', 'highlight']),\n} as any;\n\nexport default Badge;\n","import {Link} from 'react-router';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport Badge from 'app/components/badge';\nimport HookOrDefault from 'app/components/hookOrDefault';\nimport Tag from 'app/views/settings/components/tag';\n\ntype Props = {\n  to: React.ComponentProps<Link>['to'];\n  label: React.ReactNode;\n  badge?: string | number | null;\n  index?: boolean;\n  id?: string;\n};\n\nconst SettingsNavItem = ({badge, label, index, id, ...props}: Props) => {\n  const LabelHook = HookOrDefault({\n    hookName: 'sidebar:item-label',\n    defaultComponent: ({children}) => <React.Fragment>{children}</React.Fragment>,\n  });\n\n  const renderedBadge =\n    badge === 'new' ? (\n      <StyledTag priority=\"warning\" size=\"small\" border>\n        {badge}\n      </StyledTag>\n    ) : (\n      <Badge text={badge} />\n    );\n\n  return (\n    <StyledNavItem onlyActiveOnIndex={index} activeClassName=\"active\" {...props}>\n      <LabelHook id={id}>{label}</LabelHook>\n\n      {badge ? renderedBadge : null}\n    </StyledNavItem>\n  );\n};\n\nconst StyledTag = styled(Tag)`\n  margin-left: 0.25em;\n`;\n\nconst StyledNavItem = styled(Link)`\n  display: block;\n  color: ${p => p.theme.gray2};\n  font-size: 14px;\n  line-height: 30px;\n  position: relative;\n\n  &.active {\n    color: ${p => p.theme.gray5};\n\n    &:before {\n      background: ${p => p.theme.purple};\n    }\n  }\n\n  &:hover,\n  &:focus,\n  &:active {\n    color: ${p => p.theme.gray5};\n    outline: none;\n  }\n\n  &.focus-visible {\n    outline: none;\n    background: #f2eff5;\n    padding: 0 15px;\n    margin: 0 -15px;\n    border-radius: 3px;\n\n    &:before {\n      left: -15px;\n    }\n  }\n\n  &:before {\n    position: absolute;\n    content: '';\n    display: block;\n    top: 4px;\n    left: -30px;\n    height: 20px;\n    width: 4px;\n    background: transparent;\n    border-radius: 0 2px 2px 0;\n  }\n`;\n\nexport default SettingsNavItem;\n","import React from 'react';\nimport styled from 'react-emotion';\n\nimport SettingsNavItem from 'app/views/settings/components/settingsNavItem';\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport {NavigationGroupProps} from 'app/views/settings/types';\n\nconst SettingsNavigationGroup = (props: NavigationGroupProps) => {\n  const {organization, project, name, items} = props;\n\n  return (\n    <NavSection data-test-id={name}>\n      <SettingsHeading>{name}</SettingsHeading>\n      {items.map(({path, title, index, show, badge, id}) => {\n        if (typeof show === 'function' && !show(props)) {\n          return null;\n        }\n        if (typeof show !== 'undefined' && !show) {\n          return null;\n        }\n        const badgeResult = typeof badge === 'function' ? badge(props) : null;\n        const to = replaceRouterParams(path, {\n          ...(organization ? {orgId: organization.slug} : {}),\n          ...(project ? {projectId: project.slug} : {}),\n        });\n\n        return (\n          <SettingsNavItem\n            key={title}\n            to={to}\n            label={title}\n            index={index}\n            badge={badgeResult}\n            id={id}\n          />\n        );\n      })}\n    </NavSection>\n  );\n};\n\nconst NavSection = styled('div')`\n  margin-bottom: 20px;\n`;\n\nconst SettingsHeading = styled('div')`\n  color: ${p => p.theme.gray3};\n  font-size: 12px;\n  font-weight: 600;\n  text-transform: uppercase;\n  margin-bottom: 20px;\n`;\n\nexport default SettingsNavigationGroup;\n","import * as Sentry from '@sentry/browser';\nimport React from 'react';\n\nimport SettingsNavigationGroup from 'app/views/settings/components/settingsNavigationGroup';\nimport {NavigationSection, NavigationProps} from 'app/views/settings/types';\n\ntype Props = NavigationProps & {\n  /**\n   * The configuration for this navigation panel\n   */\n  navigationObjects: NavigationSection[];\n  /**\n   * Additional navigation configuration driven by hooks\n   */\n  hookConfigs: NavigationSection[];\n  /**\n   * Additional navigation elements driven from hooks\n   */\n  hooks: React.ReactElement[];\n};\n\nclass SettingsNavigation extends React.Component<Props> {\n  static defaultProps = {\n    hooks: [],\n    hookConfigs: [],\n  };\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    Sentry.withScope(scope => {\n      Object.keys(errorInfo).forEach(key => {\n        scope.setExtra(key, errorInfo[key]);\n      });\n      scope.setExtra('url', window.location.href);\n      Sentry.captureException(error);\n    });\n  }\n\n  render() {\n    const {navigationObjects, hooks, hookConfigs, ...otherProps} = this.props;\n    const navWithHooks = navigationObjects.concat(hookConfigs);\n\n    return (\n      <div>\n        {navWithHooks.map(config => (\n          <SettingsNavigationGroup key={config.name} {...otherProps} {...config} />\n        ))}\n        {hooks.map((Hook, i) => React.cloneElement(Hook, {key: `hook-${i}`}))}\n      </div>\n    );\n  }\n}\n\nexport default SettingsNavigation;\n","import React from 'react';\n\nimport SettingsNavigation from 'app/views/settings/components/settingsNavigation';\nimport navigationConfiguration from 'app/views/settings/account/navigationConfiguration';\n\nconst AccountSettingsNavigation = () => {\n  return <SettingsNavigation navigationObjects={navigationConfiguration} />;\n};\n\nexport default AccountSettingsNavigation;\n","import React from 'react';\n\nimport AccountSettingsNavigation from 'app/views/settings/account/accountSettingsNavigation';\nimport {fetchOrganizationDetails} from 'app/actionCreators/organizations';\nimport SentryTypes from 'app/sentryTypes';\nimport SettingsLayout from 'app/views/settings/components/settingsLayout';\nimport withLatestContext from 'app/utils/withLatestContext';\n\nclass AccountSettingsLayout extends React.Component {\n  static propTypes = {\n    organization: SentryTypes.Organization,\n  };\n\n  static childContextTypes = {\n    organization: SentryTypes.Organization,\n  };\n\n  getChildContext() {\n    return {\n      organization: this.props.organization,\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const {organization} = this.props;\n    if (prevProps.organization === organization) {\n      return;\n    }\n\n    // if there is no org in context, SidebarDropdown uses an org from `withLatestContext`\n    // (which queries the org index endpoint instead of org details)\n    // and does not have `access` info\n    if (organization && typeof organization.access === 'undefined') {\n      fetchOrganizationDetails(organization.slug, {\n        setActive: true,\n        loadProjects: true,\n      });\n    }\n  }\n\n  render() {\n    return (\n      <SettingsLayout\n        {...this.props}\n        renderNavigation={() => <AccountSettingsNavigation {...this.props} />}\n      >\n        {this.props.children}\n      </SettingsLayout>\n    );\n  }\n}\n\nexport default withLatestContext(AccountSettingsLayout);\n"],"sourceRoot":""}