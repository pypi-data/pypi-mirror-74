{"version":3,"sources":["webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/views/settings/projectAlerts/projectAlertHeaderNew.tsx","webpack:///./app/views/settings/projectAlerts/new.tsx"],"names":["render","icon","title","action","tabs","noTitleStyles","props","TitleAndActions","Icon","Title","styled","Action","propTypes","node","isRequired","bool","defaultProps","Component","p","StyledSettingsPageHeading","SettingsPageHeading","params","organization","projectId","canEditRule","access","includes","basePath","slug","Actions","to","size","disabled","priority","withOrganization","space","children","Fragment"],"mappings":"0KAyBA,2B,+CAgCA,OAhCkC,iBAchC,YAAAA,OAAA,WACE,IAAM,aAACC,EAAA,EAAAA,KAAMC,EAAA,EAAAA,MAAOC,EAAA,EAAAA,OAAQC,EAAA,EAAAA,KAAMC,EAAA,EAAAA,cAAe,kEACjD,OACE,uCAASC,GACP,kBAACC,EAAe,KACbN,GAAQ,kBAACO,EAAI,KAAEP,GACfC,GACC,kBAACO,EAAK,CAACL,KAAMA,EAAMM,OAAQL,GACzB,kBAAC,IAAW,KAAEH,IAGjBC,GAAU,kBAACQ,EAAM,CAACP,KAAMA,GAAOD,IAGjCC,GAAQ,6BAAMA,KA3Bd,EAAAQ,UAAY,CACjBX,KAAM,IAAUY,KAChBX,MAAO,IAAUW,KAAKC,WACtBX,OAAQ,IAAUU,KAClBT,KAAM,IAAUS,KAEhBR,cAAe,IAAUU,MAGpB,EAAAC,aAAe,CACpBX,eAAe,GAqBnB,EAhCA,CAAkC,IAAMY,WAuClCV,EAAkB,YAAO,MAAV,qBAAG,CAAa,uHAK/BE,EAAQ,YAAO,MAAV,qBAAG,CAAa,8DAA8C,OAKlD,gBACkD,sBALrE,SAAAS,GACA,OAACA,EAAER,QACH,oDAGQ,SAAAQ,GAAK,OAACA,EAAEd,KAAU,YAAM,GAAE,MAAM,YAAM,GAAU,YAAM,GAAjD,QAIXI,EAAO,YAAO,MAAV,qBAAG,CAAa,qEACA,SAAR,YAAM,IAGlBG,EAAS,YAAO,MAAV,qBAAG,CAAa,kCAA0B,OACF,UAAhD,SAAAO,GAAK,OAACA,EAAEd,KAAO,eAAe,YAAM,GAA/B,QAGHe,EAA4B,YAAOC,EAAV,qBAAG,CAA2B,mEAE5D,wCAEwB,SAAR,YAAM,IAGR,O,8HC9Ef,2B,+CAoCA,OApCiC,iBAC/B,YAAApB,OAAA,WACQ,iBAACqB,EAAA,EAAAA,OAAQC,EAAA,EAAAA,aACRC,EAAA,EAAAA,UAEDC,EAAcF,EAAaG,OAAOC,SAAS,iBAE3CC,EAAW,aAAaL,EAAaM,KAAI,aAAaL,EAAS,cAErE,OACE,kBAAC,IAAkB,CACjBrB,MAAO,YAAE,UACTC,OACE,kBAAC0B,EAAO,KACN,kBAAC,IAAM,CAACC,GAAOH,EAAQ,YAAaI,KAAK,QAAQ9B,KAAK,iBACnD,YAAE,aAEL,kBAAC,IAAO,CACN+B,SAAUR,EACVtB,MAAO,YAAE,oDAET,kBAAC,IAAM,CACL4B,GAAOH,EAAQ,OACfK,UAAWR,EACXS,SAAS,UACTF,KAAK,QACL9B,KAAK,mBAEJ,YAAE,wBAQnB,EApCA,CAAiC,IAAMgB,WAsCxB,SAAAiB,EAAA,GAAiB,GAE1BL,EAAU,YAAO,MAAV,oBAAG,CAAa,uJAGP,SAAR,OAAAM,EAAA,GAAM,ICzCL,UATf,SAAuB,GAAC,IAAAC,EAAA,EAAAA,SAAU,8BAChC,OACE,kBAAC,IAAMC,SAAQ,KACb,kBAAC,EAAkB,eAAK/B,IACvB8B","file":"ProjectAlertsNew.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport space from 'app/styles/space';\nimport {HeaderTitle} from 'app/styles/organization';\n\ntype Props = {\n  // The title\n  title: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n\n  className?: string;\n\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // Actions on opposite end of title bar from the title\n  action?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass SettingsPageHeading extends React.Component<Props> {\n  static propTypes = {\n    icon: PropTypes.node,\n    title: PropTypes.node.isRequired,\n    action: PropTypes.node,\n    tabs: PropTypes.node,\n    // Disables font styles in the title. Allows for more custom titles.\n    noTitleStyles: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {icon, title, action, tabs, noTitleStyles, ...props} = this.props;\n    return (\n      <div {...props}>\n        <TitleAndActions>\n          {icon && <Icon>{icon}</Icon>}\n          {title && (\n            <Title tabs={tabs} styled={noTitleStyles}>\n              <HeaderTitle>{title}</HeaderTitle>\n            </Title>\n          )}\n          {action && <Action tabs={tabs}>{action}</Action>}\n        </TitleAndActions>\n\n        {tabs && <div>{tabs}</div>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p =>\n    !p.styled &&\n    `\n    font-size: 20px;\n    font-weight: bold;`};\n  margin: ${p => (p.tabs ? `${space(4)} 0 ${space(2)}` : `${space(4)} 0`)};\n  flex: 1;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{tabs?: React.ReactNode}>`\n  ${p => (p.tabs ? `margin-top: ${space(2)}` : null)};\n`;\n\nconst StyledSettingsPageHeading = styled(SettingsPageHeading)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nexport default StyledSettingsPageHeading;\n","import {RouteComponentProps} from 'react-router/lib/Router';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport {Organization} from 'app/types';\nimport {t} from 'app/locale';\nimport Button from 'app/components/button';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport Tooltip from 'app/components/tooltip';\nimport space from 'app/styles/space';\nimport withOrganization from 'app/utils/withOrganization';\n\ntype Props = {\n  organization: Organization;\n} & Pick<RouteComponentProps<{projectId: string}, {}>, 'params'>;\n\nclass ProjectAlertHeader extends React.Component<Props> {\n  render() {\n    const {params, organization} = this.props;\n    const {projectId} = params;\n\n    const canEditRule = organization.access.includes('project:write');\n\n    const basePath = `/settings/${organization.slug}/projects/${projectId}/alerts-v2/`;\n\n    return (\n      <SettingsPageHeader\n        title={t('Alerts')}\n        action={\n          <Actions>\n            <Button to={`${basePath}settings/`} size=\"small\" icon=\"icon-settings\">\n              {t('Settings')}\n            </Button>\n            <Tooltip\n              disabled={canEditRule}\n              title={t('You do not have permission to edit alert rules.')}\n            >\n              <Button\n                to={`${basePath}new/`}\n                disabled={!canEditRule}\n                priority=\"primary\"\n                size=\"small\"\n                icon=\"icon-circle-add\"\n              >\n                {t('New Alert Rule')}\n              </Button>\n            </Tooltip>\n          </Actions>\n        }\n      />\n    );\n  }\n}\n\nexport default withOrganization(ProjectAlertHeader);\n\nconst Actions = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  grid-gap: ${space(1)};\n`;\n","import {RouteComponentProps} from 'react-router/lib/Router';\nimport React from 'react';\n\nimport ProjectAlertHeader from './projectAlertHeaderNew';\n\ntype Props = {\n  children: React.ReactNode;\n} & RouteComponentProps<{organizationId: string; projectId: string}, {}>;\n\nfunction ProjectAlerts({children, ...props}: Props) {\n  return (\n    <React.Fragment>\n      <ProjectAlertHeader {...props} />\n      {children}\n    </React.Fragment>\n  );\n}\n\nexport default ProjectAlerts;\n"],"sourceRoot":""}