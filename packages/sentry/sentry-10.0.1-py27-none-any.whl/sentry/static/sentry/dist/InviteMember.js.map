{"version":3,"sources":["webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/views/settings/components/teamSelect.jsx","webpack:///./app/components/radio.tsx","webpack:///./app/views/settings/organizationMembers/inviteMember/roleSelect.tsx","webpack:///./app/views/settings/organizationMembers/inviteMember/index.jsx"],"names":["render","icon","title","action","tabs","noTitleStyles","props","TitleAndActions","Icon","Title","styled","Action","propTypes","node","isRequired","bool","defaultProps","Component","p","StyledSettingsPageHeading","SettingsPageHeading","TeamSelect","state","teams","fetchTeams","debounce","query","organization","api","requestPromise","slug","then","setState","handleQueryUpdate","event","target","value","handleAddTeam","option","team","find","tm","onAddTeam","handleRemove","teamSlug","onRemoveTeam","this","options","disabled","selectedTeams","menuHeader","noTeams","length","isDisabled","filter","includes","map","searchKey","label","TeamDropdownElement","items","onChange","onSelect","emptyMessage","t","isOpen","aria-label","size","confirmLastTeamRemoveMessage","confirmMessage","TeamRow","key","orgId","onRemove","hasButtons","renderTeamAddDropDown","renderBody","React","TeamPanelItem","StyledLink","to","message","bypass","onConfirm","space","PanelItem","Link","withApi","className","cx","type","otherProps","checked","Label","enforceAllowed","roleList","selectedRole","role","desc","name","id","allowed","onClick","setRole","css","color","cursor","readOnly","style","flex","padding","noMargin","string","array","func","InviteMember","redirectToMemberPage","params","router","pathToParentRoute","test","location","pathname","push","replaceRouterParams","splitEmails","text","split","e","trim","inviteUser","email","Promise","resolve","reject","request","method","data","Array","from","keys","referrer","success","addSuccessMessage","tct","error","err","status","addErrorMessage","responseJSON","submit","emails","busy","all","Sentry","scope","setExtra","Error","has","add","handleRemoveTeam","initialTeamSelection","Set","loading","undefined","isSuperuser","ConfigStore","get","resp","roles","MEMBER_ROLES","invitesEnabled","getConfig","classNames","placeholder","spellCheck","v","values","priority","withRouter","withOrganization"],"mappings":"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","file":"InviteMember.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport space from 'app/styles/space';\nimport {HeaderTitle} from 'app/styles/organization';\n\ntype Props = {\n  // The title\n  title: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n\n  className?: string;\n\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // Actions on opposite end of title bar from the title\n  action?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass SettingsPageHeading extends React.Component<Props> {\n  static propTypes = {\n    icon: PropTypes.node,\n    title: PropTypes.node.isRequired,\n    action: PropTypes.node,\n    tabs: PropTypes.node,\n    // Disables font styles in the title. Allows for more custom titles.\n    noTitleStyles: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {icon, title, action, tabs, noTitleStyles, ...props} = this.props;\n    return (\n      <div {...props}>\n        <TitleAndActions>\n          {icon && <Icon>{icon}</Icon>}\n          {title && (\n            <Title tabs={tabs} styled={noTitleStyles}>\n              <HeaderTitle>{title}</HeaderTitle>\n            </Title>\n          )}\n          {action && <Action tabs={tabs}>{action}</Action>}\n        </TitleAndActions>\n\n        {tabs && <div>{tabs}</div>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p =>\n    !p.styled &&\n    `\n    font-size: 20px;\n    font-weight: bold;`};\n  margin: ${p => (p.tabs ? `${space(4)} 0 ${space(2)}` : `${space(4)} 0`)};\n  flex: 1;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{tabs?: React.ReactNode}>`\n  ${p => (p.tabs ? `margin-top: ${space(2)}` : null)};\n`;\n\nconst StyledSettingsPageHeading = styled(SettingsPageHeading)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nexport default StyledSettingsPageHeading;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\nimport debounce from 'lodash/debounce';\n\nimport {t} from 'app/locale';\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport SentryTypes from 'app/sentryTypes';\nimport Link from 'app/components/links/link';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';\nimport DropdownAutoComplete from 'app/components/dropdownAutoComplete';\nimport DropdownButton from 'app/components/dropdownButton';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport space from 'app/styles/space';\nimport withApi from 'app/utils/withApi';\n\nclass TeamSelect extends React.Component {\n  static propTypes = {\n    api: PropTypes.object.isRequired,\n    organization: SentryTypes.Organization.isRequired,\n    disabled: PropTypes.bool,\n    // Teams that are already selected.\n    selectedTeams: PropTypes.array.isRequired,\n    // callback when teams are added\n    onAddTeam: PropTypes.func.isRequired,\n    // Callback when teams are removed\n    onRemoveTeam: PropTypes.func.isRequired,\n\n    // Optional menu header.\n    menuHeader: PropTypes.element,\n\n    // Message to display when the last team is removed\n    // if empty no confirm will be displayed.\n    confirmLastTeamRemoveMessage: PropTypes.string,\n  };\n\n  state = {\n    teams: null,\n  };\n\n  componentDidMount() {\n    this.fetchTeams();\n  }\n\n  fetchTeams = debounce(query => {\n    const {organization} = this.props;\n    this.props.api\n      .requestPromise(`/organizations/${organization.slug}/teams/`, {\n        query: {query},\n      })\n      .then(teams => this.setState({teams}));\n  }, 100);\n\n  handleQueryUpdate = event => {\n    this.fetchTeams(event.target.value);\n  };\n\n  handleAddTeam = option => {\n    const team = this.state.teams.find(tm => tm.slug === option.value);\n    this.props.onAddTeam(team);\n  };\n\n  handleRemove = teamSlug => {\n    this.props.onRemoveTeam(teamSlug);\n  };\n\n  renderTeamAddDropDown() {\n    const {disabled, selectedTeams, menuHeader} = this.props;\n    const {teams} = this.state;\n    const noTeams = teams === null || teams.length === 0;\n    const isDisabled = noTeams || disabled;\n\n    let options;\n    if (noTeams) {\n      options = [];\n    } else {\n      options = teams\n        .filter(team => {\n          return !selectedTeams.includes(team.slug);\n        })\n        .map(team => ({\n          value: team.slug,\n          searchKey: team.slug,\n          label: <TeamDropdownElement>#{team.slug}</TeamDropdownElement>,\n        }));\n    }\n\n    return (\n      <DropdownAutoComplete\n        items={options}\n        onChange={this.handleQueryUpdate}\n        onSelect={this.handleAddTeam}\n        emptyMessage={t('No teams')}\n        menuHeader={menuHeader}\n        disabled={isDisabled}\n      >\n        {({isOpen}) => (\n          <DropdownButton\n            aria-label={t('Add Team')}\n            isOpen={isOpen}\n            size=\"xsmall\"\n            disabled={isDisabled}\n          >\n            {t('Add Team')}\n          </DropdownButton>\n        )}\n      </DropdownAutoComplete>\n    );\n  }\n\n  renderBody() {\n    const {\n      organization,\n      selectedTeams,\n      disabled,\n      confirmLastTeamRemoveMessage,\n    } = this.props;\n\n    if (selectedTeams.length === 0) {\n      return <EmptyMessage>{t('No Teams assigned')}</EmptyMessage>;\n    }\n    const confirmMessage =\n      selectedTeams.length === 1 && confirmLastTeamRemoveMessage\n        ? confirmLastTeamRemoveMessage\n        : null;\n\n    return selectedTeams.map(team => {\n      return (\n        <TeamRow\n          key={team}\n          orgId={organization.slug}\n          team={team}\n          onRemove={this.handleRemove}\n          disabled={disabled}\n          confirmMessage={confirmMessage}\n        />\n      );\n    });\n  }\n\n  render() {\n    return (\n      <Panel>\n        <PanelHeader hasButtons>\n          {t('Team')}\n          {this.renderTeamAddDropDown()}\n        </PanelHeader>\n\n        <PanelBody>{this.renderBody()}</PanelBody>\n      </Panel>\n    );\n  }\n}\n\nconst TeamRow = props => {\n  const {orgId, team, onRemove, disabled, confirmMessage} = props;\n  return (\n    <TeamPanelItem>\n      <StyledLink to={`/settings/${orgId}/teams/${team}/`}>#{team}</StyledLink>\n      <Confirm\n        message={confirmMessage}\n        bypass={!confirmMessage}\n        onConfirm={() => onRemove(team)}\n        disabled={disabled}\n      >\n        <Button size=\"xsmall\" icon=\"icon-circle-subtract\" disabled={disabled}>\n          {t('Remove')}\n        </Button>\n      </Confirm>\n    </TeamPanelItem>\n  );\n};\n\nTeamRow.propTypes = {\n  disabled: PropTypes.bool,\n  team: PropTypes.string.isRequired,\n  orgId: PropTypes.string.isRequired,\n  onRemove: PropTypes.func.isRequired,\n  confirmMessage: PropTypes.string,\n};\n\nconst TeamDropdownElement = styled('div')`\n  padding: ${space(0.5)} ${space(0.25)};\n  text-transform: none;\n`;\n\nconst TeamPanelItem = styled(PanelItem)`\n  padding: ${space(2)};\n  align-items: center;\n`;\n\nconst StyledLink = styled(Link)`\n  flex: 1;\n  margin-right: ${space(1)};\n`;\n\nexport default withApi(TeamSelect);\n","import React from 'react';\nimport classNames from 'classnames';\n\nclass Radio extends React.Component<React.HTMLProps<HTMLInputElement>> {\n  static defaultProps = {\n    checked: false,\n  };\n\n  render() {\n    const {className, ...otherProps} = this.props;\n    const cx = classNames('radio-select', className);\n    return <input type=\"radio\" className={cx} {...otherProps} />;\n  }\n}\n\nexport default Radio;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport {MemberRole} from 'app/types';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport Radio from 'app/components/radio';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nconst Label = styled('label')`\n  display: flex;\n  flex: 1;\n  align-items: center;\n  margin-bottom: 0;\n`;\n\ntype Props = {\n  enforceAllowed: boolean;\n  disabled: boolean;\n  selectedRole: string;\n  roleList: MemberRole[];\n  setRole: (id: string) => void;\n};\n\nclass RoleSelect extends React.Component<Props> {\n  static propTypes = {\n    /**\n     * Whether to disable or not using `allowed` prop from API request\n     */\n    enforceAllowed: PropTypes.bool,\n    disabled: PropTypes.bool,\n    selectedRole: PropTypes.string,\n    roleList: PropTypes.array,\n    setRole: PropTypes.func,\n  };\n\n  render() {\n    const {disabled, enforceAllowed, roleList, selectedRole} = this.props;\n\n    return (\n      <Panel>\n        <PanelHeader>{t('Role')}</PanelHeader>\n\n        <PanelBody>\n          {roleList.map(role => {\n            const {desc, name, id, allowed} = role;\n            const isDisabled = disabled || (enforceAllowed && !allowed);\n            return (\n              <PanelItem\n                key={id}\n                onClick={() => !isDisabled && this.props.setRole(id)}\n                css={!isDisabled ? {} : {color: 'grey', cursor: 'default'}}\n              >\n                <Label>\n                  <Radio id={id} value={name} checked={id === selectedRole} readOnly />\n                  <div style={{flex: 1, padding: '0 16px'}}>\n                    {name}\n                    <TextBlock noMargin>\n                      <div className=\"help-block\">{desc}</div>\n                    </TextBlock>\n                  </div>\n                </Label>\n              </PanelItem>\n            );\n          })}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n\nexport default RoleSelect;\n","import {withRouter} from 'react-router';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\nimport * as Sentry from '@sentry/browser';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {MEMBER_ROLES} from 'app/constants';\nimport {t, tct} from 'app/locale';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\nimport SentryTypes from 'app/sentryTypes';\nimport Button from 'app/components/button';\nimport ConfigStore from 'app/stores/configStore';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\nimport TextField from 'app/components/forms/textField';\nimport TeamSelect from 'app/views/settings/components/teamSelect';\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\n\nimport RoleSelect from './roleSelect';\n\nclass InviteMember extends React.Component {\n  static propTypes = {\n    api: PropTypes.object,\n    organization: SentryTypes.Organization.isRequired,\n    router: PropTypes.object,\n  };\n\n  constructor(props) {\n    super(props);\n    const {teams} = props.organization;\n    //select team if there's only one\n    const initialTeamSelection = teams.length === 1 ? [teams[0].slug] : [];\n\n    this.state = {\n      selectedTeams: new Set(initialTeamSelection),\n      roleList: [],\n      selectedRole: 'member',\n      email: '',\n      loading: true,\n      busy: false,\n      error: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const {slug} = this.props.organization;\n    const {isSuperuser} = ConfigStore.get('user');\n\n    this.props.api.request(`/organizations/${slug}/members/me/`, {\n      method: 'GET',\n      success: resp => {\n        const {roles} = resp || {};\n\n        if (!resp || !roles) {\n          this.setState({\n            loading: false,\n            error: {\n              role: 'Error loading roles, will default to \"member\"',\n            },\n          });\n\n          Sentry.withScope(scope => {\n            scope.setExtra('resp', resp);\n            scope.setExtra('state', this.state);\n            Sentry.captureException(new Error('[members]: data fetch invalid response'));\n          });\n        } else {\n          this.setState({roleList: roles, loading: false});\n\n          if (roles.filter(({allowed}) => allowed).length === 0) {\n            // not allowed to invite, redirect\n            this.redirectToMemberPage();\n          }\n        }\n      },\n      error: error => {\n        if (error.status === 404 && isSuperuser) {\n          // use the static list\n          this.setState({roleList: MEMBER_ROLES, loading: false});\n        } else if (error.status !== 0) {\n          Sentry.withScope(scope => {\n            scope.setExtra('error', error);\n            scope.setExtra('state', this.state);\n            Sentry.captureException(new Error('[members]: data fetch error'));\n          });\n        }\n\n        addErrorMessage(t('Error with request, please reload'));\n      },\n    });\n  }\n\n  redirectToMemberPage = () => {\n    // Get path to parent route (`/organizations/${slug}/members/`)\n    // `recreateRoute` fucks up because of getsentry hooks\n    const {params, router} = this.props;\n    const isNewSettings = /^\\/settings\\//.test(router.location.pathname);\n    const pathToParentRoute = isNewSettings\n      ? '/settings/:orgId/members/'\n      : '/organizations/:orgId/members/';\n    router.push(replaceRouterParams(pathToParentRoute, params));\n  };\n\n  splitEmails = text => {\n    return text\n      .split(',')\n      .map(e => e.trim())\n      .filter(e => e);\n  };\n\n  inviteUser = email => {\n    const {slug} = this.props.organization;\n    const {selectedTeams, selectedRole} = this.state;\n\n    return new Promise((resolve, reject) => {\n      this.props.api.request(`/organizations/${slug}/members/`, {\n        method: 'POST',\n        data: {\n          email,\n          teams: Array.from(selectedTeams.keys()),\n          role: selectedRole,\n          referrer: this.props.location.query.referrer,\n        },\n        success: () => {\n          addSuccessMessage(\n            tct('Added [email] to [organization]', {\n              email,\n              organization: slug,\n            })\n          );\n          resolve();\n        },\n        error: err => {\n          if (err.status === 403) {\n            addErrorMessage(t(\"You aren't allowed to invite members.\"));\n            resolve();\n          } else if (err.status === 409) {\n            addErrorMessage(`User already exists: ${email}`);\n            resolve();\n          } else {\n            reject(err.responseJSON);\n          }\n        },\n      });\n    });\n  };\n\n  submit = () => {\n    const {email} = this.state;\n    const emails = this.splitEmails(email);\n    if (!emails.length) {\n      return;\n    }\n    this.setState({busy: true});\n    Promise.all(emails.map(this.inviteUser))\n      .then(() => this.redirectToMemberPage())\n      .catch(error => {\n        if (error && !error.email && !error.role) {\n          Sentry.withScope(scope => {\n            scope.setExtra('error', error);\n            scope.setExtra('state', this.state);\n            Sentry.captureException(new Error('Unknown invite member api response'));\n          });\n        }\n        this.setState({error, busy: false});\n      });\n  };\n\n  handleAddTeam = team => {\n    const {selectedTeams} = this.state;\n    if (!selectedTeams.has(team.slug)) {\n      selectedTeams.add(team.slug);\n    }\n    this.setState({selectedTeams});\n  };\n\n  handleRemoveTeam = teamSlug => {\n    const {selectedTeams} = this.state;\n    selectedTeams.delete(teamSlug);\n\n    this.setState({selectedTeams});\n  };\n\n  render() {\n    const {error, loading, roleList, selectedRole, selectedTeams} = this.state;\n    const {organization} = this.props;\n    const {invitesEnabled} = ConfigStore.getConfig();\n    const {isSuperuser} = ConfigStore.get('user');\n\n    return (\n      <div>\n        <SettingsPageHeader title={t('Add Member to Organization')} />\n        <TextBlock>\n          {invitesEnabled\n            ? t(\n                'Invite a member to join this organization via their email address. If they do not already have an account, they will first be asked to create one. Multiple emails delimited by commas.'\n              )\n            : t(\n                'You may add a user by their username if they already have an account. Multiple inputs delimited by commas.'\n              )}\n        </TextBlock>\n\n        {loading && <LoadingIndicator />}\n        {!loading && (\n          <div>\n            <div className={classNames({'has-error': error && error.email})}>\n              <TextField\n                name=\"email\"\n                label={invitesEnabled ? t('Email') + '(s)' : t('Username') + '(s)'}\n                placeholder=\"e.g. teammate@example.com\"\n                spellCheck=\"false\"\n                onChange={v => this.setState({email: v})}\n              />\n              {error && error.email && <p className=\"error\">{error.email}</p>}\n            </div>\n            {error && error.role && <p className=\"error alert-error\">{error.role}</p>}\n            <RoleSelect\n              enforceAllowed={!isSuperuser}\n              roleList={roleList}\n              selectedRole={selectedRole}\n              setRole={slug => this.setState({selectedRole: slug})}\n            />\n            <TeamSelect\n              organization={organization}\n              selectedTeams={Array.from(selectedTeams.values())}\n              onAddTeam={this.handleAddTeam}\n              onRemoveTeam={this.handleRemoveTeam}\n            />\n            <Button\n              priority=\"primary\"\n              busy={this.state.busy}\n              className=\"invite-member-submit\"\n              onClick={this.submit}\n            >\n              {t('Add Member')}\n            </Button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport {InviteMember};\nexport default withApi(withRouter(withOrganization(InviteMember)));\n"],"sourceRoot":""}