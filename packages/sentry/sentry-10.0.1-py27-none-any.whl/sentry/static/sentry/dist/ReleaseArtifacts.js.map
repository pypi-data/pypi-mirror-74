{"version":3,"sources":["webpack:///./app/components/links/linkWithConfirmation.jsx","webpack:///./app/components/fileSize.tsx","webpack:///./app/views/releases/detail/releaseArtifacts.jsx"],"names":["LinkWithConfirmation","args","state","isModalOpen","this","props","className","disabled","title","children","otherProps","classNames","onClick","onToggle","React","PureComponent","bytes","value","fixed","ReleaseArtifacts","fetchData","setState","loading","error","api","request","getFilesEndpoint","method","data","omit","location","query","Object","values","URL_PARAM","success","_","jqXHR","fileList","pageLinks","getResponseHeader","params","orgId","projectId","version","encodedVersion","encodeURIComponent","id","loadingIndicator","IndicatorStore","add","t","filter","file","duration","complete","remove","onRetry","length","access","Set","organization","flex","pr","map","key","style","wordWrap","wordBreak","name","dist","justify","size","align","has","href","baseUrl","marginLeft","message","onConfirm","handleRemove","bind","Component","withOrganization","withApi"],"mappings":"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","file":"ReleaseArtifacts.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport Confirm from 'app/components/confirm';\n\n/**\n * <Confirm> is a more generic version of this component\n */\nclass LinkWithConfirmation extends React.PureComponent {\n  static propTypes = {\n    disabled: PropTypes.bool,\n    message: PropTypes.node.isRequired,\n    title: PropTypes.node.isRequired,\n    onConfirm: PropTypes.func.isRequired,\n  };\n\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isModalOpen: false,\n    };\n  }\n\n  render() {\n    const {className, disabled, title, children, ...otherProps} = this.props;\n    return (\n      <Confirm {...otherProps} disabled={disabled}>\n        <a\n          className={classNames(className || '', {disabled})}\n          disabled={disabled}\n          onClick={this.onToggle}\n          title={title}\n        >\n          {children}\n        </a>\n      </Confirm>\n    );\n  }\n}\n\nexport default LinkWithConfirmation;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport {formatBytes} from 'app/utils';\nimport getDynamicText from 'app/utils/getDynamicText';\n\ntype Props = {\n  className?: string;\n  bytes: number;\n};\n\nfunction FileSize(props: Props) {\n  const {className, bytes} = props;\n\n  return (\n    <span className={className}>\n      {getDynamicText({value: formatBytes(bytes), fixed: 'xx KB'})}\n    </span>\n  );\n}\n\nFileSize.propTypes = {\n  className: PropTypes.string,\n  bytes: PropTypes.number.isRequired,\n};\n\nexport default FileSize;\n","import {Flex} from 'grid-emotion';\nimport omit from 'lodash/omit';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {Panel, PanelHeader, PanelBody, PanelItem} from 'app/components/panels';\nimport {URL_PARAM} from 'app/constants/globalSelectionHeader';\nimport {t} from 'app/locale';\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport FileSize from 'app/components/fileSize';\nimport IndicatorStore from 'app/stores/indicatorStore';\nimport LinkWithConfirmation from 'app/components/links/linkWithConfirmation';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport Pagination from 'app/components/pagination';\nimport SentryTypes from 'app/sentryTypes';\nimport Tooltip from 'app/components/tooltip';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\n\nclass ReleaseArtifacts extends React.Component {\n  static propTypes = {\n    organization: SentryTypes.Organization,\n    api: PropTypes.object,\n  };\n\n  constructor() {\n    super();\n    this.state = {\n      loading: true,\n      error: false,\n      fileList: [],\n      pageLinks: null,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  getFilesEndpoint() {\n    const {orgId, projectId, version} = this.props.params;\n    const encodedVersion = encodeURIComponent(version);\n\n    return projectId\n      ? `/projects/${orgId}/${projectId}/releases/${encodedVersion}/files/`\n      : `/organizations/${orgId}/releases/${encodedVersion}/files/`;\n  }\n\n  fetchData = () => {\n    this.setState({\n      loading: true,\n      error: false,\n    });\n\n    this.props.api.request(this.getFilesEndpoint(), {\n      method: 'GET',\n      // We need to omit global selection header url params because they are not supported\n      data: omit(this.props.location.query, Object.values(URL_PARAM)),\n      success: (data, _, jqXHR) => {\n        this.setState({\n          error: false,\n          loading: false,\n          fileList: data,\n          pageLinks: jqXHR.getResponseHeader('Link'),\n        });\n      },\n      error: () => {\n        this.setState({\n          error: true,\n          loading: false,\n        });\n      },\n    });\n  };\n\n  handleRemove(id) {\n    const loadingIndicator = IndicatorStore.add(t('Removing artifact..'));\n\n    this.props.api.request(this.getFilesEndpoint() + `${id}/`, {\n      method: 'DELETE',\n      success: () => {\n        const fileList = this.state.fileList.filter(file => {\n          return file.id !== id;\n        });\n\n        this.setState({\n          fileList,\n        });\n\n        IndicatorStore.add(t('Artifact removed.'), 'success', {\n          duration: 4000,\n        });\n      },\n      error: () => {\n        IndicatorStore.add(t('Unable to remove artifact. Please try again.'), 'error', {\n          duration: 4000,\n        });\n      },\n      complete: () => {\n        IndicatorStore.remove(loadingIndicator);\n      },\n    });\n  }\n\n  render() {\n    if (this.state.loading) {\n      return <LoadingIndicator />;\n    } else if (this.state.error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    } else if (this.state.fileList.length === 0) {\n      return (\n        <Panel>\n          <EmptyStateWarning>\n            <p>{t('There are no artifacts uploaded for this release.')}</p>\n          </EmptyStateWarning>\n        </Panel>\n      );\n    }\n\n    const access = new Set(this.props.organization.access);\n\n    // TODO(dcramer): files should allow you to download them\n    return (\n      <div>\n        <Panel>\n          <PanelHeader>\n            <Flex flex=\"7\" pr={2}>\n              {t('Name')}\n            </Flex>\n            <Flex flex=\"2\">{t('Distribution')}</Flex>\n            <Flex flex=\"3\">{t('Size')}</Flex>\n          </PanelHeader>\n          <PanelBody>\n            {this.state.fileList.map(file => {\n              return (\n                <PanelItem key={file.id}>\n                  <Flex\n                    flex=\"7\"\n                    pr={2}\n                    style={{wordWrap: 'break-word', wordBreak: 'break-all'}}\n                  >\n                    <strong>{file.name || '(empty)'}</strong>\n                  </Flex>\n                  <Flex flex=\"2\">\n                    {file.dist || <span className=\"text-light\">{t('None')}</span>}\n                  </Flex>\n                  <Flex flex=\"3\" justify=\"space-between\">\n                    <FileSize bytes={file.size} />\n                    <Flex align=\"center\">\n                      {access.has('project:write') ? (\n                        <a\n                          href={\n                            this.props.api.baseUrl +\n                            this.getFilesEndpoint() +\n                            `${file.id}/?download=1`\n                          }\n                          className=\"btn btn-sm btn-default\"\n                        >\n                          <span className=\"icon icon-open\" />\n                        </a>\n                      ) : (\n                        <Tooltip\n                          title={t(\n                            'You do not have the required permission to download this artifact.'\n                          )}\n                        >\n                          <div className=\"btn btn-sm btn-default disabled\">\n                            <span className=\"icon icon-open\" />\n                          </div>\n                        </Tooltip>\n                      )}\n                      <div style={{marginLeft: 5}}>\n                        <LinkWithConfirmation\n                          className=\"btn btn-sm btn-default\"\n                          title={t('Delete artifact')}\n                          message={t('Are you sure you want to remove this artifact?')}\n                          onConfirm={this.handleRemove.bind(this, file.id)}\n                        >\n                          <span className=\"icon icon-trash\" />\n                        </LinkWithConfirmation>\n                      </div>\n                    </Flex>\n                  </Flex>\n                </PanelItem>\n              );\n            })}\n          </PanelBody>\n        </Panel>\n        <Pagination pageLinks={this.state.pageLinks} />\n      </div>\n    );\n  }\n}\n\nexport {ReleaseArtifacts};\nexport default withOrganization(withApi(ReleaseArtifacts));\n"],"sourceRoot":""}