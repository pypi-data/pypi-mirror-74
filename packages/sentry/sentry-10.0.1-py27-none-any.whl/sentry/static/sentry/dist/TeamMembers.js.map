{"version":3,"sources":["webpack:///./app/actionCreators/teams.jsx","webpack:///./app/views/settings/organizationTeams/teamMembers.jsx"],"names":["doCallback","params","name","args","fetchTeamDetails","api","options","TeamActions","fetchDetails","teamId","request","orgId","success","data","fetchDetailsSuccess","error","fetchDetailsError","updateTeamSuccess","updateSuccess","updateTeam","endpoint","update","method","updateError","joinTeam","memberId","id","uniqueId","leaveTeam","createTeam","team","requestPromise","then","createTeamSuccess","addSuccessMessage","tct","slug","organization","err","createTeamError","addErrorMessage","removeTeam","removeTeamSuccess","removeTeamError","TeamMembers","state","loading","dropdownBusy","teamMemberList","orgMemberList","debouncedFetchMembersRequest","debounce","query","this","setState","fetchMembersRequest","a","async","props","t","duration","fetchData","errorResponse","addTeamMember","selection","value","orgMember","find","member","concat","handleMemberFilterChange","e","target","renderDropdown","access","has","disabled","title","isOpen","size","existingMembers","Set","map","items","filter","m","searchKey","email","label","StyledUserListElement","StyledAvatar","user","className","StyledNameOrEmail","menuHeader","StyledMembersLabel","StyledCreateMemberLink","onClick","openInviteMembersModal","source","data-test-id","onSelect","emptyMessage","onChange","busy","onClose","removeButton","removeMember","bind","src","style","marginRight","space","nextProps","IndicatorStore","add","onRetry","config","isOrgAdmin","isTeamAdmin","hasButtons","textTransform","length","isSelf","canRemoveMember","StyledMemberContainer","key","avatarSize","useLink","icon","React","Component","styled","p","theme","borderLight","overflowEllipsis","Link","withConfig","withApi","withOrganization"],"mappings":"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","file":"TeamMembers.js","sourcesContent":["import TeamActions from 'app/actions/teamActions';\nimport {tct} from 'app/locale';\nimport {addSuccessMessage, addErrorMessage} from 'app/actionCreators/indicator';\nimport {uniqueId} from 'app/utils/guid';\n\nconst doCallback = (params = {}, name, ...args) => {\n  if (typeof params[name] === 'function') {\n    params[name](...args);\n  }\n};\n\n// Fetch teams for org\nexport function fetchTeams(api, params, options) {\n  TeamActions.fetchAll(params.orgId);\n  return api.request(`/teams/${params.orgId}/`, {\n    success: data => {\n      TeamActions.fetchAllSuccess(params.orgId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchAllError(params.orgId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function fetchTeamDetails(api, params, options) {\n  TeamActions.fetchDetails(params.teamId);\n  return api.request(`/teams/${params.orgId}/${params.teamId}/`, {\n    success: data => {\n      TeamActions.fetchDetailsSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchDetailsError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function updateTeamSuccess(teamId, data) {\n  TeamActions.updateSuccess(teamId, data);\n}\n\nexport function updateTeam(api, params, options) {\n  const endpoint = `/teams/${params.orgId}/${params.teamId}/`;\n  TeamActions.update(params.teamId, params.data);\n\n  return api.request(endpoint, {\n    method: 'PUT',\n    data: params.data,\n    success: data => {\n      updateTeamSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function joinTeam(api, params, options) {\n  const endpoint = `/organizations/${params.orgId}/members/${params.memberId ||\n    'me'}/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'POST',\n    data: params.data,\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function leaveTeam(api, params, options) {\n  const endpoint = `/organizations/${params.orgId}/members/${params.memberId ||\n    'me'}/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'DELETE',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function createTeam(api, team, params, options) {\n  TeamActions.createTeam(team);\n\n  return api\n    .requestPromise(`/organizations/${params.orgId}/teams/`, {\n      method: 'POST',\n      data: team,\n    })\n    .then(\n      data => {\n        TeamActions.createTeamSuccess(data);\n        addSuccessMessage(\n          tct('[team] has been added to the [organization] organization', {\n            team: `#${data.slug}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.createTeamError(team.slug || team.name, err);\n        addErrorMessage(\n          tct('Unable to create [team] in the [organization] organization', {\n            team: `#${team.slug || team.name}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n\nexport function removeTeam(api, params, options) {\n  TeamActions.removeTeam(params.teamId);\n\n  return api\n    .requestPromise(`/teams/${params.orgId}/${params.teamId}/`, {\n      method: 'DELETE',\n    })\n    .then(\n      data => {\n        TeamActions.removeTeamSuccess(params.teamId, data);\n        addSuccessMessage(\n          tct('[team] has been removed from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.removeTeamError(params.teamId, err);\n        addErrorMessage(\n          tct('Unable to remove [team] from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n","import debounce from 'lodash/debounce';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport {Panel, PanelHeader} from 'app/components/panels';\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {joinTeam, leaveTeam} from 'app/actionCreators/teams';\nimport {openInviteMembersModal} from 'app/actionCreators/modal';\nimport {t} from 'app/locale';\nimport UserAvatar from 'app/components/avatar/userAvatar';\nimport Button from 'app/components/button';\nimport DropdownAutoComplete from 'app/components/dropdownAutoComplete';\nimport DropdownButton from 'app/components/dropdownButton';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport IdBadge from 'app/components/idBadge';\nimport IndicatorStore from 'app/stores/indicatorStore';\nimport InlineSvg from 'app/components/inlineSvg';\nimport Link from 'app/components/links/link';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport SentryTypes from 'app/sentryTypes';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport withApi from 'app/utils/withApi';\nimport withConfig from 'app/utils/withConfig';\nimport withOrganization from 'app/utils/withOrganization';\n\nclass TeamMembers extends React.Component {\n  static propTypes = {\n    api: PropTypes.object.isRequired,\n    config: SentryTypes.Config.isRequired,\n    organization: SentryTypes.Organization.isRequired,\n  };\n\n  state = {\n    loading: true,\n    error: false,\n    dropdownBusy: false,\n    teamMemberList: null,\n    orgMemberList: null,\n  };\n\n  componentWillMount() {\n    this.fetchData();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const params = this.props.params;\n    if (\n      nextProps.params.teamId !== params.teamId ||\n      nextProps.params.orgId !== params.orgId\n    ) {\n      this.setState(\n        {\n          loading: true,\n          error: false,\n        },\n        this.fetchData\n      );\n    }\n  }\n\n  debouncedFetchMembersRequest = debounce(function(query) {\n    this.setState(\n      {\n        dropdownBusy: true,\n      },\n      () => this.fetchMembersRequest(query)\n    );\n  }, 200);\n\n  removeMember(member) {\n    const {params} = this.props;\n    leaveTeam(\n      this.props.api,\n      {\n        orgId: params.orgId,\n        teamId: params.teamId,\n        memberId: member.id,\n      },\n      {\n        success: () => {\n          this.setState({\n            teamMemberList: this.state.teamMemberList.filter(m => {\n              return m.id !== member.id;\n            }),\n          });\n          IndicatorStore.add(t('Successfully removed member from team.'), 'success', {\n            duration: 2000,\n          });\n        },\n        error: () => {\n          IndicatorStore.add(\n            t('There was an error while trying to remove a member from the team.'),\n            'error',\n            {duration: 2000}\n          );\n        },\n      }\n    );\n  }\n\n  fetchMembersRequest = async query => {\n    const {params, api} = this.props;\n    const {orgId} = params;\n\n    try {\n      const data = await api.requestPromise(`/organizations/${orgId}/members/`, {\n        query: {\n          query,\n        },\n      });\n      this.setState({\n        orgMemberList: data,\n        dropdownBusy: false,\n      });\n    } catch (_err) {\n      addErrorMessage(t('Unable to load organization members.'), {\n        duration: 2000,\n      });\n\n      this.setState({\n        dropdownBusy: false,\n      });\n    }\n  };\n\n  fetchData = async () => {\n    const {api, params} = this.props;\n\n    try {\n      const data = await api.requestPromise(\n        `/teams/${params.orgId}/${params.teamId}/members/`\n      );\n      this.setState({\n        teamMemberList: data,\n        loading: false,\n        error: false,\n      });\n    } catch (err) {\n      this.setState({\n        loading: false,\n        error: true,\n        errorResponse: err,\n      });\n    }\n\n    this.fetchMembersRequest('');\n  };\n\n  addTeamMember = selection => {\n    const params = this.props.params;\n\n    this.setState({\n      loading: true,\n    });\n\n    // Reset members list after adding member to team\n    this.debouncedFetchMembersRequest('');\n\n    joinTeam(\n      this.props.api,\n      {\n        orgId: params.orgId,\n        teamId: params.teamId,\n        memberId: selection.value,\n      },\n      {\n        success: () => {\n          const orgMember = this.state.orgMemberList.find(member => {\n            return member.id === selection.value;\n          });\n          this.setState({\n            loading: false,\n            error: false,\n            teamMemberList: this.state.teamMemberList.concat([orgMember]),\n          });\n          addSuccessMessage(t('Successfully added member to team.'));\n        },\n        error: () => {\n          this.setState({\n            loading: false,\n          });\n          addErrorMessage(t('Unable to add team member.'));\n        },\n      }\n    );\n  };\n\n  /**\n   * We perform an API request to support orgs with > 100 members (since that's the max API returns)\n   *\n   * @param {Event} e React Event when member filter input changes\n   */\n  handleMemberFilterChange = e => {\n    this.setState({dropdownBusy: true});\n    this.debouncedFetchMembersRequest(e.target.value);\n  };\n\n  renderDropdown = access => {\n    // You can add members if you have `org:write` or you have `team:admin` AND you belong to the team\n    // a parent \"team details\" request should determine your team membership, so this only view is rendered only\n    // when you are a member\n    const canAddMembers = access.has('org:write') || access.has('team:admin');\n\n    if (!canAddMembers) {\n      return (\n        <DropdownButton\n          disabled\n          title={t('You do not have enough permission to add new members')}\n          isOpen={false}\n          size=\"xsmall\"\n        >\n          {t('Add Member')}\n        </DropdownButton>\n      );\n    }\n\n    const existingMembers = new Set(this.state.teamMemberList.map(member => member.id));\n\n    const items = (this.state.orgMemberList || [])\n      .filter(m => !existingMembers.has(m.id))\n      .map(m => {\n        return {\n          searchKey: `${m.name} ${m.email}`,\n          value: m.id,\n          label: (\n            <StyledUserListElement>\n              <StyledAvatar user={m} size={24} className=\"avatar\" />\n              <StyledNameOrEmail>{m.name || m.email}</StyledNameOrEmail>\n            </StyledUserListElement>\n          ),\n        };\n      });\n\n    const menuHeader = (\n      <StyledMembersLabel>\n        {t('Members')}\n        <StyledCreateMemberLink\n          onClick={() => openInviteMembersModal({source: 'teams'})}\n          data-test-id=\"invite-member\"\n        >\n          {t('Invite Member')}\n        </StyledCreateMemberLink>\n      </StyledMembersLabel>\n    );\n\n    return (\n      <DropdownAutoComplete\n        items={items}\n        onSelect={this.addTeamMember}\n        menuHeader={menuHeader}\n        emptyMessage={t('No members')}\n        onChange={this.handleMemberFilterChange}\n        busy={this.state.dropdownBusy}\n        onClose={() => this.debouncedFetchMembersRequest('')}\n      >\n        {({isOpen}) => (\n          <DropdownButton isOpen={isOpen} size=\"xsmall\" data-test-id=\"add-member\">\n            {t('Add Member')}\n          </DropdownButton>\n        )}\n      </DropdownAutoComplete>\n    );\n  };\n\n  removeButton = member => {\n    return (\n      <Button\n        size=\"small\"\n        onClick={this.removeMember.bind(this, member)}\n        label={t('Remove')}\n      >\n        <InlineSvg\n          src=\"icon-circle-subtract\"\n          size=\"1.25em\"\n          style={{marginRight: space(1)}}\n        />\n        {t('Remove')}\n      </Button>\n    );\n  };\n\n  render() {\n    if (this.state.loading) {\n      return <LoadingIndicator />;\n    } else if (this.state.error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    const {params, organization, config} = this.props;\n    const access = new Set(organization.access);\n    const isOrgAdmin = access.has('org:write');\n    const isTeamAdmin = access.has('team:admin');\n\n    return (\n      <Panel>\n        <PanelHeader hasButtons>\n          <div>{t('Members')}</div>\n          <div style={{textTransform: 'none'}}>{this.renderDropdown(access)}</div>\n        </PanelHeader>\n        {this.state.teamMemberList.length ? (\n          this.state.teamMemberList.map(member => {\n            const isSelf = member.email === config.user.email;\n            const canRemoveMember = isOrgAdmin || isTeamAdmin || isSelf;\n            return (\n              <StyledMemberContainer key={member.id}>\n                <IdBadge avatarSize={36} member={member} useLink orgId={params.orgId} />\n                {canRemoveMember && this.removeButton(member)}\n              </StyledMemberContainer>\n            );\n          })\n        ) : (\n          <EmptyMessage icon=\"icon-user\" size=\"large\">\n            {t('This team has no members')}\n          </EmptyMessage>\n        )}\n      </Panel>\n    );\n  }\n}\n\nconst StyledMemberContainer = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  padding: ${space(2)};\n  border-bottom: 1px solid ${p => p.theme.borderLight};\n`;\n\nconst StyledUserListElement = styled('div')`\n  font-size: 0.875em;\n  display: flex;\n  align-items: center;\n  padding: ${space(0.5)};\n`;\n\nconst StyledNameOrEmail = styled('div')`\n  flex-shrink: 1;\n  min-width: 0;\n  ${overflowEllipsis};\n`;\n\nconst StyledAvatar = styled(props => <UserAvatar {...props} />)`\n  min-width: 1.75em;\n  min-height: 1.75em;\n  width: 1.5em;\n  height: 1.5em;\n  margin-right: ${space(0.5)};\n`;\n\nconst StyledMembersLabel = styled('div')`\n  width: 250px;\n  font-size: 0.875em;\n  padding: ${space(1)} 0;\n  text-transform: uppercase;\n`;\n\nconst StyledCreateMemberLink = styled(Link)`\n  float: right;\n  text-transform: none;\n`;\n\nexport default withConfig(withApi(withOrganization(TeamMembers)));\n"],"sourceRoot":""}