{"version":3,"sources":["webpack:///./app/components/avatar/avatarList.tsx","webpack:///./app/components/repoLabel.jsx","webpack:///./app/components/lastCommit.tsx","webpack:///./app/components/well.tsx","webpack:///./app/components/issueList.jsx","webpack:///./app/views/releases/detail/utils.jsx","webpack:///./app/components/fileChange.jsx","webpack:///./app/components/repositoryFileSummary.jsx","webpack:///./app/views/releases/detail/releaseDeploys.jsx","webpack:///./app/views/releases/detail/releaseEmptyState.jsx","webpack:///./app/views/releases/detail/releaseIssues.jsx","webpack:///./app/views/releases/detail/commitAuthorStats.jsx","webpack:///./app/views/releases/detail/releaseProjectStatSparkline.jsx","webpack:///./app/views/releases/detail/releaseOverview.jsx"],"names":["defaultProps","avatarSize","maxVisibleAvatars","typeMembers","tooltipOptions","render","className","users","renderTooltip","visibleUsers","slice","numCollapsedUsers","length","position","AvatarListWrapper","title","CollapsedUsers","size","Plus","map","user","StyledAvatar","key","id","email","hasTooltip","propTypes","arrayOf","User","isRequired","number","func","object","string","Component","Circle","p","theme","Math","floor","RepoLabel","styled","white","overflowEllipsis","gray1","fontSizeSmall","unknownUser","name","username","avatarUrl","avatar","avatarUuid","avatarType","ip_address","renderMessage","message","firstLine","split","truncated","substr","words","pop","join","commit","headerClass","commitAuthor","author","this","date","dateCreated","Well","hasImage","centered","bool","IssueList","createReactClass","displayName","getDefaultProps","pagination","query","noBorder","noMargin","getInitialState","issueIds","loading","error","pageLinks","componentWillMount","fetchData","componentWillReceiveProps","nextProps","location","props","nextLocation","pathname","search","remountComponent","setState","api","clear","request","endpoint","method","cursor","success","data","_","jqXHR","item","getResponseHeader","renderResults","body","state","renderLoading","renderError","panelStyle","border","borderRadius","marginBottom","style","issue","statsPeriod","showActions","renderEmpty","margin","space","onRetry","emptyText","icon","t","Fragment","withApi","deleteRelease","orgId","version","Client","requestPromise","encodeURIComponent","getFilesByRepository","fileList","reduce","fbr","file","filename","repoName","type","hasOwnProperty","authors","types","Set","repos","add","FileChange","src","typeMember","React","PureComponent","Collapsed","onClick","tn","count","RepositoryFileSummary","args","onCollapseToggle","collapsed","repository","fileChangeSummary","MAX","MAX_WHEN_COLLAPSED","files","Object","keys","fileCount","sort","numCollapsed","canCollapse","values","ReleaseDeploys","deploys","deploy","path","environment","to","ReleaseRepoLabel","marginLeft","dateFinished","ReleaseEmptyState","StyledWell","priority","href","organization","slug","withOrganization","ReleaseIssues","resolvedPath","issuesPath","StyledIssueList","justify","params","limit","CommitBar","barStyle","width","authorCommits","totalCommits","CommitAuthorStats","getPath","commitList","projectId","encodedVersion","commitAuthors","_commitAuthors","commitCount","commitAuthorValues","a","b","marginTop","i","align","AvatarWrapper","CommitBarContainer","ReleaseProjectStatSparkline","stats","newIssueCount","Promise","all","getStatReceived","getNewIssuesCount","then","newIssues","reactSparkLines","newGroups","Sparklines","SparklinesLine","project","tuple","height","stroke","fill","strokeWidth","renderProjectSummary","ReleaseOverview","basePath","release","hasRepos","filesByRepository","paddingTop","lastCommit","projects","AsyncComponent"],"mappings":"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","file":"ReleaseOverview.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled, {css} from 'react-emotion';\n\nimport {User} from 'app/types';\nimport SentryTypes from 'app/sentryTypes';\nimport UserAvatar from 'app/components/avatar/userAvatar';\nimport Tooltip from 'app/components/tooltip';\n\nconst defaultProps = {\n  avatarSize: 28,\n  maxVisibleAvatars: 5,\n  typeMembers: 'users',\n  tooltipOptions: {},\n};\n\ntype DefaultProps = Readonly<typeof defaultProps>;\ntype Mutable<T> = {-readonly [P in keyof T]: T[P]};\n\ntype Props = {\n  className?: string;\n  users: User[];\n  renderTooltip?: UserAvatar['props']['renderTooltip'];\n  tooltipOptions: Mutable<UserAvatar['props']['tooltipOptions']>;\n} & DefaultProps;\n\nexport default class AvatarList extends React.Component<Props> {\n  static propTypes = {\n    users: PropTypes.arrayOf(SentryTypes.User).isRequired,\n    avatarSize: PropTypes.number,\n    maxVisibleAvatars: PropTypes.number,\n    renderTooltip: PropTypes.func,\n    tooltipOptions: PropTypes.object,\n    typeMembers: PropTypes.string,\n  };\n\n  static defaultProps = defaultProps;\n\n  render() {\n    const {\n      className,\n      users,\n      avatarSize,\n      maxVisibleAvatars,\n      renderTooltip,\n      typeMembers,\n      tooltipOptions,\n    } = this.props;\n\n    const visibleUsers = users.slice(0, maxVisibleAvatars);\n    const numCollapsedUsers = users.length - visibleUsers.length;\n\n    if (!tooltipOptions.position) {\n      tooltipOptions.position = 'top';\n    }\n\n    return (\n      <AvatarListWrapper className={className}>\n        {!!numCollapsedUsers && (\n          <Tooltip title={`${numCollapsedUsers} other ${typeMembers}`}>\n            <CollapsedUsers size={avatarSize}>\n              {numCollapsedUsers < 99 && <Plus>+</Plus>}\n              {numCollapsedUsers}\n            </CollapsedUsers>\n          </Tooltip>\n        )}\n        {visibleUsers.map(user => {\n          return (\n            <StyledAvatar\n              key={`${user.id}-${user.email}`}\n              user={user}\n              size={avatarSize}\n              renderTooltip={renderTooltip}\n              tooltipOptions={tooltipOptions}\n              hasTooltip\n            />\n          );\n        })}\n      </AvatarListWrapper>\n    );\n  }\n}\n\nconst AvatarListWrapper = styled('div')`\n  display: flex;\n  flex-direction: row-reverse;\n`;\n\nconst Circle = css`\n  border-radius: 50%;\n  border: 2px solid white;\n  margin-left: -8px;\n  cursor: default;\n\n  &:hover {\n    z-index: 1;\n  }\n`;\n\nconst StyledAvatar = styled(UserAvatar)`\n  overflow: hidden;\n  ${Circle};\n`;\n\nconst CollapsedUsers = styled('div')<{size: number}>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  text-align: center;\n  font-weight: 600;\n  background-color: ${p => p.theme.borderLight};\n  color: ${p => p.theme.gray2};\n  font-size: ${p => Math.floor(p.size / 2.3)}px;\n  width: ${p => p.size}px;\n  height: ${p => p.size}px;\n  ${Circle};\n`;\n\nconst Plus = styled('span')`\n  font-size: 10px;\n  margin-left: 1px;\n  margin-right: -1px;\n`;\n","import styled from 'react-emotion';\n\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\n\nconst RepoLabel = styled('span')`\n  /* label mixin from bootstrap */\n  font-weight: 700;\n  color: ${p => p.theme.white};\n  text-align: center;\n  white-space: nowrap;\n  border-radius: 0.25em;\n  /* end of label mixin from bootstrap */\n\n  ${overflowEllipsis};\n\n  display: inline-block;\n  vertical-align: text-bottom;\n  line-height: 1;\n  background: ${p => p.theme.gray1};\n  padding: 3px;\n  max-width: 86px;\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n\nexport default RepoLabel;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {AvatarUser, Commit} from 'app/types';\nimport UserAvatar from 'app/components/avatar/userAvatar';\nimport TimeSince from 'app/components/timeSince';\n\nimport {t} from 'app/locale';\n\ntype Props = {\n  commit: Commit;\n  headerClass: string;\n};\n\nconst unknownUser: AvatarUser = {\n  id: '',\n  name: '',\n  username: '??',\n  email: '',\n  avatarUrl: '',\n  avatar: {\n    avatarUuid: '',\n    avatarType: 'letter_avatar',\n  },\n  ip_address: '',\n};\n\nclass LastCommit extends React.Component<Props> {\n  static propTypes = {\n    commit: PropTypes.object.isRequired,\n    headerClass: PropTypes.string,\n  };\n\n  renderMessage(message: string): string {\n    if (!message) {\n      return t('No message provided');\n    }\n\n    const firstLine = message.split(/\\n/)[0];\n    if (firstLine.length > 100) {\n      let truncated = firstLine.substr(0, 90);\n      const words = truncated.split(/ /);\n      // try to not have elipsis mid-word\n      if (words.length > 1) {\n        words.pop();\n        truncated = words.join(' ');\n      }\n      return truncated + '...';\n    }\n    return firstLine;\n  }\n\n  render() {\n    const {commit, headerClass} = this.props;\n    const commitAuthor = commit && commit.author;\n    return (\n      <div>\n        <h6 className={headerClass}>Last commit</h6>\n        <div className=\"commit\">\n          <div className=\"commit-avatar\">\n            <UserAvatar user={commitAuthor || unknownUser} />\n          </div>\n          <div className=\"commit-message truncate\">\n            {this.renderMessage(commit.message)}\n          </div>\n          <div className=\"commit-meta\">\n            <strong>{(commitAuthor && commitAuthor.name) || t('Unknown Author')}</strong>\n            &nbsp;\n            <TimeSince date={commit.dateCreated} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LastCommit;\n","import React from 'react';\nimport styled from 'react-emotion';\nimport PropTypes from 'prop-types';\n\ntype Props = {\n  hasImage: boolean | undefined;\n  centered: boolean | undefined;\n  children: React.ReactNode;\n  theme?: any;\n};\n\ntype WellProps = Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props;\n\nconst Well = styled('div')<WellProps>`\n  border: 1px solid ${p => p.theme.borderLight};\n  box-shadow: none;\n  background: ${p => p.theme.whiteDark};\n  padding: ${p => (p.hasImage ? '80px 30px' : '15px 20px')};\n  margin-bottom: 20px;\n  border-radius: 3px;\n  ${p => p.centered && 'text-align: center'};\n`;\n\nWell.propTypes = {\n  hasImage: PropTypes.bool,\n  centered: PropTypes.bool,\n};\n\nexport default Well;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport createReactClass from 'create-react-class';\n\nimport {Panel, PanelBody} from 'app/components/panels';\nimport withApi from 'app/utils/withApi';\nimport CompactIssue from 'app/components/issues/compactIssue';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport Pagination from 'app/components/pagination';\nimport space from 'app/styles/space';\nimport {t} from 'app/locale';\n\nconst IssueList = createReactClass({\n  displayName: 'IssueList',\n\n  propTypes: {\n    api: PropTypes.object,\n    endpoint: PropTypes.string.isRequired,\n    emptyText: PropTypes.string,\n    query: PropTypes.object,\n    pagination: PropTypes.bool,\n    renderEmpty: PropTypes.func,\n    statsPeriod: PropTypes.string,\n    showActions: PropTypes.bool,\n    noBorder: PropTypes.bool,\n    noMargin: PropTypes.bool,\n  },\n\n  getDefaultProps() {\n    return {\n      pagination: true,\n      query: {},\n      noBorder: false,\n      noMargin: false,\n    };\n  },\n\n  getInitialState() {\n    return {\n      issueIds: [],\n      loading: true,\n      error: false,\n      pageLinks: null,\n    };\n  },\n\n  componentWillMount() {\n    this.fetchData();\n  },\n\n  componentWillReceiveProps(nextProps) {\n    const location = this.props.location;\n    const nextLocation = nextProps.location;\n    if (!location) {\n      return;\n    }\n\n    if (\n      location.pathname !== nextLocation.pathname ||\n      location.search !== nextLocation.search\n    ) {\n      this.remountComponent();\n    }\n  },\n\n  remountComponent() {\n    this.setState(this.getInitialState(), this.fetchData);\n  },\n\n  fetchData() {\n    const location = this.props.location;\n    this.props.api.clear();\n    this.props.api.request(this.props.endpoint, {\n      method: 'GET',\n      query: {\n        cursor: (location && location.query && location.query.cursor) || '',\n        ...this.props.query,\n      },\n      success: (data, _, jqXHR) => {\n        this.setState({\n          data,\n          loading: false,\n          error: false,\n          issueIds: data.map(item => item.id),\n          pageLinks: jqXHR.getResponseHeader('Link'),\n        });\n      },\n      error: () => {\n        this.setState({\n          loading: false,\n          error: true,\n        });\n      },\n    });\n  },\n\n  renderResults() {\n    let body;\n    const {noBorder, noMargin} = this.props;\n\n    if (this.state.loading) {\n      body = this.renderLoading();\n    } else if (this.state.error) {\n      body = this.renderError();\n    } else if (this.state.issueIds.length > 0) {\n      const panelStyle = noBorder ? {border: 0, borderRadius: 0} : {};\n      if (noMargin) {\n        panelStyle.marginBottom = 0;\n      }\n\n      body = (\n        <Panel style={panelStyle}>\n          <PanelBody className=\"issue-list\">\n            {this.state.data.map(issue => {\n              return (\n                <CompactIssue\n                  key={issue.id}\n                  id={issue.id}\n                  data={issue}\n                  statsPeriod={this.props.statsPeriod}\n                  showActions={this.props.showActions}\n                />\n              );\n            })}\n          </PanelBody>\n        </Panel>\n      );\n    } else {\n      body = (this.props.renderEmpty || this.renderEmpty)();\n    }\n\n    return body;\n  },\n\n  renderError() {\n    return (\n      <div style={{margin: `${space(2)} ${space(2)} 0`}}>\n        <LoadingError onRetry={this.fetchData} />\n      </div>\n    );\n  },\n\n  renderLoading() {\n    return (\n      <div style={{margin: '18px 18px 0'}}>\n        <LoadingIndicator />\n      </div>\n    );\n  },\n\n  renderEmpty() {\n    const {emptyText} = this.props;\n    const {noBorder, noMargin} = this.props;\n    const panelStyle = noBorder ? {border: 0, borderRadius: 0} : {};\n    if (noMargin) {\n      panelStyle.marginBottom = 0;\n    }\n\n    return (\n      <Panel style={panelStyle}>\n        <EmptyMessage icon=\"icon-circle-exclamation\">\n          {emptyText ? emptyText : t('Nothing to show here, move along.')}\n        </EmptyMessage>\n      </Panel>\n    );\n  },\n\n  render() {\n    return (\n      <React.Fragment>\n        {this.renderResults()}\n        {this.props.pagination && this.state.pageLinks && (\n          <Pagination pageLinks={this.state.pageLinks} {...this.props} />\n        )}\n      </React.Fragment>\n    );\n  },\n});\n\nexport {IssueList};\n\nexport default withApi(IssueList);\n","import {Client} from 'app/api';\n\n/**\n * Delete release version\n *\n * @param {String} orgId Organization slug\n * @param {String} version Version\n * @returns {Promise}\n */\nexport function deleteRelease(orgId, version) {\n  const api = new Client();\n\n  return api.requestPromise(\n    `/organizations/${orgId}/releases/${encodeURIComponent(version)}/`,\n    {\n      method: 'DELETE',\n    }\n  );\n}\n\n/**\n * Convert list of individual file changes into a per-file summary grouped by repository\n *\n * @param {Array<File>} fileList List of files\n * @returns {Object} Object grouped by repository and file name\n */\nexport function getFilesByRepository(fileList) {\n  return fileList.reduce(function(fbr, file) {\n    const {filename, repoName, author, type} = file;\n    if (!fbr.hasOwnProperty(repoName)) {\n      fbr[repoName] = {};\n    }\n    if (!fbr[repoName].hasOwnProperty(filename)) {\n      fbr[repoName][filename] = {\n        authors: {},\n        types: new Set(),\n        repos: new Set(),\n      };\n    }\n\n    fbr[repoName][filename].authors[author.email] = author;\n    fbr[repoName][filename].types.add(type);\n\n    return fbr;\n  }, {});\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport AvatarList from 'app/components/avatar/avatarList';\nimport InlineSvg from 'app/components/inlineSvg';\n\nclass FileChange extends React.PureComponent {\n  static propTypes = {\n    filename: PropTypes.string.isRequired,\n    authors: PropTypes.array.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n    };\n  }\n\n  render() {\n    const {filename, authors} = this.props;\n    return (\n      <li className=\"list-group-item list-group-item-sm release-file-change\">\n        <div className=\"row row-flex row-center-vertically\">\n          <div className=\"col-sm-10 truncate file-name\">\n            <InlineSvg src=\"icon-file\" className=\"icon-file-generic\" size=\"15\" />\n            {filename}\n          </div>\n          <div className=\"col-sm-2 align-right\">\n            <AvatarList users={authors} avatarSize={25} typeMember=\"authors\" />\n          </div>\n        </div>\n      </li>\n    );\n  }\n}\n\nexport default FileChange;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport FileChange from 'app/components/fileChange';\nimport {t, tn} from 'app/locale';\n\nfunction Collapsed(props) {\n  return (\n    <li className=\"list-group-item list-group-item-sm align-center\">\n      <span className=\"icon-container\" />\n      <a onClick={props.onClick}>\n        {tn('Show %s collapsed file', 'Show %s collapsed files', props.count)}\n      </a>\n    </li>\n  );\n}\n\nCollapsed.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  count: PropTypes.number.isRequired,\n};\n\nclass RepositoryFileSummary extends React.Component {\n  static propTypes = {\n    fileChangeSummary: PropTypes.object,\n    repository: PropTypes.string,\n  };\n\n  static MAX_WHEN_COLLAPSED = 5;\n\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      collapsed: true,\n    };\n  }\n\n  onCollapseToggle = () => {\n    this.setState({\n      collapsed: !this.state.collapsed,\n    });\n  };\n\n  render() {\n    const {repository, fileChangeSummary} = this.props;\n    const MAX = RepositoryFileSummary.MAX_WHEN_COLLAPSED;\n    let files = Object.keys(fileChangeSummary);\n    const fileCount = files.length;\n    files.sort();\n    if (this.state.collapsed && fileCount > MAX) {\n      files = files.slice(0, MAX);\n    }\n    const numCollapsed = fileCount - files.length;\n    const canCollapse = fileCount > MAX;\n    return (\n      <div>\n        <h5>\n          {tn(\n            '%s file changed in ' + repository,\n            '%s files changed in ' + repository,\n            fileCount\n          )}\n        </h5>\n        <ul className=\"list-group list-group-striped m-b-2\">\n          {files.map(filename => {\n            const {authors, types} = fileChangeSummary[filename];\n            return (\n              <FileChange\n                key={filename}\n                filename={filename}\n                authors={Object.values(authors)}\n                types={types}\n              />\n            );\n          })}\n          {numCollapsed > 0 && (\n            <Collapsed onClick={this.onCollapseToggle} count={numCollapsed} />\n          )}\n          {numCollapsed === 0 && canCollapse && (\n            <li className=\"list-group-item list-group-item-sm align-center\">\n              <span className=\"icon-container\" />\n              <a onClick={this.onCollapseToggle}>{t('Collapse')}</a>\n            </li>\n          )}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default RepositoryFileSummary;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport {t} from 'app/locale';\nimport InlineSvg from 'app/components/inlineSvg';\nimport Link from 'app/components/links/link';\nimport RepoLabel from 'app/components/repoLabel';\nimport TimeSince from 'app/components/timeSince';\n\nexport default class ReleaseDeploys extends React.Component {\n  static propTypes = {\n    deploys: PropTypes.array.isRequired,\n    version: PropTypes.string.isRequired,\n    orgId: PropTypes.string.isRequired,\n  };\n\n  renderEmpty() {\n    return <div className=\"box empty\">{t('None')}</div>;\n  }\n\n  render() {\n    const {deploys, version, orgId} = this.props;\n\n    return (\n      <React.Fragment>\n        <h6 className=\"nav-header m-b-1\">{t('Deploys')}</h6>\n        <ul className=\"nav nav-stacked\">\n          {!deploys.length\n            ? this.renderEmpty()\n            : deploys.map(deploy => {\n                const path = `/organizations/${orgId}/issues/?query=release:${version}&environment=${encodeURIComponent(\n                  deploy.environment\n                )}`;\n                return (\n                  <li key={deploy.id}>\n                    <Link to={path} title={t('View in stream')}>\n                      <div className=\"row row-flex row-center-vertically\">\n                        <div className=\"col-xs-6\">\n                          <ReleaseRepoLabel>\n                            {deploy.environment}\n                            <InlineSvg src=\"icon-open\" style={{marginLeft: 6}} />\n                          </ReleaseRepoLabel>\n                        </div>\n                        <div className=\"col-xs-6 align-right\">\n                          <small>\n                            <TimeSince date={deploy.dateFinished} />\n                          </small>\n                        </div>\n                      </div>\n                    </Link>\n                  </li>\n                );\n              })}\n        </ul>\n      </React.Fragment>\n    );\n  }\n}\n\nconst ReleaseRepoLabel = styled(RepoLabel)`\n  padding: 5px 8px;\n  vertical-align: bottom;\n`;\n","import React from 'react';\nimport styled from 'react-emotion';\n\nimport space from 'app/styles/space';\nimport Button from 'app/components/button';\nimport HeroIcon from 'app/components/heroIcon';\nimport Well from 'app/components/well';\nimport SentryTypes from 'app/sentryTypes';\nimport {t} from 'app/locale';\nimport withOrganization from 'app/utils/withOrganization';\n\nclass ReleaseEmptyState extends React.Component {\n  static propTypes = {\n    organization: SentryTypes.Organization,\n  };\n  render() {\n    return (\n      <StyledWell centered>\n        <HeroIcon src=\"icon-commit\" />\n        <h5>{t('Releases are better with commit data!')}</h5>\n        <p>\n          {t(`Connect a repository to see commit info, files changed, and authors\n                  involved in future releases`)}\n          .\n        </p>\n        <Button\n          priority=\"primary\"\n          href={`/organizations/${this.props.organization.slug}/repos/`}\n        >\n          {t('Connect a repository')}\n        </Button>\n      </StyledWell>\n    );\n  }\n}\n\nconst StyledWell = styled(Well)`\n  margin-top: ${space(4)};\n  padding-top: ${space(2)};\n  padding-bottom: ${space(4)};\n`;\n\nexport default withOrganization(ReleaseEmptyState);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'react-emotion';\n\nimport IssueList from 'app/components/issueList';\nimport {Panel, PanelBody, PanelItem} from 'app/components/panels';\nimport space from 'app/styles/space';\nimport {t} from 'app/locale';\n\nexport default class ReleaseIssues extends React.Component {\n  static propTypes = {\n    query: PropTypes.object.isRequired,\n    version: PropTypes.string.isRequired,\n    orgId: PropTypes.string.isRequired,\n  };\n\n  render() {\n    const {version, orgId, query} = this.props;\n\n    const resolvedPath = `/organizations/${orgId}/releases/${encodeURIComponent(\n      version\n    )}/resolved/`;\n\n    const issuesPath = `/organizations/${orgId}/issues/`;\n\n    return (\n      <React.Fragment>\n        <h5>{t('Issues Resolved in this Release')}</h5>\n        <StyledIssueList\n          endpoint={resolvedPath}\n          query={query}\n          pagination={false}\n          renderEmpty={() => (\n            <Panel>\n              <PanelBody>\n                <PanelItem justify=\"center\">{t('No issues resolved')}</PanelItem>\n              </PanelBody>\n            </Panel>\n          )}\n          showActions={false}\n          params={{orgId}}\n        />\n        <h5>{t('New Issues in this Release')}</h5>\n        <StyledIssueList\n          endpoint={issuesPath}\n          query={{\n            ...query,\n            query: 'first-release:\"' + version + '\"',\n            limit: 5,\n          }}\n          statsPeriod=\"0\"\n          pagination={false}\n          renderEmpty={() => (\n            <Panel>\n              <PanelBody>\n                <PanelItem justify=\"center\">{t('No new issues')}</PanelItem>\n              </PanelBody>\n            </Panel>\n          )}\n          showActions={false}\n          params={{orgId}}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nconst StyledIssueList = styled(IssueList)`\n  margin-bottom: ${space(2)};\n`;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'react-emotion';\n\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport LoadingError from 'app/components/loadingError';\nimport UserAvatar from 'app/components/avatar/userAvatar';\n\nimport withApi from 'app/utils/withApi';\nimport space from 'app/styles/space';\n\nimport {t} from 'app/locale';\nimport {Panel, PanelItem, PanelBody} from 'app/components/panels';\n\nclass CommitBar extends React.Component {\n  static propTypes = {\n    totalCommits: PropTypes.number.isRequired,\n    authorCommits: PropTypes.number.isRequired,\n  };\n\n  render() {\n    const barStyle = {};\n    barStyle.width = (this.props.authorCommits / this.props.totalCommits) * 100 + '%';\n\n    return <div className=\"commit-bar\" style={barStyle} />;\n  }\n}\n\nclass CommitAuthorStats extends React.Component {\n  static propTypes = {\n    api: PropTypes.object,\n    orgId: PropTypes.string.isRequired,\n    // Provided in project release views, not in org release views\n    projectId: PropTypes.string,\n    version: PropTypes.string.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      error: false,\n    };\n  }\n\n  componentDidMount() {\n    this.props.api.request(this.getPath(), {\n      method: 'GET',\n      success: (data, _, jqXHR) => {\n        this.setState({\n          error: false,\n          loading: false,\n          commitList: data,\n          pageLinks: jqXHR.getResponseHeader('Link'),\n        });\n      },\n      error: () => {\n        this.setState({\n          error: true,\n          loading: false,\n        });\n      },\n    });\n  }\n\n  getPath() {\n    const {orgId, projectId, version} = this.props;\n    const encodedVersion = encodeURIComponent(version);\n\n    return this.props.projectId\n      ? `/projects/${orgId}/${projectId}/releases/${encodedVersion}/commits/`\n      : `/organizations/${orgId}/releases/${encodedVersion}/commits/`;\n  }\n\n  renderEmpty() {\n    return <div className=\"box empty\">{t('No authors in this release')}</div>;\n  }\n\n  render() {\n    if (this.state.loading) {\n      return <LoadingIndicator />;\n    }\n\n    if (this.state.error) {\n      return <LoadingError />;\n    }\n\n    const {commitList} = this.state;\n\n    const commitAuthors = commitList.reduce((_commitAuthors, commit) => {\n      const {author} = commit;\n      if (!_commitAuthors.hasOwnProperty(author.email)) {\n        _commitAuthors[author.email] = {\n          commitCount: 1,\n          author,\n        };\n      } else {\n        _commitAuthors[author.email].commitCount += 1;\n      }\n      return _commitAuthors;\n    }, {});\n\n    const commitAuthorValues = Object.values(commitAuthors);\n\n    // sort commitAuthors by highest commitCount to lowest commitCount\n    commitAuthorValues.sort((a, b) => {\n      return b.commitCount - a.commitCount;\n    });\n\n    return (\n      <div style={{marginTop: 5}}>\n        <h6 className=\"nav-header m-b-1\">{t('Commits by Author')}</h6>\n        {!commitAuthorValues.length && this.renderEmpty()}\n        <Panel>\n          <PanelBody>\n            {commitAuthorValues.map((commitAuthor, i) => {\n              const {author, commitCount} = commitAuthor;\n              return (\n                <PanelItem key={i} p={1} align=\"center\">\n                  <AvatarWrapper>\n                    <UserAvatar user={author} size={20} hasTooltip />\n                  </AvatarWrapper>\n                  <CommitBarContainer>\n                    <CommitBar\n                      style={{marginLeft: 5}}\n                      totalCommits={commitList.length}\n                      authorCommits={commitCount}\n                    />\n                  </CommitBarContainer>\n                  <div>{commitCount}</div>\n                </PanelItem>\n              );\n            })}\n          </PanelBody>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nconst AvatarWrapper = styled('div')`\n  display: flex;\n`;\n\nconst CommitBarContainer = styled('div')`\n  display: flex;\n  flex-grow: 1;\n  padding: ${space(1)};\n`;\n\nexport default withApi(CommitAuthorStats);\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport LoadingError from 'app/components/loadingError';\nimport {t, tn} from 'app/locale';\nimport withOrganization from 'app/utils/withOrganization';\nimport withApi from 'app/utils/withApi';\n\nclass ReleaseProjectStatSparkline extends React.Component {\n  static propTypes = {\n    api: PropTypes.object.isRequired,\n    orgId: PropTypes.string,\n    project: PropTypes.object,\n    version: PropTypes.string,\n  };\n\n  state = {\n    loading: true,\n    error: false,\n    stats: [],\n    newIssueCount: null,\n  };\n\n  componentDidMount() {\n    Promise.all([\n      this.getStatReceived(),\n      this.getNewIssuesCount(),\n      import(/* webpackChunkName: \"ReactSparkLines\" */ 'react-sparklines'),\n    ]).then(\n      ([stats, newIssues, reactSparkLines]) => {\n        this.setState({\n          loading: false,\n          stats,\n          newIssueCount: newIssues && newIssues.newGroups,\n          Sparklines: reactSparkLines.Sparklines,\n          SparklinesLine: reactSparkLines.SparklinesLine,\n          error: false,\n        });\n      },\n      () => {\n        this.setState({error: true});\n      }\n    );\n  }\n\n  getStatReceived() {\n    const {api, orgId} = this.props;\n    const projectId = this.props.project.slug;\n    const path = `/projects/${orgId}/${projectId}/stats/`;\n    return api.requestPromise(path, {\n      method: 'GET',\n      data: 'stat=received',\n      success: data => {\n        this.setState({\n          stats: data,\n        });\n        this.getNewIssuesCount();\n      },\n      error: () => {\n        this.setState({\n          error: true,\n        });\n      },\n    });\n  }\n\n  getNewIssuesCount() {\n    const {api, orgId, version} = this.props;\n    const projectId = this.props.project.slug;\n    const issuesPath = `/projects/${orgId}/${projectId}/releases/${encodeURIComponent(\n      version\n    )}/`;\n    return api.requestPromise(issuesPath, {\n      method: 'GET',\n      success: data => {\n        this.setState({\n          newIssueCount: data.newGroups,\n          loading: false,\n        });\n      },\n      error: () => {\n        this.setState({\n          error: true,\n        });\n      },\n    });\n  }\n\n  renderProjectSummary() {\n    const {project} = this.props;\n    const {newIssueCount} = this.state;\n\n    return (\n      <React.Fragment>\n        <h6 className=\"m-b-0\">{project.slug}</h6>\n        <p className=\"m-b-0 text-muted\">\n          <small>\n            {newIssueCount > 0\n              ? tn('%s new issue', '%s new issues', newIssueCount)\n              : t('No new issues')}\n          </small>\n        </p>\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    if (this.state.loading) {\n      return <LoadingIndicator />;\n    }\n    if (this.state.error) {\n      return <LoadingError />;\n    }\n\n    const {Sparklines, SparklinesLine, stats} = this.state;\n    const values = stats.map(tuple => tuple[1]);\n\n    return (\n      <li>\n        <div className=\"sparkline pull-right\" style={{width: 96}}>\n          <Sparklines data={values} width={100} height={32}>\n            <SparklinesLine style={{stroke: '#8f85d4', fill: 'none', strokeWidth: 3}} />\n          </Sparklines>\n        </div>\n        <div>{this.renderProjectSummary()}</div>\n      </li>\n    );\n  }\n}\n\nexport default withOrganization(withApi(ReleaseProjectStatSparkline));\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport SentryTypes from 'app/sentryTypes';\nimport LastCommit from 'app/components/lastCommit';\n\nimport RepositoryFileSummary from 'app/components/repositoryFileSummary';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport {t} from 'app/locale';\n\nimport {getFilesByRepository} from './utils';\nimport ReleaseDeploys from './releaseDeploys';\nimport ReleaseEmptyState from './releaseEmptyState';\nimport ReleaseIssues from './releaseIssues';\nimport CommitAuthorStats from './commitAuthorStats';\nimport ReleaseProjectStatSparkline from './releaseProjectStatSparkline';\n\nexport default class ReleaseOverview extends AsyncComponent {\n  static propTypes = {\n    release: SentryTypes.Release,\n    query: PropTypes.object,\n  };\n\n  getEndpoints() {\n    const {orgId, version} = this.props.params;\n    const basePath = `/organizations/${orgId}/releases/${encodeURIComponent(version)}/`;\n    return [\n      ['fileList', `${basePath}commitfiles/`],\n      ['deploys', `${basePath}deploys/`],\n      ['repos', `/organizations/${orgId}/repos/`],\n    ];\n  }\n\n  renderEmpty() {\n    return <div className=\"box empty\">{t('None')}</div>;\n  }\n\n  renderBody() {\n    const {\n      release,\n      query,\n      params: {orgId, version},\n    } = this.props;\n\n    const {fileList, repos} = this.state;\n\n    const hasRepos = repos.length > 0;\n\n    const filesByRepository = getFilesByRepository(fileList);\n\n    return (\n      <div>\n        <div className=\"row\" style={{paddingTop: 10}}>\n          <div className=\"col-sm-8\">\n            <ReleaseIssues version={version} orgId={orgId} query={query} />\n            {hasRepos && (\n              <div>\n                {Object.keys(filesByRepository).map((repository, i) => {\n                  return (\n                    <RepositoryFileSummary\n                      key={i}\n                      repository={repository}\n                      fileChangeSummary={filesByRepository[repository]}\n                    />\n                  );\n                })}\n              </div>\n            )}\n          </div>\n          <div className=\"col-sm-4\">\n            {hasRepos ? (\n              <div>\n                {release.lastCommit && (\n                  <LastCommit commit={release.lastCommit} headerClass=\"nav-header\" />\n                )}\n                <CommitAuthorStats orgId={orgId} version={version} />\n                <h6 className=\"nav-header m-b-1\">{t('Projects Affected')}</h6>\n                <ul className=\"nav nav-stacked\">\n                  {release.projects.length === 0\n                    ? this.renderEmpty()\n                    : release.projects.map(project => {\n                        return (\n                          <ReleaseProjectStatSparkline\n                            key={project.slug}\n                            orgId={orgId}\n                            project={project}\n                            version={version}\n                          />\n                        );\n                      })}\n                </ul>\n              </div>\n            ) : (\n              <ReleaseEmptyState />\n            )}\n            <ReleaseDeploys\n              deploys={this.state.deploys}\n              version={version}\n              orgId={orgId}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}