{"version":3,"sources":["webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/components/links/linkWithConfirmation.jsx","webpack:///./app/utils/slugify.tsx","webpack:///./app/utils/crashReports.tsx","webpack:///./app/views/settings/organization/permissionAlert.tsx","webpack:///./app/data/forms/organizationGeneralSettings.jsx","webpack:///./app/views/settings/organizationGeneralSettings/organizationSettingsForm.jsx","webpack:///./app/views/settings/organizationGeneralSettings/index.tsx"],"names":["props","_title","title","objSlug","children","LinkWithConfirmation","args","state","isModalOpen","this","className","disabled","otherProps","classNames","onClick","onToggle","React","PureComponent","slugify","str","toLowerCase","replace","formatStoreCrashReports","value","values","STORE_CRASH_REPORTS_VALUES","Array","from","_","i","push","PermissionAlert","access","hasAccess","type","icon","defaultProps","route","formGroups","t","fields","name","required","label","help","transformInput","saveOnBlur","saveMessageAlertType","saveMessage","choices","initialData","availableRoles","map","r","id","has","confirm","true","false","multiline","autosize","maxRows","placeholder","extraHelp","getValue","val","extractMultilineFields","setValue","join","visible","features","formatLabel","allowedValues","hasSsoEnabled","OrganizationSettingsForm","orgId","organization","onSave","authProvider","endpoint","apiMethod","apiEndpoint","allowUndo","onSubmitSuccess","_resp","model","onSubmitError","addErrorMessage","additionalFieldProps","Set","location","forms","organizationSettingsFields","allowGravatar","updateOrganization","AsyncComponent","withOrganization","handleRemoveOrganization","api","params","successMessage","errorMessage","handleSave","prevData","data","slug","render","hasProjects","projects","length","Fragment","isDefault","priority","size","message","noMargin","project","key","onConfirm","Component","withApi"],"mappings":"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","file":"OrganizationGeneralSettings.js","sourcesContent":["import React, {FunctionComponent} from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype DocumentTitleProps = {\n  // Main page title\n  title: string;\n  // Organization or project slug to give title some context\n  objSlug: string;\n  children?: React.ReactNode;\n};\n\nconst SentryDocumentTitle: FunctionComponent<DocumentTitleProps> = (\n  props: DocumentTitleProps\n) => {\n  const _title = `${props.title} - ${props.objSlug} - Sentry`;\n  return <DocumentTitle title={_title}>{props.children}</DocumentTitle>;\n};\n\nexport default SentryDocumentTitle;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport Confirm from 'app/components/confirm';\n\n/**\n * <Confirm> is a more generic version of this component\n */\nclass LinkWithConfirmation extends React.PureComponent {\n  static propTypes = {\n    disabled: PropTypes.bool,\n    message: PropTypes.node.isRequired,\n    title: PropTypes.node.isRequired,\n    onConfirm: PropTypes.func.isRequired,\n  };\n\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isModalOpen: false,\n    };\n  }\n\n  render() {\n    const {className, disabled, title, children, ...otherProps} = this.props;\n    return (\n      <Confirm {...otherProps} disabled={disabled}>\n        <a\n          className={classNames(className || '', {disabled})}\n          disabled={disabled}\n          onClick={this.onToggle}\n          title={title}\n        >\n          {children}\n        </a>\n      </Confirm>\n    );\n  }\n}\n\nexport default LinkWithConfirmation;\n","// XXX: This is NOT an exhaustive slugify function\n// Only forces lowercase and replaces spaces with hyphens\nexport default function slugify(str: any): string {\n  return typeof str === 'string' ? str.toLowerCase().replace(' ', '-') : '';\n}\n","import {t, tct} from 'app/locale';\n\nexport function formatStoreCrashReports(value: number) {\n  if (value === -1) {\n    return t('Unlimited');\n  } else if (value === 0) {\n    return t('Disabled');\n  } else {\n    return tct('[value] per issue', {value});\n  }\n}\n\nfunction getStoreCrashReportsValues() {\n  // generate a range from 0 (disabled) to 20 inclusive\n  const values = Array.from(new Array(21), (_, i) => i);\n  values.push(-1); // special \"Unlimited\" at the end\n  return values;\n}\n\nexport const STORE_CRASH_REPORTS_VALUES = getStoreCrashReportsValues();\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {t} from 'app/locale';\nimport Access from 'app/components/acl/access';\nimport Alert from 'app/components/alert';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access, ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert type=\"warning\" icon=\"icon-warning-sm\" {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner or manager role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nPermissionAlert.propTypes = {\n  access: PropTypes.arrayOf(PropTypes.string),\n};\n\nPermissionAlert.defaultProps = {\n  access: ['org:write'],\n};\n\nexport default PermissionAlert;\n","import {extractMultilineFields} from 'app/utils';\nimport {t} from 'app/locale';\nimport slugify from 'app/utils/slugify';\nimport {\n  STORE_CRASH_REPORTS_VALUES,\n  formatStoreCrashReports,\n} from 'app/utils/crashReports';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/';\n\nconst formGroups = [\n  {\n    // Form \"section\"/\"panel\"\n    title: t('General'),\n    fields: [\n      {\n        name: 'slug',\n        type: 'string',\n        required: true,\n        label: t('Name'),\n        help: t('A unique ID used to identify this organization'),\n        transformInput: slugify,\n\n        saveOnBlur: false,\n        saveMessageAlertType: 'info',\n        saveMessage: t(\n          'You will be redirected to the new organization slug after saving'\n        ),\n      },\n      {\n        name: 'name',\n        type: 'string',\n        required: true,\n\n        label: t('Display Name'),\n        help: t('This is the name that users will see for the organization'),\n      },\n      {\n        name: 'isEarlyAdopter',\n        type: 'boolean',\n        label: t('Early Adopter'),\n        help: t(\"Opt-in to new features before they're released to the public\"),\n      },\n    ],\n  },\n\n  {\n    title: 'Membership',\n    fields: [\n      {\n        name: 'defaultRole',\n        type: 'array',\n        required: true,\n        label: t('Default Role'),\n        // seems weird to have choices in initial form data\n        choices: ({initialData} = {}) =>\n          (initialData.availableRoles &&\n            initialData.availableRoles.map(r => [r.id, r.name])) ||\n          [],\n        help: t('The default role new members will receive'),\n        disabled: ({access}) => !access.has('org:admin'),\n      },\n      {\n        name: 'openMembership',\n        type: 'boolean',\n        required: true,\n        label: t('Open Membership'),\n        help: t('Allow organization members to freely join or leave any team'),\n      },\n    ],\n  },\n\n  {\n    title: t('Security & Privacy'),\n    fields: [\n      {\n        name: 'require2FA',\n        type: 'boolean',\n        label: t('Require Two-Factor Authentication'),\n        help: t('Require and enforce two-factor authentication for all members'),\n        confirm: {\n          true: t(\n            'This will remove all members without two-factor authentication' +\n              ' from your organization. It will also send them an email to setup 2FA' +\n              ' and reinstate their access and settings. Do you want to continue?'\n          ),\n          false: t(\n            'Are you sure you want to allow users to access your organization without having two-factor authentication enabled?'\n          ),\n        },\n      },\n      {\n        name: 'allowSharedIssues',\n        type: 'boolean',\n\n        label: t('Allow Shared Issues'),\n        help: t('Enable sharing of limited details on issues to anonymous users'),\n        confirm: {\n          true: t('Are you sure you want to allow sharing issues to anonymous users?'),\n        },\n      },\n      {\n        name: 'enhancedPrivacy',\n        type: 'boolean',\n\n        label: t('Enhanced Privacy'),\n        help: t(\n          'Enable enhanced privacy controls to limit personally identifiable information (PII) as well as source code in things like notifications'\n        ),\n        confirm: {\n          false: t(\n            'Disabling this can have privacy implications for ALL projects, are you sure you want to continue?'\n          ),\n        },\n      },\n      {\n        name: 'dataScrubber',\n        type: 'boolean',\n        label: t('Require Data Scrubber'),\n        help: t('Require server-side data scrubbing be enabled for all projects'),\n        confirm: {\n          false: t(\n            'Disabling this can have privacy implications for ALL projects, are you sure you want to continue?'\n          ),\n        },\n      },\n      {\n        name: 'dataScrubberDefaults',\n        type: 'boolean',\n        label: t('Require Using Default Scrubbers'),\n        help: t(\n          'Require the default scrubbers be applied to prevent things like passwords and credit cards from being stored for all projects'\n        ),\n        confirm: {\n          false: t(\n            'Disabling this can have privacy implications for ALL projects, are you sure you want to continue?'\n          ),\n        },\n      },\n      {\n        name: 'sensitiveFields',\n        type: 'string',\n        multiline: true,\n        autosize: true,\n        maxRows: 10,\n        placeholder: 'e.g. email',\n        label: t('Global Sensitive Fields'),\n        help: t(\n          'Additional field names to match against when scrubbing data for all projects. Separate multiple entries with a newline.'\n        ),\n        extraHelp: t(\n          'Note: These fields will be used in addition to project specific fields.'\n        ),\n        getValue: val => extractMultilineFields(val),\n        setValue: val => (val && typeof val.join === 'function' && val.join('\\n')) || '',\n      },\n      {\n        name: 'safeFields',\n        type: 'string',\n        multiline: true,\n        autosize: true,\n        maxRows: 10,\n        placeholder: t('e.g. business-email'),\n        label: t('Global Safe Fields'),\n        help: t(\n          'Field names which data scrubbers should ignore. Separate multiple entries with a newline.'\n        ),\n        extraHelp: t(\n          'Note: These fields will be used in addition to project specific fields'\n        ),\n        getValue: val => extractMultilineFields(val),\n        setValue: val => (val && typeof val.join === 'function' && val.join('\\n')) || '',\n      },\n      {\n        name: 'scrubIPAddresses',\n        type: 'boolean',\n        label: t('Prevent Storing of IP Addresses'),\n        help: t(\n          'Preventing IP addresses from being stored for new events on all projects'\n        ),\n        confirm: {\n          false: t(\n            'Disabling this can have privacy implications for ALL projects, are you sure you want to continue?'\n          ),\n        },\n      },\n      {\n        name: 'scrapeJavaScript',\n        type: 'boolean',\n        confirm: {\n          false: t(\n            \"Are you sure you want to disable sourcecode fetching for JavaScript events? This will affect Sentry's ability to aggregate issues if you're not already uploading sourcemaps as artifacts.\"\n          ),\n        },\n        label: t('Allow JavaScript Source Fetching'),\n        help: t('Allow Sentry to scrape missing JavaScript source context when possible'),\n      },\n      {\n        name: 'storeCrashReports',\n        type: 'range',\n        label: t('Store Native Crash Reports'),\n        help: t(\n          'Store native crash reports such as Minidumps for improved processing and download in issue details'\n        ),\n        visible: ({features}) => features.has('event-attachments'),\n        formatLabel: formatStoreCrashReports,\n        allowedValues: STORE_CRASH_REPORTS_VALUES,\n      },\n      {\n        name: 'attachmentsRole',\n        type: 'array',\n        choices: ({initialData} = {}) =>\n          (initialData.availableRoles &&\n            initialData.availableRoles.map(r => [r.id, r.name])) ||\n          [],\n        label: t('Attachments Access'),\n        help: t(\n          'Permissions required to download event attachments, such as native crash reports or log files'\n        ),\n        visible: ({features}) => features.has('event-attachments'),\n      },\n      {\n        name: 'trustedRelays',\n        type: 'string',\n        multiline: true,\n        autosize: true,\n        maxRows: 10,\n        placeholder: t('Paste the relay public keys here'),\n        label: t('Trusted Relays'),\n        help: t(\n          'The list of relay public keys that should be trusted. Any relay in this list will be permitted to access org and project configs. Separate multiple entries with a newline.'\n        ),\n        getValue: val => extractMultilineFields(val),\n        setValue: val => (val && typeof val.join === 'function' && val.join('\\n')) || '',\n        visible: ({features}) => features.has('relay'),\n      },\n      {\n        name: 'allowJoinRequests',\n        type: 'boolean',\n\n        label: t('Allow Join Requests'),\n        help: t('Allow users to request to join your organization'),\n        confirm: {\n          true: t(\n            'Are you sure you want to allow users to request to join your organization?'\n          ),\n        },\n        visible: ({hasSsoEnabled}) => !hasSsoEnabled,\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {updateOrganization} from 'app/actionCreators/organizations';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport AvatarChooser from 'app/components/avatarChooser';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport PermissionAlert from 'app/views/settings/organization/permissionAlert';\nimport SentryTypes from 'app/sentryTypes';\nimport organizationSettingsFields from 'app/data/forms/organizationGeneralSettings';\nimport withOrganization from 'app/utils/withOrganization';\n\nclass OrganizationSettingsForm extends AsyncComponent {\n  static propTypes = {\n    location: PropTypes.object,\n    organization: SentryTypes.Organization,\n    orgId: PropTypes.string.isRequired,\n    access: PropTypes.object.isRequired,\n    initialData: PropTypes.object.isRequired,\n    onSave: PropTypes.func.isRequired,\n  };\n\n  getEndpoints() {\n    const {orgId} = this.props;\n    return [['authProvider', `/organizations/${orgId}/auth-provider/`]];\n  }\n\n  render() {\n    const {initialData, organization, orgId, onSave, access} = this.props;\n    const {authProvider} = this.state;\n    const endpoint = `/organizations/${orgId}/`;\n    return (\n      <Form\n        className=\"ref-organization-settings\"\n        apiMethod=\"PUT\"\n        apiEndpoint={endpoint}\n        saveOnBlur\n        allowUndo\n        initialData={initialData}\n        onSubmitSuccess={(_resp, model) => {\n          // Special case for slug, need to forward to new slug\n          if (typeof onSave === 'function') {\n            onSave(initialData, model.initialData);\n          }\n        }}\n        onSubmitError={() => addErrorMessage('Unable to save change')}\n      >\n        <PermissionAlert />\n        <JsonForm\n          additionalFieldProps={{hasSsoEnabled: !!authProvider}}\n          features={new Set(organization.features)}\n          access={access}\n          location={this.props.location}\n          forms={organizationSettingsFields}\n          disabled={!access.has('org:write')}\n        />\n        <AvatarChooser\n          type=\"organization\"\n          allowGravatar={false}\n          endpoint={`${endpoint}avatar/`}\n          model={initialData}\n          onSave={updateOrganization}\n          disabled={!access.has('org:write')}\n        />\n      </Form>\n    );\n  }\n}\n\nexport default withOrganization(OrganizationSettingsForm);\n","import {RouteComponentProps} from 'react-router/lib/Router';\nimport {browserHistory} from 'react-router';\nimport React from 'react';\n\nimport {Client} from 'app/api';\nimport {Organization} from 'app/types';\nimport {Panel, PanelHeader} from 'app/components/panels';\nimport {addLoadingMessage} from 'app/actionCreators/indicator';\nimport {\n  changeOrganizationSlug,\n  removeAndRedirectToRemainingOrganization,\n  updateOrganization,\n} from 'app/actionCreators/organizations';\nimport {t, tct} from 'app/locale';\nimport Field from 'app/views/settings/components/forms/field';\nimport LinkWithConfirmation from 'app/components/links/linkWithConfirmation';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport OrganizationSettingsForm from './organizationSettingsForm';\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n} & RouteComponentProps<{orgId: string}, {}>;\n\nclass OrganizationGeneralSettings extends React.Component<Props> {\n  handleRemoveOrganization = () => {\n    const {api, organization, params} = this.props;\n    if (!organization) {\n      return;\n    }\n\n    addLoadingMessage();\n    removeAndRedirectToRemainingOrganization(api, {\n      orgId: params.orgId,\n      successMessage: `${organization.name} is queued for deletion.`,\n      errorMessage: `Error removing the ${organization.name} organization`,\n    });\n  };\n\n  handleSave = (prevData: Organization, data: Organization) => {\n    if (data.slug && data.slug !== prevData.slug) {\n      changeOrganizationSlug(prevData, data);\n      browserHistory.replace(`/settings/${data.slug}/`);\n    } else {\n      // This will update OrganizationStore (as well as OrganizationsStore\n      // which is slightly incorrect because it has summaries vs a detailed org)\n      updateOrganization(data);\n    }\n  };\n\n  render() {\n    const {organization, params} = this.props;\n    const {orgId} = params;\n    const access = new Set(organization.access);\n    const hasProjects = organization.projects && !!organization.projects.length;\n\n    return (\n      <React.Fragment>\n        <SentryDocumentTitle title={t('General Settings')} objSlug={orgId} />\n        <div>\n          <SettingsPageHeader title={t('Organization Settings')} />\n          <OrganizationSettingsForm\n            {...this.props}\n            initialData={organization}\n            orgId={orgId}\n            access={access}\n            onSave={this.handleSave}\n          />\n\n          {access.has('org:admin') && !organization.isDefault && (\n            <Panel>\n              <PanelHeader>{t('Remove Organization')}</PanelHeader>\n              <Field\n                label={t('Remove Organization')}\n                help={t(\n                  'Removing this organization will delete all data including projects and their associated events.'\n                )}\n              >\n                <div>\n                  <LinkWithConfirmation\n                    className=\"btn btn-danger\"\n                    priority=\"danger\"\n                    size=\"small\"\n                    title={t('Remove %s organization', organization && organization.name)}\n                    message={\n                      <div>\n                        <TextBlock>\n                          {tct(\n                            'Removing the organization, [name] is permanent and cannot be undone! Are you sure you want to continue?',\n                            {\n                              name: organization && <strong>{organization.name}</strong>,\n                            }\n                          )}\n                        </TextBlock>\n\n                        {hasProjects && (\n                          <div>\n                            <TextBlock noMargin>\n                              {t(\n                                'This will also remove the following associated projects:'\n                              )}\n                            </TextBlock>\n                            <ul className=\"ref-projects\">\n                              {organization.projects.map(project => (\n                                <li key={project.slug}>{project.slug}</li>\n                              ))}\n                            </ul>\n                          </div>\n                        )}\n                      </div>\n                    }\n                    onConfirm={this.handleRemoveOrganization}\n                  >\n                    {t('Remove Organization')}\n                  </LinkWithConfirmation>\n                </div>\n              </Field>\n            </Panel>\n          )}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withApi(withOrganization(OrganizationGeneralSettings));\n"],"sourceRoot":""}