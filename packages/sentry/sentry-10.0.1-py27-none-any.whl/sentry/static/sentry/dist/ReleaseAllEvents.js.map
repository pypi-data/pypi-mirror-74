{"version":3,"sources":["webpack:///./app/views/releases/detail/groupListHeader.jsx","webpack:///./app/views/releases/detail/groupList.jsx","webpack:///./app/views/releases/detail/releaseAllEvents.jsx"],"names":["GroupListHeader","disablePadding","w","mx","flex","className","t","justify","GroupList","createReactClass","displayName","contextTypes","location","PropTypes","object","mixins","Reflux","listenTo","GroupStore","getDefaultProps","canSelectGroups","getInitialState","loading","error","groups","componentWillMount","this","_streamManager","StreamManager","fetchData","shouldComponentUpdate","_nextProps","nextState","isEqual","state","componentDidUpdate","prevProps","orgId","props","componentWillUnmount","loadInitialData","api","setState","fetchOrgMembers","then","members","memberList","indexMembersByProject","request","getGroupListEndpoint","success","data","_","jqXHR","push","pageLinks","getResponseHeader","path","qs","stringify","getQueryParams","query","queryParams","context","limit","sort","onGroupChange","getAllItems","render","onRetry","length","map","id","project","hasOwnProperty","slug","key","canSelect","withApi","ReleaseAllEvents","release","params","icon","iconSize","type","to","pathname","version"],"mappings":"mSAKMA,EAAkB,WACtB,OACE,kBAAC,IAAD,CAAaC,gBAAc,GACzB,kBAAC,IAAD,CAAKC,EAAG,CAAC,EAAI,GAAI,EAAI,GAAI,IAASC,GAAI,EAAGC,KAAK,IAAIC,UAAU,kBACzDC,YAAE,UAEL,kBAAC,IAAD,CAAKJ,EAAG,IAAKC,GAAI,EAAGE,UAAU,sCAC3BC,YAAE,kBAEL,kBAAC,IAAD,CAAMJ,EAAG,GAAIC,GAAI,EAAGI,QAAQ,WAAWF,UAAU,kBAC9CC,YAAE,WAEL,kBAAC,IAAD,CAAMJ,EAAG,GAAIC,GAAI,EAAGI,QAAQ,WAAWF,UAAU,kBAC9CC,YAAE,UAEL,kBAAC,IAAD,CACEJ,EAAG,GACHC,GAAI,EACJI,QAAQ,WACRF,UAAU,sCAETC,YAAE,eArBLN,E,8BA2BSA,QCZTQ,EAAYC,IAAiB,CACjCC,YAAa,YASbC,aAAc,CACZC,SAAUC,IAAUC,QAGtBC,OAAQ,CAACC,IAAOC,SAASC,IAAY,kBAErCC,gBAhBiC,WAiB/B,MAAO,CACLC,iBAAiB,IAIrBC,gBAtBiC,WAuB/B,MAAO,CACLC,SAAS,EACTC,OAAO,EACPC,OAAQ,KAIZC,mBA9BiC,WA+B/BC,KAAKC,eAAiB,IAAIC,IAAcV,KAExCQ,KAAKG,aAGPC,sBApCiC,SAoCXC,EAAYC,GAChC,OAAQC,IAAQP,KAAKQ,MAAOF,IAG9BG,mBAxCiC,SAwCdC,GACbA,EAAUC,QAAUX,KAAKY,MAAMD,OACjCX,KAAKG,aAITU,qBA9CiC,WA+C/BrB,IAAWsB,gBAAgB,KAG7BX,UAlDiC,WAkDrB,WACVX,IAAWsB,gBAAgB,IADjB,MAEWd,KAAKY,MAAnBG,EAFG,EAEHA,IAAKJ,EAFF,EAEEA,MAEZX,KAAKgB,SAAS,CACZpB,SAAS,EACTC,OAAO,IAGToB,YAAgBF,EAAKJ,GAAOO,MAAK,SAAAC,GAC/B,EAAKH,SAAS,CAACI,WAAYC,YAAsBF,QAGnDJ,EAAIO,QAAQtB,KAAKuB,uBAAwB,CACvCC,QAAS,SAACC,EAAMC,EAAGC,GACjB,EAAK1B,eAAe2B,KAAKH,GAEzB,EAAKT,SAAS,CACZnB,OAAO,EACPD,SAAS,EACTiC,UAAWF,EAAMG,kBAAkB,WAGvCjC,MAAO,WACL,EAAKmB,SAAS,CACZnB,OAAO,EACPD,SAAS,QAMjB2B,qBAlFiC,WAkFV,IACdZ,EAASX,KAAKY,MAAdD,MACDoB,EAAO,kBAAH,OAAqBpB,EAArB,YAEV,gBAAUoB,EAAV,YAAkBC,IAAGC,UAAUjC,KAAKkC,oBAGtCA,eAzFiC,WAyFhB,IACRC,EAASnC,KAAKY,MAAduB,MAEDC,EAAcpC,KAAKqC,QAAQnD,SAASiD,MAK1C,OAJAC,EAAYE,MAAQ,GACpBF,EAAYG,KAAO,MACnBH,EAAYD,MAAQA,EAEbC,GAGTI,cApGiC,WAqG/B,IAAM1C,EAASE,KAAKC,eAAewC,cAE9BlC,IAAQT,EAAQE,KAAKQ,MAAMV,SAC9BE,KAAKgB,SAAS,CACZlB,YAKN4C,OA9GiC,WA8GxB,WACP,GAAI1C,KAAKQ,MAAMZ,QACb,OAAO,kBAAC,UAAD,MACF,GAAII,KAAKQ,MAAMX,MACpB,OAAO,kBAAC,IAAD,CAAc8C,QAAS3C,KAAKG,YAC9B,GAAiC,IAA7BH,KAAKQ,MAAMV,OAAO8C,OAC3B,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,2BAAIhE,YAAE,4DAVT,IAiBA+B,EAASX,KAAKY,MAAdD,MAEP,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACGX,KAAKQ,MAAMV,OAAO+C,KAAI,YAAmB,IAAjBC,EAAiB,EAAjBA,GAAIC,EAAa,EAAbA,QACrB5B,EACJ,EAAKX,MAAMY,YAAc,EAAKZ,MAAMY,WAAW4B,eAAeD,EAAQE,MAClE,EAAKzC,MAAMY,WAAW2B,EAAQE,MAC9B,KAEN,OACE,kBAAC,IAAD,CACEC,IAAKJ,EACLA,GAAIA,EACJnC,MAAOA,EACPwC,UAAW,EAAKvC,MAAMlB,gBACtB0B,WAAYD,YAYbiC,gBAAQtE,I,kCCjLvB,2DASMuE,EAAmB,SAAC,GAAsB,IAArBC,EAAqB,EAArBA,QAClB3C,EADuC,EAAZ4C,OAC3B5C,MACP,OACE,6BACE,kBAAC,IAAD,CAAO6C,KAAK,YAAYC,SAAS,OAAOC,KAAK,WAC3C,kBAAC,OAAD,CACEC,GAAI,CACFC,SAAU,kBAAF,OAAoBjD,EAApB,YACRwB,MAAO,CAACA,MAAO,WAAamB,EAAQO,WAGrCjF,YAAE,wDAGP,kBAAC,IAAD,CACE+B,MAAOA,EACPwB,MAAO,YAAcmB,EAAQO,QAAU,IACvCnE,iBAAiB,MAjBnB2D,E,+BA0BSA","file":"ReleaseAllEvents.js","sourcesContent":["import React from 'react';\nimport {Flex, Box} from 'grid-emotion';\nimport {t} from 'app/locale';\nimport {PanelHeader} from 'app/components/panels';\n\nconst GroupListHeader = () => {\n  return (\n    <PanelHeader disablePadding>\n      <Box w={[8 / 12, 8 / 12, 6 / 12]} mx={2} flex=\"1\" className=\"toolbar-header\">\n        {t('Issue')}\n      </Box>\n      <Box w={160} mx={2} className=\"toolbar-header hidden-xs hidden-sm\">\n        {t('Last 24 hours')}\n      </Box>\n      <Flex w={80} mx={2} justify=\"flex-end\" className=\"toolbar-header\">\n        {t('events')}\n      </Flex>\n      <Flex w={80} mx={2} justify=\"flex-end\" className=\"toolbar-header\">\n        {t('users')}\n      </Flex>\n      <Flex\n        w={80}\n        mx={2}\n        justify=\"flex-end\"\n        className=\"hidden-xs hidden-sm toolbar-header\"\n      >\n        {t('Assignee')}\n      </Flex>\n    </PanelHeader>\n  );\n};\n\nexport default GroupListHeader;\n","import isEqual from 'lodash/isEqual';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Reflux from 'reflux';\nimport createReactClass from 'create-react-class';\nimport qs from 'query-string';\n\nimport {Panel, PanelBody} from 'app/components/panels';\nimport {fetchOrgMembers, indexMembersByProject} from 'app/actionCreators/members';\nimport {t} from 'app/locale';\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport GroupStore from 'app/stores/groupStore';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport StreamGroup from 'app/components/stream/group';\nimport StreamManager from 'app/utils/streamManager';\nimport withApi from 'app/utils/withApi';\n\nimport GroupListHeader from './groupListHeader';\n\nconst GroupList = createReactClass({\n  displayName: 'GroupList',\n\n  propTypes: {\n    api: PropTypes.object.isRequired,\n    query: PropTypes.string.isRequired,\n    canSelectGroups: PropTypes.bool,\n    orgId: PropTypes.string.isRequired,\n  },\n\n  contextTypes: {\n    location: PropTypes.object,\n  },\n\n  mixins: [Reflux.listenTo(GroupStore, 'onGroupChange')],\n\n  getDefaultProps() {\n    return {\n      canSelectGroups: true,\n    };\n  },\n\n  getInitialState() {\n    return {\n      loading: true,\n      error: false,\n      groups: [],\n    };\n  },\n\n  componentWillMount() {\n    this._streamManager = new StreamManager(GroupStore);\n\n    this.fetchData();\n  },\n\n  shouldComponentUpdate(_nextProps, nextState) {\n    return !isEqual(this.state, nextState);\n  },\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.orgId !== this.props.orgId) {\n      this.fetchData();\n    }\n  },\n\n  componentWillUnmount() {\n    GroupStore.loadInitialData([]);\n  },\n\n  fetchData() {\n    GroupStore.loadInitialData([]);\n    const {api, orgId} = this.props;\n\n    this.setState({\n      loading: true,\n      error: false,\n    });\n\n    fetchOrgMembers(api, orgId).then(members => {\n      this.setState({memberList: indexMembersByProject(members)});\n    });\n\n    api.request(this.getGroupListEndpoint(), {\n      success: (data, _, jqXHR) => {\n        this._streamManager.push(data);\n\n        this.setState({\n          error: false,\n          loading: false,\n          pageLinks: jqXHR.getResponseHeader('Link'),\n        });\n      },\n      error: () => {\n        this.setState({\n          error: true,\n          loading: false,\n        });\n      },\n    });\n  },\n\n  getGroupListEndpoint() {\n    const {orgId} = this.props;\n    const path = `/organizations/${orgId}/issues/`;\n\n    return `${path}?${qs.stringify(this.getQueryParams())}`;\n  },\n\n  getQueryParams() {\n    const {query} = this.props;\n\n    const queryParams = this.context.location.query;\n    queryParams.limit = 50;\n    queryParams.sort = 'new';\n    queryParams.query = query;\n\n    return queryParams;\n  },\n\n  onGroupChange() {\n    const groups = this._streamManager.getAllItems();\n\n    if (!isEqual(groups, this.state.groups)) {\n      this.setState({\n        groups,\n      });\n    }\n  },\n\n  render() {\n    if (this.state.loading) {\n      return <LoadingIndicator />;\n    } else if (this.state.error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    } else if (this.state.groups.length === 0) {\n      return (\n        <Panel>\n          <PanelBody>\n            <EmptyStateWarning>\n              <p>{t(\"There don't seem to be any events fitting the query.\")}</p>\n            </EmptyStateWarning>\n          </PanelBody>\n        </Panel>\n      );\n    }\n\n    const {orgId} = this.props;\n\n    return (\n      <Panel>\n        <GroupListHeader />\n        <PanelBody>\n          {this.state.groups.map(({id, project}) => {\n            const members =\n              this.state.memberList && this.state.memberList.hasOwnProperty(project.slug)\n                ? this.state.memberList[project.slug]\n                : null;\n\n            return (\n              <StreamGroup\n                key={id}\n                id={id}\n                orgId={orgId}\n                canSelect={this.props.canSelectGroups}\n                memberList={members}\n              />\n            );\n          })}\n        </PanelBody>\n      </Panel>\n    );\n  },\n});\n\nexport {GroupList};\n\nexport default withApi(GroupList);\n","import React from 'react';\nimport {Link} from 'react-router';\n\nimport SentryTypes from 'app/sentryTypes';\nimport Alert from 'app/components/alert';\nimport {t} from 'app/locale';\n\nimport GroupList from './groupList';\n\nconst ReleaseAllEvents = ({release, params}) => {\n  const {orgId} = params;\n  return (\n    <div>\n      <Alert icon=\"icon-open\" iconSize=\"14px\" type=\"warning\">\n        <Link\n          to={{\n            pathname: `/organizations/${orgId}/issues/`,\n            query: {query: 'release:' + release.version},\n          }}\n        >\n          {t('View all issues seen in this release in the stream')}\n        </Link>\n      </Alert>\n      <GroupList\n        orgId={orgId}\n        query={'release:\"' + release.version + '\"'}\n        canSelectGroups={false}\n      />\n    </div>\n  );\n};\nReleaseAllEvents.propTypes = {\n  release: SentryTypes.Release,\n};\n\nexport default ReleaseAllEvents;\n"],"sourceRoot":""}