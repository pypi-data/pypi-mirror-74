{"version":3,"sources":["webpack:///./app/utils/routeTitle.tsx","webpack:///./app/components/alertLink.jsx","webpack:///./app/views/settings/organizationRepositories/organizationRepositories.jsx","webpack:///./app/views/settings/organizationRepositories/index.jsx"],"names":["routeName","orgSlug","withSentry","tmpl","AlertLink","this","props","icon","children","size","StyledLink","StyledInlineSvg","src","spacingSize","AlertLinkText","React","Component","defaultProps","priority","styled","Link","p","theme","alert","backgroundLight","gray4","border","space","blueLight","InlineSvg","OrganizationRepositories","params","itemList","api","onRepositoryChange","orgId","hasItemList","length","title","t","to","className","tct","link","href","disablePadding","px","map","repo","key","id","repository","showProvider","mb","OrganizationRepositoriesContainer","data","state","forEach","item","status","setState","onAddRepo","push","sortArray","name","query","routeTitleGen","Fragment","itemListPageLinks","pageLinks","AsyncView"],"mappings":"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","file":"OrganizationRepositories.js","sourcesContent":["function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true\n): string {\n  const tmpl = `${routeName} - ${orgSlug}`;\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import styled from 'react-emotion';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Link from 'app/components/links/link';\nimport InlineSvg from 'app/components/inlineSvg';\nimport space from 'app/styles/space';\n\nexport default class AlertLink extends React.Component {\n  static propTypes = {\n    to: PropTypes.string,\n    href: PropTypes.string,\n    icon: PropTypes.string,\n    priority: PropTypes.oneOf(['info', 'warning', 'success', 'error', 'muted']),\n    size: PropTypes.oneOf(['small', 'normal']),\n  };\n\n  static defaultProps = {\n    priority: 'warning',\n  };\n\n  render() {\n    const {icon, children, size} = this.props;\n\n    return (\n      <StyledLink {...this.props}>\n        {icon && <StyledInlineSvg src={icon} size=\"1.5em\" spacingSize={size} />}\n        <AlertLinkText>{children}</AlertLinkText>\n        <InlineSvg src=\"icon-chevron-right\" size=\"1em\" />\n      </StyledLink>\n    );\n  }\n}\n\nconst StyledLink = styled(Link)`\n  display: flex;\n  align-items: center;\n  background-color: ${p => p.theme.alert[p.priority].backgroundLight};\n  color: ${p => p.theme.gray4};\n  border: 1px dashed ${p => p.theme.alert[p.priority].border};\n  padding: ${p => (p.size === 'small' ? `${space(1)} ${space(1.5)}` : space(2))};\n  margin-bottom: ${space(3)};\n  border-radius: 0.25em;\n  transition: 0.2s border-color;\n\n  &:hover {\n    border-color: ${p => p.theme.blueLight};\n  }\n\n  &.focus-visible {\n    outline: none;\n    box-shadow: ${p => p.theme.alert[p.priority].border}7f 0 0 0 2px;\n  }\n`;\n\nconst AlertLinkText = styled('div')`\n  flex-grow: 1;\n`;\n\nconst StyledInlineSvg = styled(InlineSvg)`\n  margin-right: ${p => (p.spacingSize === 'small' ? space(1) : space(1.5))};\n`;\n","import {Box, Flex} from 'grid-emotion';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {t, tct} from 'app/locale';\nimport AlertLink from 'app/components/alertLink';\nimport Button from 'app/components/button';\nimport HeroIcon from 'app/components/heroIcon';\nimport RepositoryRow from 'app/components/repositoryRow';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nexport default class OrganizationRepositories extends React.Component {\n  static propTypes = {\n    itemList: PropTypes.array,\n    api: PropTypes.object,\n    onRepositoryChange: PropTypes.func,\n  };\n\n  render() {\n    const {params, itemList, api, onRepositoryChange} = this.props;\n    const {orgId} = params;\n    const hasItemList = itemList && itemList.length > 0;\n\n    return (\n      <div>\n        <SettingsPageHeader title={t('Repositories')} />\n        <AlertLink to={`/settings/${orgId}/integrations/`}>\n          {t(\n            'Want to add a repository to start tracking commits? Install or configure your version control integration here.'\n          )}\n        </AlertLink>\n        {!hasItemList && (\n          <div className=\"m-b-2\">\n            <TextBlock>\n              {t(\n                'Connecting a repository allows Sentry to capture commit data via webhooks. ' +\n                  'This enables features like suggested assignees and resolving issues via commit message. ' +\n                  \"Once you've connected a repository, you can associate commits with releases via the API.\"\n              )}\n              &nbsp;\n              {tct('See our [link:documentation] for more details.', {\n                link: <a href=\"https://docs.sentry.io/learn/releases/\" />,\n              })}\n            </TextBlock>\n          </div>\n        )}\n\n        {hasItemList ? (\n          <Panel>\n            <PanelHeader disablePadding>\n              <Flex>\n                <Box px={2}>{t('Added Repositories')}</Box>\n              </Flex>\n            </PanelHeader>\n            <PanelBody>\n              <Box>\n                {itemList.map(repo => {\n                  return (\n                    <RepositoryRow\n                      key={repo.id}\n                      repository={repo}\n                      api={api}\n                      showProvider\n                      orgId={orgId}\n                      onRepositoryChange={onRepositoryChange}\n                    />\n                  );\n                })}\n              </Box>\n            </PanelBody>\n          </Panel>\n        ) : (\n          <Panel className=\"align-center p-x-2 p-y-1\">\n            <Box mb={1}>\n              <HeroIcon src=\"icon-commit\" />\n            </Box>\n            <h3>{t('Sentry is better with commit data')}</h3>\n            <TextBlock>\n              {t(\n                'Adding one or more repositories will enable enhanced releases and the ability to resolve Sentry Issues via git message.'\n              )}\n            </TextBlock>\n            <Box mb={1}>\n              <Button href=\"https://docs.sentry.io/learn/releases/\">\n                {t('Learn more')}\n              </Button>\n            </Box>\n          </Panel>\n        )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport {sortArray} from 'app/utils';\nimport AsyncView from 'app/views/asyncView';\nimport Pagination from 'app/components/pagination';\nimport {t} from 'app/locale';\nimport routeTitleGen from 'app/utils/routeTitle';\n\nimport OrganizationRepositories from './organizationRepositories';\n\nexport default class OrganizationRepositoriesContainer extends AsyncView {\n  getEndpoints() {\n    const {orgId} = this.props.params;\n    return [\n      ['itemList', `/organizations/${orgId}/repos/`, {query: {status: ''}}],\n      ['repoConfig', `/organizations/${orgId}/config/repos/`],\n    ];\n  }\n\n  // Callback used by child component to signal state change\n  onRepositoryChange = data => {\n    const itemList = this.state.itemList;\n    itemList.forEach(item => {\n      if (item.id === data.id) {\n        item.status = data.status;\n      }\n    });\n    this.setState({itemList});\n  };\n\n  onAddRepo = repo => {\n    const itemList = this.state.itemList;\n    itemList.push(repo);\n    this.setState({\n      itemList: sortArray(itemList, item => item.name),\n    });\n  };\n\n  getTitle() {\n    const {orgId} = this.props.params;\n    return routeTitleGen(t('Repositories'), orgId, false);\n  }\n\n  renderBody() {\n    return (\n      <React.Fragment>\n        <OrganizationRepositories\n          {...this.props}\n          {...this.state}\n          api={this.api}\n          onAddRepo={this.onAddRepo}\n          onRepositoryChange={this.onRepositoryChange}\n        />\n        {this.state.itemListPageLinks && (\n          <Pagination pageLinks={this.state.itemListPageLinks} {...this.props} />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n"],"sourceRoot":""}