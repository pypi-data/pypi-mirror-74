
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON COMMA COMMENT DSTRING EQUAL FROM IMPORT INT LARRAY_BRACE LBRACE NAME NEWLINE OR RARRAY_BRACE RBRACE STRING\n    main : break imports grammar\n    \n    main : imports grammar\n    \n    main : break grammar\n    \n    main : grammar\n    \n    main : imports\n    \n    imports : import_statement imports\n            | import_statement\n    \n    grammar : NAME EQUAL json break grammar\n            | NAME EQUAL json break\n    \n    grammar : production grammar\n            | production\n    \n    import_statement : IMPORT import_list FROM STRING break\n    \n    import_list : NAME COMMA break import_list\n               | NAME COMMA import_list\n               | NAME\n    \n    production : NAME COLON production_tokens\n    \n    production_tokens : token_list break OR production_tokens\n                      | token_list OR production_tokens\n                      | token_list break\n    \n    token_list : NAME token_list\n    \n    token_list : NAME json\n    \n    token_list : NAME\n    \n    json : LBRACE fields RBRACE\n         | LBRACE break fields RBRACE\n    \n    fields : key COLON value COMMA break fields\n           | key COLON value COMMA fields\n           | key COLON value break\n           | key COLON value\n    \n    key : STRING\n        | DSTRING\n        | NAME\n    \n    array : LARRAY_BRACE value_list RARRAY_BRACE\n    \n    value_list : value COMMA value_list\n               | value\n    \n    value : STRING\n          | DSTRING\n          | INT\n          | array\n          | json\n    \n    break : COMMENT break\n          | NEWLINE break\n          | COMMENT\n          | NEWLINE\n    '
    
_lr_action_items = {'COMMENT':([0,5,6,23,24,25,27,29,37,38,41,45,52,53,54,55,56,57,58,61,67,],[5,5,5,5,5,-22,5,5,-20,-21,5,-23,-24,5,-35,-36,-37,-38,-39,5,-32,]),'NEWLINE':([0,5,6,23,24,25,27,29,37,38,41,45,52,53,54,55,56,57,58,61,67,],[6,6,6,6,6,-22,6,6,-20,-21,6,-23,-24,6,-35,-36,-37,-38,-39,6,-32,]),'NAME':([0,2,3,5,6,7,9,10,11,14,15,16,18,24,25,26,29,30,32,39,40,42,48,49,50,60,61,65,],[8,8,8,-42,-43,-7,8,21,8,-40,-41,-6,25,36,25,-16,21,8,36,-19,25,21,25,-18,-12,-17,36,36,]),'IMPORT':([0,2,5,6,7,14,15,50,],[10,10,-42,-43,10,-40,-41,-12,]),'$end':([1,3,4,5,6,7,9,12,13,14,15,16,19,22,26,30,39,44,49,50,60,],[0,-5,-4,-42,-43,-7,-11,-3,-2,-40,-41,-6,-10,-1,-16,-9,-19,-8,-18,-12,-17,]),'STRING':([5,6,14,15,24,28,32,47,59,61,65,68,],[-42,-43,-40,-41,34,41,34,54,54,34,34,54,]),'DSTRING':([5,6,14,15,24,32,47,59,61,65,68,],[-42,-43,-40,-41,35,35,55,55,35,35,55,]),'OR':([5,6,14,15,25,27,37,38,39,45,52,],[-42,-43,-40,-41,-22,40,-20,-21,48,-23,-24,]),'RBRACE':([5,6,14,15,31,45,46,52,53,54,55,56,57,58,62,66,67,69,],[-42,-43,-40,-41,45,-23,52,-24,-28,-35,-36,-37,-38,-39,-27,-26,-32,-25,]),'EQUAL':([8,],[17,]),'COLON':([8,33,34,35,36,],[18,47,-29,-30,-31,]),'LBRACE':([17,25,47,59,68,],[24,24,24,24,24,]),'FROM':([20,21,43,51,],[28,-15,-14,-13,]),'COMMA':([21,45,52,53,54,55,56,57,58,64,67,],[29,-23,-24,61,-35,-36,-37,-38,-39,68,-32,]),'RARRAY_BRACE':([45,52,54,55,56,57,58,63,64,67,70,],[-23,-24,-35,-36,-37,-38,-39,67,-34,-32,-33,]),'INT':([47,59,68,],[56,56,56,]),'LARRAY_BRACE':([47,59,68,],[59,59,59,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'main':([0,],[1,]),'break':([0,5,6,23,24,27,29,41,53,61,],[2,14,15,30,32,39,42,50,62,65,]),'imports':([0,2,7,],[3,11,16,]),'grammar':([0,2,3,9,11,30,],[4,12,13,19,22,44,]),'import_statement':([0,2,7,],[7,7,7,]),'production':([0,2,3,9,11,30,],[9,9,9,9,9,9,]),'import_list':([10,29,42,],[20,43,51,]),'json':([17,25,47,59,68,],[23,38,58,58,58,]),'production_tokens':([18,40,48,],[26,49,60,]),'token_list':([18,25,40,48,],[27,37,27,27,]),'fields':([24,32,61,65,],[31,46,66,69,]),'key':([24,32,61,65,],[33,33,33,33,]),'value':([47,59,68,],[53,64,64,]),'array':([47,59,68,],[57,57,57,]),'value_list':([59,68,],[63,70,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main","S'",1,None,None,None),
  ('main -> break imports grammar','main',3,'p_main_01','parser.py',97),
  ('main -> imports grammar','main',2,'p_main_02','parser.py',105),
  ('main -> break grammar','main',2,'p_main_03','parser.py',113),
  ('main -> grammar','main',1,'p_main_04','parser.py',120),
  ('main -> imports','main',1,'p_main_05','parser.py',127),
  ('imports -> import_statement imports','imports',2,'p_grammar_import','parser.py',134),
  ('imports -> import_statement','imports',1,'p_grammar_import','parser.py',135),
  ('grammar -> NAME EQUAL json break grammar','grammar',5,'p_declaration','parser.py',146),
  ('grammar -> NAME EQUAL json break','grammar',4,'p_declaration','parser.py',147),
  ('grammar -> production grammar','grammar',2,'p_grammar_productions','parser.py',165),
  ('grammar -> production','grammar',1,'p_grammar_productions','parser.py',166),
  ('import_statement -> IMPORT import_list FROM STRING break','import_statement',5,'p_import_statement','parser.py',184),
  ('import_list -> NAME COMMA break import_list','import_list',4,'p_import_list','parser.py',194),
  ('import_list -> NAME COMMA import_list','import_list',3,'p_import_list','parser.py',195),
  ('import_list -> NAME','import_list',1,'p_import_list','parser.py',196),
  ('production -> NAME COLON production_tokens','production',3,'p_production','parser.py',209),
  ('production_tokens -> token_list break OR production_tokens','production_tokens',4,'p_production_tokens_with_newline','parser.py',216),
  ('production_tokens -> token_list OR production_tokens','production_tokens',3,'p_production_tokens_with_newline','parser.py',217),
  ('production_tokens -> token_list break','production_tokens',2,'p_production_tokens_with_newline','parser.py',218),
  ('token_list -> NAME token_list','token_list',2,'p_token_list','parser.py',239),
  ('token_list -> NAME json','token_list',2,'p_token_list_tail_with_action','parser.py',246),
  ('token_list -> NAME','token_list',1,'p_token_list_tail_no_action','parser.py',253),
  ('json -> LBRACE fields RBRACE','json',3,'p_json','parser.py',260),
  ('json -> LBRACE break fields RBRACE','json',4,'p_json','parser.py',261),
  ('fields -> key COLON value COMMA break fields','fields',6,'p_fields','parser.py',268),
  ('fields -> key COLON value COMMA fields','fields',5,'p_fields','parser.py',269),
  ('fields -> key COLON value break','fields',4,'p_fields','parser.py',270),
  ('fields -> key COLON value','fields',3,'p_fields','parser.py',271),
  ('key -> STRING','key',1,'p_key','parser.py',285),
  ('key -> DSTRING','key',1,'p_key','parser.py',286),
  ('key -> NAME','key',1,'p_key','parser.py',287),
  ('array -> LARRAY_BRACE value_list RARRAY_BRACE','array',3,'p_array','parser.py',294),
  ('value_list -> value COMMA value_list','value_list',3,'p_value_list','parser.py',301),
  ('value_list -> value','value_list',1,'p_value_list','parser.py',302),
  ('value -> STRING','value',1,'p_value','parser.py',309),
  ('value -> DSTRING','value',1,'p_value','parser.py',310),
  ('value -> INT','value',1,'p_value','parser.py',311),
  ('value -> array','value',1,'p_value','parser.py',312),
  ('value -> json','value',1,'p_value','parser.py',313),
  ('break -> COMMENT break','break',2,'p_line_break','parser.py',320),
  ('break -> NEWLINE break','break',2,'p_line_break','parser.py',321),
  ('break -> COMMENT','break',1,'p_line_break','parser.py',322),
  ('break -> NEWLINE','break',1,'p_line_break','parser.py',323),
]
