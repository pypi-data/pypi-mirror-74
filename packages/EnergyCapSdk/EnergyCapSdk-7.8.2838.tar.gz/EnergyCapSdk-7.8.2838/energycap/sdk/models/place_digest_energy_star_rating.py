# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class PlaceDigestEnergyStarRating(Model):
    """PlaceDigestEnergyStarRating.

    :param energy_star_rating_id: energy star history identifier
    :type energy_star_rating_id: int
    :param energy_star_submit_id: energy star submit history identifier
    :type energy_star_submit_id: int
    :param rating_date: rating date
    :type rating_date: datetime
    :param rating_month: month of rating
    :type rating_month: int
    :param rating_year: year of rating
    :type rating_year: int
    :param rating: rating value
    :type rating: int
    :param note: note about the rating
    :type note: str
    :param kbtu_total_wn: kbtu total weather
    :type kbtu_total_wn: float
    :param kbtu_total_nwn: kbtu total non-weather
    :type kbtu_total_nwn: float
    :param kbtu_sfwn: kbtu square foot weather
    :type kbtu_sfwn: float
    :param kbtu_sfnwn: kbtu square foot non weather
    :type kbtu_sfnwn: float
    :param source_kbtu_total_wn: source kbtu total weather
    :type source_kbtu_total_wn: float
    :param source_kbtu_total_nwn: source kbtu total non-weather
    :type source_kbtu_total_nwn: float
    :param source_kbtu_sfwn: source kbtu square foot weather
    :type source_kbtu_sfwn: float
    :param source_kbtu_sfnwn: source kbtu square foot non-weather
    :type source_kbtu_sfnwn: float
    :param kbtu_sf_score_of50: kbtu square foot score of 50
    :type kbtu_sf_score_of50: float
    :param kbtu_sf_score_of75: kbtu square foot score of 75
    :type kbtu_sf_score_of75: float
    :param lbs_co2_emissions: CO2 emissions in pounds
    :type lbs_co2_emissions: float
    :param direct_ghg_emissions: direct GHG emissions
    :type direct_ghg_emissions: float
    :param indirect_ghg_emissions: indirect GHG emissions
    :type indirect_ghg_emissions: float
    :param total_ghg_emissions: total GHG emissions
    :type total_ghg_emissions: float
    :param apply_for_label_eligible: if place is eligible for label
    :type apply_for_label_eligible: bool
    :param rateable: if placetype of place is rateable
    :type rateable: bool
    """

    _attribute_map = {
        'energy_star_rating_id': {'key': 'energyStarRatingId', 'type': 'int'},
        'energy_star_submit_id': {'key': 'energyStarSubmitId', 'type': 'int'},
        'rating_date': {'key': 'ratingDate', 'type': 'iso-8601'},
        'rating_month': {'key': 'ratingMonth', 'type': 'int'},
        'rating_year': {'key': 'ratingYear', 'type': 'int'},
        'rating': {'key': 'rating', 'type': 'int'},
        'note': {'key': 'note', 'type': 'str'},
        'kbtu_total_wn': {'key': 'kbtuTotalWN', 'type': 'float'},
        'kbtu_total_nwn': {'key': 'kbtuTotalNWN', 'type': 'float'},
        'kbtu_sfwn': {'key': 'kbtuSFWN', 'type': 'float'},
        'kbtu_sfnwn': {'key': 'kbtuSFNWN', 'type': 'float'},
        'source_kbtu_total_wn': {'key': 'sourceKbtuTotalWN', 'type': 'float'},
        'source_kbtu_total_nwn': {'key': 'sourceKbtuTotalNWN', 'type': 'float'},
        'source_kbtu_sfwn': {'key': 'sourceKbtuSFWN', 'type': 'float'},
        'source_kbtu_sfnwn': {'key': 'sourceKbtuSFNWN', 'type': 'float'},
        'kbtu_sf_score_of50': {'key': 'kbtuSFScoreOf50', 'type': 'float'},
        'kbtu_sf_score_of75': {'key': 'kbtuSFScoreOf75', 'type': 'float'},
        'lbs_co2_emissions': {'key': 'lbsCO2Emissions', 'type': 'float'},
        'direct_ghg_emissions': {'key': 'directGhgEmissions', 'type': 'float'},
        'indirect_ghg_emissions': {'key': 'indirectGhgEmissions', 'type': 'float'},
        'total_ghg_emissions': {'key': 'totalGhgEmissions', 'type': 'float'},
        'apply_for_label_eligible': {'key': 'applyForLabelEligible', 'type': 'bool'},
        'rateable': {'key': 'rateable', 'type': 'bool'},
    }

    def __init__(self, energy_star_rating_id=None, energy_star_submit_id=None, rating_date=None, rating_month=None, rating_year=None, rating=None, note=None, kbtu_total_wn=None, kbtu_total_nwn=None, kbtu_sfwn=None, kbtu_sfnwn=None, source_kbtu_total_wn=None, source_kbtu_total_nwn=None, source_kbtu_sfwn=None, source_kbtu_sfnwn=None, kbtu_sf_score_of50=None, kbtu_sf_score_of75=None, lbs_co2_emissions=None, direct_ghg_emissions=None, indirect_ghg_emissions=None, total_ghg_emissions=None, apply_for_label_eligible=None, rateable=None):
        super(PlaceDigestEnergyStarRating, self).__init__()
        self.energy_star_rating_id = energy_star_rating_id
        self.energy_star_submit_id = energy_star_submit_id
        self.rating_date = rating_date
        self.rating_month = rating_month
        self.rating_year = rating_year
        self.rating = rating
        self.note = note
        self.kbtu_total_wn = kbtu_total_wn
        self.kbtu_total_nwn = kbtu_total_nwn
        self.kbtu_sfwn = kbtu_sfwn
        self.kbtu_sfnwn = kbtu_sfnwn
        self.source_kbtu_total_wn = source_kbtu_total_wn
        self.source_kbtu_total_nwn = source_kbtu_total_nwn
        self.source_kbtu_sfwn = source_kbtu_sfwn
        self.source_kbtu_sfnwn = source_kbtu_sfnwn
        self.kbtu_sf_score_of50 = kbtu_sf_score_of50
        self.kbtu_sf_score_of75 = kbtu_sf_score_of75
        self.lbs_co2_emissions = lbs_co2_emissions
        self.direct_ghg_emissions = direct_ghg_emissions
        self.indirect_ghg_emissions = indirect_ghg_emissions
        self.total_ghg_emissions = total_ghg_emissions
        self.apply_for_label_eligible = apply_for_label_eligible
        self.rateable = rateable
