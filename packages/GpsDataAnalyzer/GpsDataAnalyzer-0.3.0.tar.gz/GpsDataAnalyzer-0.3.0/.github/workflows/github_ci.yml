name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
    tags:
      - '*'
  pull_request:
    branches: [ master ]

jobs:
  # This workflow runs the tests
  tests:

    # Setup test matrix
    strategy:
      matrix:
        python-version: [3.6]

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:

    # Setup Conda
    - uses: goanpeca/setup-miniconda@v1
      with:
        channels: conda-forge
        python-version: ${{ matrix.python-version }}

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Setup Python
    - uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    # Cache dependencies
    - name: Cache pip
      uses: actions/cache@v1
      with:
        path: ~/.cache/pip # This path is specific to Ubuntu
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements-test.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          ${{ runner.os }}-

    # Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tox

    # Runs the test
    - name: Run the tests
      run: tox -e py36

    # Runs style
    - name: Check style
      run: tox -e style

    # Runs coverage
    - name: Check coverage
      run: tox -e coverage

    # Send data to Codecov
    - name: Codecov
      run: |
        pip install codecov
        codecov -t ${{ secrets.codecov_token }}

    # Store coverage and flake8 reports
    - name: Upload reports
      uses: actions/upload-artifact@v1
      with:
        name: reports
        path: reports

    # Build distribution and deploy to Pypi
    - name: Build and deploy package
      if: startsWith(github.event.ref, 'refs/tags')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.pypi_token }}
      run: |
        pip install setuptools wheel twine
        python setup.py sdist bdist_wheel
        twine upload dist/*
