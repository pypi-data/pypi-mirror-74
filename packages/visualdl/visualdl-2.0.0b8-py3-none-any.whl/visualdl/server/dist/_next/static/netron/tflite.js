var tflite=tflite||{},base=base||require("./base"),flatbuffers=flatbuffers||require("flatbuffers").flatbuffers,long=long||{Long:require("long")};tflite.ModelFactory=class{match(t){const e=t.identifier.split(".").pop().toLowerCase();if(-1!==["tflite","lite","tfl","bin","pb","model","tmfile","h5"].indexOf(e)){const e=t.buffer,i="TFL3";if(e&&e.length>8&&e.subarray(4,8).every((t,e)=>t===i.charCodeAt(e)))return!0}if("json"===e){const e=t.text;if(-1!==e.indexOf('"subgraphs"',0)&&-1!==e.indexOf('"operator_codes"',0))return!0}return!1}open(t,e){return e.require("./tflite-schema").then(i=>(tflite.schema=i.tflite_schema,tflite.metadata_schema=i.tflite_metadata_schema,tflite.Metadata.open(e).then(e=>{const i=t.identifier;try{switch(i.split(".").pop().toLowerCase()){default:{const i=new flatbuffers.ByteBuffer(t.buffer);if(!tflite.schema.Model.bufferHasIdentifier(i))throw new tflite.Error("File format is not tflite.Model.");const s=tflite.schema.Model.getRootAsModel(i);return new tflite.Model(e,null,s)}case"json":{const i=JSON.parse(t.text);return new tflite.Model(e,"json",i)}}}catch(t){const e=t&&t.message?t.message:t.toString();throw new tflite.Error(e.replace(/\.$/,"")+" in '"+i+"'.")}})))}},tflite.Model=class{constructor(t,e,i){switch(this._graphs=[],this._format="TensorFlow Lite",e){default:{this._format=this._format+" v"+i.version().toString(),this._description=i.description()||"";const s=[],n={};for(const t of Object.keys(tflite.schema.BuiltinOperator)){n[tflite.schema.BuiltinOperator[t]]=tflite.Utility.type(t)}for(let t=0;t<i.operatorCodesLength();t++){const e=i.operatorCodes(t),a=e.builtinCode(),r=e.version(),o=a===tflite.schema.BuiltinOperator.CUSTOM,u=o?e.customCode():n[a];if(!u)throw new tflite.Error("Invalid built-in code '"+a.toString()+"' at '"+t.toString()+"'.");s.push(o?{name:u,version:r,custom:!0}:{name:u,version:r})}let a=null;for(let t=0;t<i.metadataLength();t++){const e=i.metadata(t);switch(e.name()){case"min_runtime_version":{const t=i.buffers(e.buffer()).dataArray();this._runtime=t?(new TextDecoder).decode(t):void 0;break}case"TFLITE_METADATA":{const t=new flatbuffers.ByteBuffer(i.buffers(e.buffer()).dataArray()||[]);tflite.metadata_schema.ModelMetadata.bufferHasIdentifier(t)&&(a=tflite.metadata_schema.ModelMetadata.getRootAsModelMetadata(t),this._name=a.name()||"",this._version=a.version()||"",this._description=a.description()?[this.description,a.description()].join(" "):this._description,this._author=a.author()||"",this._license=a.license()||"");break}}}const r=i.subgraphsLength();for(let n=0;n<r;n++){const o=i.subgraphs(n),u=r>1?n.toString():"",l=a&&n<a.subgraphMetadataLength()?a.subgraphMetadata(n):null;this._graphs.push(new tflite.Graph(t,e,o,l,u,s,i))}break}case"json":{this._format=this._format+(i.version?" v"+i.version.toString():""),this._description=i.description||"";const s=[];if(i.operator_codes&&Array.isArray(i.operator_codes))for(let t=0;t<i.operator_codes.length;t++){const e=i.operator_codes[t],n=e.builtin_code,a=e.version||1,r="CUSTOM"===n,o=r?e.custom_code:tflite.Utility.type(n);if(!o)throw new tflite.Error("Invalid built-in code '"+n.toString()+"' at '"+t.toString()+"'.");s.push(r?{name:o,version:a,custom:!0}:{name:o,version:a})}if(i.subgraphs&&Array.isArray(i.subgraphs)){const n=i.subgraphs.length;for(let a=0;a<n;a++){const r=i.subgraphs[a],o=n>1?a.toString():"";this._graphs.push(new tflite.Graph(t,e,r,null,o,s,i))}}break}}}get format(){return this._format}get runtime(){return this._runtime}get name(){return this._name}get version(){return this._version}get description(){return this._description}get author(){return this._author}get license(){return this._license}get graphs(){return this._graphs}},tflite.Graph=class{constructor(t,e,i,s,n,a,r){switch(this._nodes=[],this._inputs=[],this._outputs=[],e){default:{this._name=i.name()||n;const o=[],u=[];for(let t=0;t<i.tensorsLength();t++){const s=i.tensors(t),n=r.buffers(s.buffer()),a=s.isVariable(),l=n.dataLength()>0||a?new tflite.Tensor(e,t,s,n,a):null;o.push(new tflite.Argument(e,t,s,l)),u.push(s.name())}for(let s=0;s<i.operatorsLength();s++){const n=i.operators(s),r=n.opcodeIndex(),u=r<a.length?a[r]:{name:"("+r.toString()+")"};this._nodes.push(new tflite.Node(t,e,n,u,s.toString(),o))}const l=(t,e)=>{if(e){const i=e.description();i&&(t.description=i);const s=e.content();if(t.type&&s){let e=null;switch(s.contentPropertiesType()){case 1:e="Feature";break;case 2:e="Image";switch(s.contentProperties(Reflect.construct(tflite.metadata_schema.ImageProperties,[])).colorSpace()){case 1:e+="(RGB)";break;case 2:e+="(Grayscale)"}break;case 3:e="BoundingBox"}e&&(t.type.denotation=e)}}};for(let t=0;t<i.inputsLength();t++){const e=i.inputs(t),n=o[e];s&&t<s.inputTensorMetadataLength()&&l(n,s.inputTensorMetadata(t)),this._inputs.push(new tflite.Parameter(u[e],!0,[n]))}for(let t=0;t<i.outputsLength();t++){const e=i.outputs(t),n=o[e];s&&t<s.outputTensorMetadataLength()&&l(n,s.outputTensorMetadata(t)),this._outputs.push(new tflite.Parameter(u[e],!0,[n]))}break}case"json":{this._name=i.name||"";const s=[],n=[];if(i.tensors&&Array.isArray(i.tensors))for(let t=0;t<i.tensors.length;t++){const a=i.tensors[t],o=r.buffers[a.buffer],u=a.isVariable,l=o.data&&o.data.length>0||u?new tflite.Tensor(e,t,a,o,u):null;s.push(new tflite.Argument(e,t,a,l)),n.push(a.name)}if(i.operators&&Array.isArray(i.operators))for(let n=0;n<i.operators.length;n++){const r=i.operators[n],o=r.opcode_index,u=o<a.length?a[o]:{name:"("+o.toString()+")"};this._nodes.push(new tflite.Node(t,e,r,u,n.toString(),s))}if(i.inputs&&Array.isArray(i.inputs))for(const t of i.inputs)this._inputs.push(new tflite.Parameter(n[t],!0,[s[t]]));if(i.outputs&&Array.isArray(i.outputs))for(const t of i.outputs)this._outputs.push(new tflite.Parameter(n[t],!0,[s[t]]));break}}}get name(){return this._name}get groups(){return!1}get inputs(){return this._inputs}get outputs(){return this._outputs}get nodes(){return this._nodes}},tflite.Node=class{constructor(t,e,i,s,n,a){if(this._metadata=t,this._location=n,this._type=s,this._inputs=[],this._outputs=[],this._attributes=[],i){let n=[],r=[];switch(e){default:n=Array.from(i.inputsArray()||[]),r=Array.from(i.outputsArray()||[]);break;case"json":n=i.inputs&&Array.isArray(i.inputs)?i.inputs:[],r=i.outputs&&Array.isArray(i.outputs)?i.outputs:[]}const o=this._metadata.type(this.type);let u=0;for(;u<n.length;){let t=1,e=null,i=!0;const s=[];if(o&&o.inputs&&u<o.inputs.length){const s=o.inputs[u];e=s.name,"variadic"==s.option&&(t=n.length-u),Object.prototype.hasOwnProperty.call(s,"visible")&&!s.visible&&(i=!1)}const r=n.slice(u,u+t);for(let t=0;t<r.length;t++)-1!=r[t]&&s.push(a[r[t]]);u+=t,e=e||u.toString(),this._inputs.push(new tflite.Parameter(e,i,s))}for(let t=0;t<r.length;t++){const e=a[r[t]];let i=t.toString();if(o&&o.outputs&&t<o.outputs.length){const e=o.outputs[t];!e||e.option&&"variadic"==e.opcodeIndex||!e.name||(i=e.name)}this._outputs.push(new tflite.Parameter(i,!0,[e]))}switch(e){default:{if(s.custom&&i.customOptionsLength()>0){const s=Array.from(i.customOptionsArray()||[]),n=t.attribute(this.type,"custom");this._attributes.push(new tflite.Attribute(n,e,"custom",s))}let n=this.type+"Options";switch(this.type){case"AveragePool2D":case"MaxPool2D":n="Pool2DOptions";break;case"Mean":case"ReduceMax":case"ReduceMin":case"Sum":n="ReducerOptions";break;case"Minimum":case"Maximum":n="MaximumMinimumOptions"}const a=tflite.schema[n]||null;if("function"==typeof a){const s=i.builtinOptions(Reflect.construct(a,[]));if(s){const i=new Set(Object.keys(Object.getPrototypeOf(s)).filter(t=>"__init"!==t)),n=new Set;for(const t of new Set(i))i.has(t+"Array")&&i.has(t+"Length")&&(i.delete(t+"Array"),i.delete(t+"Length"),n.add(t));for(const a of i)if(s[a]&&"function"==typeof s[a]){const i=n.has(a)?Array.from(s[a+"Array"]()||[]):s[a]();if("fusedActivationFunction"===a&&0!==i){const s={1:"Relu",2:"ReluN1To1",3:"Relu6",4:"Tanh",5:"SignBit"};if(!s[i])throw new tflite.Error("Unknown activation funtion index '"+JSON.stringify(i)+"'.");const n=s[i];this._chain=[new tflite.Node(t,e,null,{name:n},null,[])]}let r="";const o=a.toLowerCase();for(let t=0;t<a.length;t++)r+=a[t]==o[t]?a[t]:"_"+o[t];const u=t.attribute(this.type,r);this._attributes.push(new tflite.Attribute(u,e,r,i))}}}break}case"json":if(i.builtin_options&&!Array.isArray(i.builtin_options)){if(s.custom&&Array.isArray(s.custom)){const i=t.attribute(this.type,"custom");this._attributes.push(new tflite.Attribute(i,e,"custom",s.custom))}for(const s of Object.keys(i.builtin_options)){const n=i.builtin_options[s];if("fused_activation_function"===s&&"NONE"!==n){const i={RELU:"Relu",RELU_N1_TO_1:"ReluN1To1",RELU6:"Relu6",TANH:"Tanh",SIGN_BIT:"SignBit"};if(!i[n])throw new tflite.Error("Unknown activation funtion index '"+JSON.stringify(n)+"'.");const s=i[n];this._chain=[new tflite.Node(t,e,null,{name:s},null,[])]}const a=t.attribute(this.type,s);this._attributes.push(new tflite.Attribute(a,e,s,n))}}}}}get type(){return this._type.name}get name(){return""}get location(){return this._location}get domain(){return null}get metadata(){return this._type.custom?{name:this.type,category:"custom"}:this._metadata.type(this.type)}get group(){return null}get inputs(){return this._inputs}get outputs(){return this._outputs}get chain(){return this._chain}get attributes(){return this._attributes}},tflite.Attribute=class{constructor(t,e,i,s){if(this._type=null,this._name=i,this._value=s,"fused_activation_function"==this._name&&(this._visible=!1),t){if(t.type&&(this._type=t.type),this._type)switch(this._type){case"shape":this._value=new tflite.TensorShape(s);break;case"TensorType":this._value=tflite.Utility.dataType(e,this._value);break;default:this._value=tflite.Utility.enum(this._type,this._value)}Object.prototype.hasOwnProperty.call(t,"visible")&&!t.visible?this._visible=!1:Object.prototype.hasOwnProperty.call(t,"default")&&("function"==typeof(s=this._value)&&(s=s()),s==t.default&&(this._visible=!1))}}get name(){return this._name}get type(){return this._type}get value(){return this._value}get visible(){return 0!=this._visible}},tflite.Parameter=class{constructor(t,e,i){this._name=t,this._visible=e,this._arguments=i}get name(){return this._name}get visible(){return this._visible}get arguments(){return this._arguments}},tflite.Argument=class{constructor(t,e,i,s){switch(this._location=e.toString(),this._type=new tflite.TensorType(t,i),this._initializer=s,t){default:{this._name=i.name();const t=i.quantization();if(t){let e="q";const i=1==t.scaleLength()?t.scale(0):0,s=1==t.zeroPointLength()?t.zeroPoint(0).toFloat64():0;0==i&&0==s||(e=i.toString()+" * "+(0==s?"q":"(q - "+s.toString()+")")),1==t.minLength()&&(e=t.min(0).toString()+" ≤ "+e),1==t.maxLength()&&(e=e+" ≤ "+t.max(0).toString()),"q"!=e&&(this._quantization=e)}break}case"json":this._name=i.name||""}}get name(){return this._name}get location(){return this._location}get type(){return this._type}get quantization(){return this._quantization}set description(t){this._description=t}get description(){return this._description}get initializer(){return this._initializer}},tflite.Tensor=class{constructor(t,e,i,s,n){switch(this._location=e.toString(),this._type=new tflite.TensorType(t,i),this._is_variable=n,t){default:this._name=i.name(),this._data=s.dataLength()>0?s.dataArray()||[]:null;break;case"json":this._name=i.name||"",this._data=s.data&&s.data.length>0?new Uint8Array(s.data):null}}get kind(){return this._is_variable?"Variable":""}get name(){return this._name}get location(){return this._location}get type(){return this._type}get state(){return this._context().state}get value(){const t=this._context();return t.state?null:(t.limit=Number.MAX_SAFE_INTEGER,this._decode(t,0))}toString(){const t=this._context();if(t.state)return"";t.limit=1e4;const e=this._decode(t,0);return JSON.stringify(e,null,4)}_context(){const t={state:null,index:0,count:0};if(null==this._data)return t.state="Tensor data is empty.",t;if(t.dataType=this._type.dataType,t.shape=this._type.shape.dimensions,t.data=new DataView(this._data.buffer,this._data.byteOffset,this._data.byteLength),"string"==this._type.dataType){let e=0;const i=t.data.getInt32(0,!0);e+=4;const s=[];for(let n=0;n<i;n++)s.push(t.data.getInt32(e,!0)),e+=4;s.push(this._data.length);const n=[],a=new TextDecoder("utf-8");for(let t=0;t<i;t++){const e=this._data.subarray(s[t],s[t+1]);n.push(a.decode(e))}t.data=n}return t}_decode(t,e){const i=0==t.shape.length?[1]:t.shape,s=i[e],n=[];if(e==i.length-1)for(let e=0;e<s;e++){if(t.count>t.limit)return n.push("..."),n;switch(t.dataType){case"uint8":n.push(t.data.getUint8(t.index)),t.index+=1,t.count++;break;case"int8":n.push(t.data.getInt8(t.index)),t.index+=1,t.count++;break;case"int16":n.push(t.data.getInt16(t.index)),t.index+=2,t.count++;break;case"int32":n.push(t.data.getInt32(t.index,!0)),t.index+=4,t.count++;break;case"int64":n.push(new long.Long(t.data.getUint32(t.index,!0),t.data.getUint32(t.index+4,!0),!1)),t.index+=8,t.count++;break;case"float16":n.push(t.data.getFloat16(t.index,!0)),t.index+=2,t.count++;break;case"float32":n.push(t.data.getFloat32(t.index,!0)),t.index+=4,t.count++;break;case"float64":n.push(t.data.getFloat64(t.index,!0)),t.index+=8,t.count++;break;case"string":n.push(t.data[t.index++]),t.count++}}else for(let i=0;i<s;i++){if(t.count>t.limit)return n.push("..."),n;n.push(this._decode(t,e+1))}return 0==t.shape.length?n[0]:n}},tflite.TensorType=class{constructor(t,e){switch(t){default:this._dataType=tflite.Utility.dataType(t,e.type()),this._shape=new tflite.TensorShape(Array.from(e.shapeArray()||[]));break;case"json":this._dataType=tflite.Utility.dataType(t,e.type),this._shape=new tflite.TensorShape(e.shape||[])}}get dataType(){return this._dataType}get shape(){return this._shape}set denotation(t){this._denotation=t}get denotation(){return this._denotation}toString(){return this.dataType+this._shape.toString()}},tflite.TensorShape=class{constructor(t){this._dimensions=t}get dimensions(){return this._dimensions}toString(){return this._dimensions&&0!=this._dimensions.length?"["+this._dimensions.map(t=>t.toString()).join(",")+"]":""}},tflite.Metadata=class{static open(t){return tflite.Metadata._metadata?Promise.resolve(tflite.Metadata._metadata):t.request(null,"tflite-metadata.json","utf-8").then(t=>(tflite.Metadata._metadata=new tflite.Metadata(t),tflite.Metadata._metadata)).catch(()=>(tflite.Metadata._metadata=new tflite.Metadata(null),tflite.Metadata._metadata))}constructor(t){if(this._map=new Map,t){const e=JSON.parse(t);if(e)for(const t of e)t.schema.name=t.name,this._map.set(t.name,t.schema)}}type(t){return this._map.has(t)?this._map.get(t):null}attribute(t,e){const i=this.type(t);if(i){let t=i.attributeMap;if(!t){if(t={},i.attributes)for(const e of i.attributes)t[e.name]=e;i.attributeMap=t}const s=t[e];if(s)return s}return null}},tflite.Utility=class{static dataType(t,e){switch(t){default:if(!tflite.Utility._tensorTypeMap){tflite.Utility._tensorTypeMap=new Map;for(const t of Object.keys(tflite.schema.TensorType))tflite.Utility._tensorTypeMap.set(tflite.schema.TensorType[t],t.toLowerCase());tflite.Utility._tensorTypeMap.set(6,"boolean")}return tflite.Utility._tensorTypeMap.has(e)?tflite.Utility._tensorTypeMap.get(e):"?";case"json":switch(e){case"BOOL":return"boolean";default:return e.toLowerCase()}}}static enum(t,e){if(t&&tflite.schema&&tflite.schema[t]){tflite.Utility._enumTypeMap||(tflite.Utility._enumTypeMap=new Map);let i=tflite.Utility._enumTypeMap.get(t);if(!i){i=new Map;const e=tflite.schema[t];if(e)for(const t of Object.keys(e))i.set(e[t],t);tflite.Utility._enumTypeMap.set(t,i)}if(i.has(e))return i.get(e)}return e}static type(t){const e=new Set(["2D","LSH","SVDF","RNN","L2","LSTM"]);return"BATCH_MATMUL"===t?"BatchMatMul":t.split("_").map(t=>t.length<1||e.has(t)?t:t[0]+t.substring(1).toLowerCase()).join("")}},tflite.Error=class extends Error{constructor(t){super(t),this.name="Error loading TensorFlow Lite model."}},"undefined"!=typeof module&&"object"==typeof module.exports&&(module.exports.ModelFactory=tflite.ModelFactory);