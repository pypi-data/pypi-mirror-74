{"version":3,"sources":["components/playback/playerSelectionMenu.js"],"names":["define","_exports","_appSettings","_events","_browser","_loading","_playbackManager","_appRouter","_globalize","_apphost","_interopRequireDefault","obj","__esModule","default","mirrorIfEnabled","info","playbackManager","enableDisplayMirroring","getPlayerInfo","isLocalPlayer","supportedCommands","indexOf","mirrorItem","player","item","displayContent","ItemName","Name","ItemId","Id","ItemType","Type","Context","context","getCurrentPlayer","emptyCallback","getIcon","target","deviceType","browser","tv","mobile","show","button","currentPlayerInfo","currentPlayerId","id","loading","getTargets","then","targets","menuItems","map","t","name","appName","selected","secondaryText","user","icon","require","actionsheet","hide","menuOptions","title","globalize","translate","items","positionTo","resolveOnClick","border","chrome","appHost","supports","enableHistory","filter","trySetActivePlayer","playerName","showActivePlayerMenu","playerInfo","dialogHelper","showActivePlayerMenuInternal","html","dialogOptions","removeOnClose","dlg","createDialog","classList","add","currentDeviceName","deviceName","checkedHtml","innerHTML","chkMirror","querySelector","addEventListener","onMirrorChange","destination","btnRemoteControl","close","open","appRouter","showNowPlaying","disconnectFromPlayer","getSupportedCommands","dialog","push","buttons","text","endSession","setDefaultPlayerActive","this","checked","Object","defineProperty","value","document","e","detail","state","ServerId","events","on","appSettings","_default"],"mappings":"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","file":"playerSelectionMenu.js","sourcesContent":["import appSettings from 'appSettings';\nimport events from 'events';\nimport browser from 'browser';\nimport loading from 'loading';\nimport playbackManager from 'playbackManager';\nimport appRouter from 'appRouter';\nimport globalize from 'globalize';\nimport appHost from 'apphost';\n\nfunction mirrorItem(info, player) {\n\n    var item = info.item;\n\n    playbackManager.displayContent({\n\n        ItemName: item.Name,\n        ItemId: item.Id,\n        ItemType: item.Type,\n        Context: info.context\n    }, player);\n}\n\nfunction mirrorIfEnabled(info) {\n\n    if (info && playbackManager.enableDisplayMirroring()) {\n\n        var getPlayerInfo = playbackManager.getPlayerInfo();\n\n        if (getPlayerInfo) {\n            if (!getPlayerInfo.isLocalPlayer && getPlayerInfo.supportedCommands.indexOf('DisplayContent') !== -1) {\n                mirrorItem(info, playbackManager.getCurrentPlayer());\n            }\n        }\n    }\n}\n\nfunction emptyCallback() {\n    // avoid console logs about uncaught promises\n}\n\nfunction getTargetSecondaryText(target) {\n\n    if (target.user) {\n\n        return target.user.Name;\n    }\n\n    return null;\n}\n\nfunction getIcon(target) {\n\n    var deviceType = target.deviceType;\n\n    if (!deviceType && target.isLocalPlayer) {\n        if (browser.tv) {\n            deviceType = 'tv';\n        } else if (browser.mobile) {\n            deviceType = 'smartphone';\n        } else {\n            deviceType = 'desktop';\n        }\n    }\n\n    if (!deviceType) {\n        deviceType = 'tv';\n    }\n\n    switch (deviceType) {\n\n        case 'smartphone':\n            return 'smartphone';\n        case 'tablet':\n            return 'tablet';\n        case 'tv':\n            return 'tv';\n        case 'cast':\n            return 'cast';\n        case 'desktop':\n            return 'computer';\n        default:\n            return 'tv';\n    }\n}\n\nexport function show(button) {\n\n    var currentPlayerInfo = playbackManager.getPlayerInfo();\n\n    if (currentPlayerInfo) {\n        if (!currentPlayerInfo.isLocalPlayer) {\n            showActivePlayerMenu(currentPlayerInfo);\n            return;\n        }\n    }\n\n    var currentPlayerId = currentPlayerInfo ? currentPlayerInfo.id : null;\n\n    loading.show();\n\n    playbackManager.getTargets().then(function (targets) {\n\n        var menuItems = targets.map(function (t) {\n\n            var name = t.name;\n\n            if (t.appName && t.appName !== t.name) {\n                name += ' - ' + t.appName;\n            }\n\n            return {\n                name: name,\n                id: t.id,\n                selected: currentPlayerId === t.id,\n                secondaryText: getTargetSecondaryText(t),\n                icon: getIcon(t)\n            };\n\n        });\n\n        require(['actionsheet'], function (actionsheet) {\n\n            loading.hide();\n\n            var menuOptions = {\n                title: globalize.translate('HeaderPlayOn'),\n                items: menuItems,\n                positionTo: button,\n\n                resolveOnClick: true,\n                border: true\n            };\n\n            // Unfortunately we can't allow the url to change or chromecast will throw a security error\n            // Might be able to solve this in the future by moving the dialogs to hashbangs\n            if (!(!browser.chrome || appHost.supports('castmenuhashchange'))) {\n                menuOptions.enableHistory = false;\n            }\n\n            actionsheet.show(menuOptions).then(function (id) {\n\n                var target = targets.filter(function (t) {\n                    return t.id === id;\n                })[0];\n\n                playbackManager.trySetActivePlayer(target.playerName, target);\n\n                mirrorIfEnabled();\n\n            }, emptyCallback);\n        });\n    });\n}\n\nfunction showActivePlayerMenu(playerInfo) {\n\n    require(['dialogHelper', 'dialog', 'emby-checkbox', 'emby-button'], function (dialogHelper) {\n        showActivePlayerMenuInternal(dialogHelper, playerInfo);\n    });\n}\n\nfunction disconnectFromPlayer(currentDeviceName) {\n\n    if (playbackManager.getSupportedCommands().indexOf('EndSession') !== -1) {\n\n        require(['dialog'], function (dialog) {\n\n            var menuItems = [];\n\n            menuItems.push({\n                name: globalize.translate('Yes'),\n                id: 'yes'\n            });\n            menuItems.push({\n                name: globalize.translate('No'),\n                id: 'no'\n            });\n\n            dialog({\n                buttons: menuItems,\n                //positionTo: positionTo,\n                text: globalize.translate('ConfirmEndPlayerSession', currentDeviceName)\n\n            }).then(function (id) {\n                switch (id) {\n\n                    case 'yes':\n                        playbackManager.getCurrentPlayer().endSession();\n                        playbackManager.setDefaultPlayerActive();\n                        break;\n                    case 'no':\n                        playbackManager.setDefaultPlayerActive();\n                        break;\n                    default:\n                        break;\n                }\n            });\n\n        });\n\n    } else {\n\n        playbackManager.setDefaultPlayerActive();\n    }\n}\n\nfunction showActivePlayerMenuInternal(dialogHelper, playerInfo) {\n\n    var html = '';\n\n    var dialogOptions = {\n        removeOnClose: true\n    };\n\n    dialogOptions.modal = false;\n    dialogOptions.entryAnimationDuration = 160;\n    dialogOptions.exitAnimationDuration = 160;\n    dialogOptions.autoFocus = false;\n\n    var dlg = dialogHelper.createDialog(dialogOptions);\n\n    dlg.classList.add('promptDialog');\n\n    var currentDeviceName = (playerInfo.deviceName || playerInfo.name);\n\n    html += '<div class=\"promptDialogContent\" style=\"padding:1.5em;\">';\n    html += '<h2 style=\"margin-top:.5em;\">';\n    html += currentDeviceName;\n    html += '</h2>';\n\n    html += '<div>';\n\n    if (playerInfo.supportedCommands.indexOf('DisplayContent') !== -1) {\n\n        html += '<label class=\"checkboxContainer\">';\n        var checkedHtml = playbackManager.enableDisplayMirroring() ? ' checked' : '';\n        html += '<input type=\"checkbox\" is=\"emby-checkbox\" class=\"chkMirror\"' + checkedHtml + '/>';\n        html += '<span>' + globalize.translate('EnableDisplayMirroring') + '</span>';\n        html += '</label>';\n    }\n\n    html += '</div>';\n\n    html += '<div style=\"margin-top:1em;display:flex;justify-content: flex-end;\">';\n\n    html += '<button is=\"emby-button\" type=\"button\" class=\"button-flat btnRemoteControl promptDialogButton\">' + globalize.translate('HeaderRemoteControl') + '</button>';\n    html += '<button is=\"emby-button\" type=\"button\" class=\"button-flat btnDisconnect promptDialogButton \">' + globalize.translate('Disconnect') + '</button>';\n    html += '<button is=\"emby-button\" type=\"button\" class=\"button-flat btnCancel promptDialogButton\">' + globalize.translate('ButtonCancel') + '</button>';\n    html += '</div>';\n\n    html += '</div>';\n    dlg.innerHTML = html;\n\n    var chkMirror = dlg.querySelector('.chkMirror');\n\n    if (chkMirror) {\n        chkMirror.addEventListener('change', onMirrorChange);\n    }\n\n    var destination = '';\n\n    var btnRemoteControl = dlg.querySelector('.btnRemoteControl');\n    if (btnRemoteControl) {\n        btnRemoteControl.addEventListener('click', function () {\n            destination = 'nowplaying';\n            dialogHelper.close(dlg);\n        });\n    }\n\n    dlg.querySelector('.btnDisconnect').addEventListener('click', function () {\n        destination = 'disconnectFromPlayer';\n        dialogHelper.close(dlg);\n    });\n\n    dlg.querySelector('.btnCancel').addEventListener('click', function () {\n        dialogHelper.close(dlg);\n    });\n\n    dialogHelper.open(dlg).then(function () {\n        if (destination === 'nowplaying') {\n            appRouter.showNowPlaying();\n        } else if (destination === 'disconnectFromPlayer') {\n            disconnectFromPlayer(currentDeviceName);\n        }\n    }, emptyCallback);\n}\n\nfunction onMirrorChange() {\n    playbackManager.enableDisplayMirroring(this.checked);\n}\n\ndocument.addEventListener('viewshow', function (e) {\n\n    var state = e.detail.state || {};\n    var item = state.item;\n\n    if (item && item.ServerId) {\n        mirrorIfEnabled({\n            item: item\n        });\n        return;\n    }\n});\n\nevents.on(appSettings, 'change', function (e, name) {\n    if (name === 'displaymirror') {\n        mirrorIfEnabled();\n    }\n});\n\nevents.on(playbackManager, 'pairing', function (e) {\n    loading.show();\n});\n\nevents.on(playbackManager, 'paired', function (e) {\n    loading.hide();\n});\n\nevents.on(playbackManager, 'pairerror', function (e) {\n    loading.hide();\n});\n\nexport default {\n    show: show\n};\n"]}