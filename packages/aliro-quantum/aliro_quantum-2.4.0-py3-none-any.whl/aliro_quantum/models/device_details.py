# coding: utf-8

"""
    Aliro Quantum App

    This is an api for the Aliro Quantum App  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: nick@aliroquantum.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from aliro_quantum.configuration import Configuration


class DeviceDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'device_id': 'str',
        'display_name': 'str',
        'gates': 'list[Gate]',
        'is_simulator': 'bool',
        'last_calibration': 'str',
        'max_shots': 'int',
        'next_available_time': 'str',
        'price': 'float',
        't1': 'float',
        't2': 'float'
    }

    attribute_map = {
        'device_id': 'deviceId',
        'display_name': 'displayName',
        'gates': 'gates',
        'is_simulator': 'isSimulator',
        'last_calibration': 'lastCalibration',
        'max_shots': 'maxShots',
        'next_available_time': 'nextAvailableTime',
        'price': 'price',
        't1': 't1',
        't2': 't2'
    }

    def __init__(self, device_id=None, display_name=None, gates=None, is_simulator=None, last_calibration=None, max_shots=None, next_available_time=None, price=None, t1=None, t2=None, local_vars_configuration=None):  # noqa: E501
        """DeviceDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._device_id = None
        self._display_name = None
        self._gates = None
        self._is_simulator = None
        self._last_calibration = None
        self._max_shots = None
        self._next_available_time = None
        self._price = None
        self._t1 = None
        self._t2 = None
        self.discriminator = None

        if device_id is not None:
            self.device_id = device_id
        if display_name is not None:
            self.display_name = display_name
        if gates is not None:
            self.gates = gates
        if is_simulator is not None:
            self.is_simulator = is_simulator
        if last_calibration is not None:
            self.last_calibration = last_calibration
        if max_shots is not None:
            self.max_shots = max_shots
        if next_available_time is not None:
            self.next_available_time = next_available_time
        if price is not None:
            self.price = price
        if t1 is not None:
            self.t1 = t1
        if t2 is not None:
            self.t2 = t2

    @property
    def device_id(self):
        """Gets the device_id of this DeviceDetails.  # noqa: E501


        :return: The device_id of this DeviceDetails.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this DeviceDetails.


        :param device_id: The device_id of this DeviceDetails.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def display_name(self):
        """Gets the display_name of this DeviceDetails.  # noqa: E501


        :return: The display_name of this DeviceDetails.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this DeviceDetails.


        :param display_name: The display_name of this DeviceDetails.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def gates(self):
        """Gets the gates of this DeviceDetails.  # noqa: E501


        :return: The gates of this DeviceDetails.  # noqa: E501
        :rtype: list[Gate]
        """
        return self._gates

    @gates.setter
    def gates(self, gates):
        """Sets the gates of this DeviceDetails.


        :param gates: The gates of this DeviceDetails.  # noqa: E501
        :type: list[Gate]
        """

        self._gates = gates

    @property
    def is_simulator(self):
        """Gets the is_simulator of this DeviceDetails.  # noqa: E501


        :return: The is_simulator of this DeviceDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_simulator

    @is_simulator.setter
    def is_simulator(self, is_simulator):
        """Sets the is_simulator of this DeviceDetails.


        :param is_simulator: The is_simulator of this DeviceDetails.  # noqa: E501
        :type: bool
        """

        self._is_simulator = is_simulator

    @property
    def last_calibration(self):
        """Gets the last_calibration of this DeviceDetails.  # noqa: E501


        :return: The last_calibration of this DeviceDetails.  # noqa: E501
        :rtype: str
        """
        return self._last_calibration

    @last_calibration.setter
    def last_calibration(self, last_calibration):
        """Sets the last_calibration of this DeviceDetails.


        :param last_calibration: The last_calibration of this DeviceDetails.  # noqa: E501
        :type: str
        """

        self._last_calibration = last_calibration

    @property
    def max_shots(self):
        """Gets the max_shots of this DeviceDetails.  # noqa: E501


        :return: The max_shots of this DeviceDetails.  # noqa: E501
        :rtype: int
        """
        return self._max_shots

    @max_shots.setter
    def max_shots(self, max_shots):
        """Sets the max_shots of this DeviceDetails.


        :param max_shots: The max_shots of this DeviceDetails.  # noqa: E501
        :type: int
        """

        self._max_shots = max_shots

    @property
    def next_available_time(self):
        """Gets the next_available_time of this DeviceDetails.  # noqa: E501


        :return: The next_available_time of this DeviceDetails.  # noqa: E501
        :rtype: str
        """
        return self._next_available_time

    @next_available_time.setter
    def next_available_time(self, next_available_time):
        """Sets the next_available_time of this DeviceDetails.


        :param next_available_time: The next_available_time of this DeviceDetails.  # noqa: E501
        :type: str
        """

        self._next_available_time = next_available_time

    @property
    def price(self):
        """Gets the price of this DeviceDetails.  # noqa: E501


        :return: The price of this DeviceDetails.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this DeviceDetails.


        :param price: The price of this DeviceDetails.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def t1(self):
        """Gets the t1 of this DeviceDetails.  # noqa: E501


        :return: The t1 of this DeviceDetails.  # noqa: E501
        :rtype: float
        """
        return self._t1

    @t1.setter
    def t1(self, t1):
        """Sets the t1 of this DeviceDetails.


        :param t1: The t1 of this DeviceDetails.  # noqa: E501
        :type: float
        """

        self._t1 = t1

    @property
    def t2(self):
        """Gets the t2 of this DeviceDetails.  # noqa: E501


        :return: The t2 of this DeviceDetails.  # noqa: E501
        :rtype: float
        """
        return self._t2

    @t2.setter
    def t2(self, t2):
        """Sets the t2 of this DeviceDetails.


        :param t2: The t2 of this DeviceDetails.  # noqa: E501
        :type: float
        """

        self._t2 = t2

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceDetails):
            return True

        return self.to_dict() != other.to_dict()
