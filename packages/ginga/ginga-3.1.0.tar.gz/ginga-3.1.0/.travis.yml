# We set the language to c because python isn't supported on the MacOS X nodes
# on Travis. However, the language ends up being irrelevant anyway, since we
# install Python ourselves using conda.
language: c

compiler: gcc

os:
    - linux

# Setting sudo to false opts in to Travis-CI container-based builds.
sudo: false

env:
    global:
        # The following versions are the 'default' for tests, unless
        # overidden underneath. They are defined here in order to save having
        # to repeat them for all configurations.
        - PYTHON_VERSION=3.7
        - NUMPY_VERSION=stable
        - ASTROPY_VERSION=stable
        - PIP_DEPENDENCIES=''
        - INSTALL_CMD='pip install -e .[test]'
        - MAIN_CMD='pytest --pyargs ginga doc'
        # *** TODO: We should test the various GUI toolkits that ginga supports
        # on travis-ci ...
        # https://ginga.readthedocs.io/en/latest/install.html#dependences
        - CONDA_DEPENDENCIES='pyqt'

matrix:

    # Don't wait for allowed failures
    fast_finish: true

    include:

        # Try with the latest Numpy
        - os: linux

        # Try older Numpy version(s)
        # NOTE: Need NO_HELPERS and extra incantations to prevent conda solver timeout.
        - os: linux
          language: python
          python: 3.6
          env: PYTHON_VERSION=3.6 NUMPY_VERSION=1.15 NO_HELPERS=true

        # Try with Astropy dev and matplotlib installed
        - os: linux
          env: ASTROPY_VERSION=development CONDA_DEPENDENCIES='pyqt matplotlib'

        # Try on Windows
        - os: windows

        # Do a PEP 8 test with flake8 (white-list in setup.cfg)
        - os: linux
          env: MAIN_CMD='flake8 ginga --count' INSTALL_CMD=''

        # Do a PEP 517 test with twine check
        - os: linux
          env: CONDA_DEPENDENCIES='' PIP_DEPENDENCIES='pep517 twine'
               INSTALL_CMD='python -m pep517.build --source .'
               MAIN_CMD='twine check dist/*'

before_install:

    # If there are matplotlib tests, comment these out to
    # Make sure that interactive matplotlib backends work
    # - export DISPLAY=:99.0
    # - sh -e /etc/init.d/xvfb start

install:

    # We now use the ci-helpers package to set up our testing environment.
    # This is done by using Miniconda and then using conda and pip to install
    # dependencies. Which dependencies are installed using conda and pip is
    # determined by the CONDA_DEPENDENCIES and PIP_DEPENDENCIES variables,
    # which should be space-delimited lists of package names. See the README
    # in https://github.com/astropy/ci-helpers for information about the full
    # list of environment variables that can be used to customize your
    # environment. In some cases, ci-helpers may not offer enough flexibility
    # in how to install a package, in which case you can have additional
    # commands in the install: section below.

    - git clone git://github.com/astropy/ci-helpers.git
    - if [[ -z $NO_HELPERS ]]; then source ci-helpers/travis/setup_conda.sh; fi

    # As described above, using ci-helpers, you should be able to set up an
    # environment with dependencies installed using conda and pip, but in some
    # cases this may not provide enough flexibility in how to install a
    # specific dependency (and it will not be able to install non-Python
    # dependencies). Therefore, you can also include commands below (as
    # well as at the start of the install section or in the before_install
    # section if they are needed before setting up conda) to install any
    # other dependencies.

script:
   - $INSTALL_CMD
   - $MAIN_CMD
