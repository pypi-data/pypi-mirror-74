# coding: utf-8

"""
    Dash Hudson - Insta

    A Smarter Way to Grow on Instagram  To use the following APIs you will need an access token. An access token can be obtained by contacting Dash Hudson support.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tomek@dashhudson.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UserCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'full_name': 'str',
        'name': 'str',
        'about': 'str',
        'time_zone_name': 'str',
        'default_time_zone': 'int',
        'brand': 'int'
    }

    attribute_map = {
        'email': 'email',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'full_name': 'full_name',
        'name': 'name',
        'about': 'about',
        'time_zone_name': 'time_zone_name',
        'default_time_zone': 'default_time_zone',
        'brand': 'brand'
    }

    def __init__(self, email=None, first_name=None, last_name=None, full_name=None, name=None, about=None, time_zone_name=None, default_time_zone=None, brand=None):  # noqa: E501
        """UserCreate - a model defined in Swagger"""  # noqa: E501

        self._email = None
        self._first_name = None
        self._last_name = None
        self._full_name = None
        self._name = None
        self._about = None
        self._time_zone_name = None
        self._default_time_zone = None
        self._brand = None
        self.discriminator = None

        if email is not None:
            self.email = email
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if full_name is not None:
            self.full_name = full_name
        if name is not None:
            self.name = name
        if about is not None:
            self.about = about
        if time_zone_name is not None:
            self.time_zone_name = time_zone_name
        if default_time_zone is not None:
            self.default_time_zone = default_time_zone
        if brand is not None:
            self.brand = brand

    @property
    def email(self):
        """Gets the email of this UserCreate.  # noqa: E501


        :return: The email of this UserCreate.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserCreate.


        :param email: The email of this UserCreate.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this UserCreate.  # noqa: E501


        :return: The first_name of this UserCreate.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserCreate.


        :param first_name: The first_name of this UserCreate.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UserCreate.  # noqa: E501


        :return: The last_name of this UserCreate.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserCreate.


        :param last_name: The last_name of this UserCreate.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def full_name(self):
        """Gets the full_name of this UserCreate.  # noqa: E501


        :return: The full_name of this UserCreate.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this UserCreate.


        :param full_name: The full_name of this UserCreate.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def name(self):
        """Gets the name of this UserCreate.  # noqa: E501


        :return: The name of this UserCreate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserCreate.


        :param name: The name of this UserCreate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def about(self):
        """Gets the about of this UserCreate.  # noqa: E501


        :return: The about of this UserCreate.  # noqa: E501
        :rtype: str
        """
        return self._about

    @about.setter
    def about(self, about):
        """Sets the about of this UserCreate.


        :param about: The about of this UserCreate.  # noqa: E501
        :type: str
        """

        self._about = about

    @property
    def time_zone_name(self):
        """Gets the time_zone_name of this UserCreate.  # noqa: E501


        :return: The time_zone_name of this UserCreate.  # noqa: E501
        :rtype: str
        """
        return self._time_zone_name

    @time_zone_name.setter
    def time_zone_name(self, time_zone_name):
        """Sets the time_zone_name of this UserCreate.


        :param time_zone_name: The time_zone_name of this UserCreate.  # noqa: E501
        :type: str
        """

        self._time_zone_name = time_zone_name

    @property
    def default_time_zone(self):
        """Gets the default_time_zone of this UserCreate.  # noqa: E501


        :return: The default_time_zone of this UserCreate.  # noqa: E501
        :rtype: int
        """
        return self._default_time_zone

    @default_time_zone.setter
    def default_time_zone(self, default_time_zone):
        """Sets the default_time_zone of this UserCreate.


        :param default_time_zone: The default_time_zone of this UserCreate.  # noqa: E501
        :type: int
        """

        self._default_time_zone = default_time_zone

    @property
    def brand(self):
        """Gets the brand of this UserCreate.  # noqa: E501


        :return: The brand of this UserCreate.  # noqa: E501
        :rtype: int
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this UserCreate.


        :param brand: The brand of this UserCreate.  # noqa: E501
        :type: int
        """

        self._brand = brand

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserCreate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
