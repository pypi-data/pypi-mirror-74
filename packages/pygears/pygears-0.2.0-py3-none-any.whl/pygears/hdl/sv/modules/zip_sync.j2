{%- import 'snippet.j2' as snippet -%}

{% call snippet.module_with_intf_structs(module_name, intfs, intfs|isinput, comment) %}

  {%- set input_intf_names = intfs|isinput|keymap("name") %}
  {%- set min_lvl = intfs|isinput|keymap("lvl")|min %}

  {# If sync-guard is used, generate declarations for the internal interfaces
  that connect to sync-guard inputs. #}
  {% if outsync %}
    {%- set out_intf_names = intfs|isoutput|keymap("name")|format_list("%s_if") %}
    {% for i in intfs|isinput %}
{{snippet.intf_inst(i['name']+"_if", width=i['width'], size=1, type=i['type'])|indent(4,True)}}
    {% endfor %}
  {% else %}
    {%- set out_intf_names = intfs|isoutput|keymap("name") %}
  {% endif %}

    logic all_valid;
    logic out_valid;
    logic out_ready;
    logic all_aligned;
    logic handshake;
  {% for name in input_intf_names %}
    logic [{{min_lvl-1}}:0] {{name}}_eot_overlap;
    logic {{name}}_eot_aligned;
  {% endfor %}

  {% for name in input_intf_names %}
    assign {{name}}_eot_overlap = {{name}}_s.eot[{{min_lvl-1}}:0];
  {% endfor %}

  {# Main zip functionality that determines which of the inputs is ahead in
  Queue structure, i.e. aligned. #}
    assign din0_eot_aligned = din0_eot_overlap >= din1_eot_overlap;
    assign din1_eot_aligned = din1_eot_overlap >= din0_eot_overlap;

    assign all_valid   = {{input_intf_names|format_list("%s.valid")|join(" && ")}};
    assign all_aligned = din0_eot_aligned && din1_eot_aligned;
    assign out_valid   = all_valid & all_aligned;

  {# Connect internal signals to either output interfaces or sync-guard input interfaces. #}
  {% for din, dout in zip(input_intf_names, out_intf_names) %}
    assign {{dout}}.valid = out_valid;
    assign {{dout}}.data = {{din}}_s;
    assign {{din}}.ready = all_valid && ({{dout}}.ready || !{{din}}_eot_aligned);
  {% endfor %}

  {# Instantiate sync-guard if used. #}
  {% if outsync %}
    {% set port_map = {} %}
    {% for i, din in enumerate(intfs|isinput) %}
      {% do port_map.update({"din%s" % i: din['name']+"_if"}) %}
    {% endfor %}

    {% for i, dout in enumerate(intfs|isoutput) %}
      {% do port_map.update({"dout%s" % i: dout['name']}) %}
    {% endfor %}
{{snippet.module_inst(module_name + "_syncguard", {}, "syncguard", port_map=port_map)|indent(4, True)}} 
  {%- endif %}
{% endcall %}
