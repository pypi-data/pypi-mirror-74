{%- import 'snippet.j2' as snippet -%}

module {{module_name}}
(
    input logic clk,
    input logic rst,
{{snippet.intf_list(intfs)|indent(4, True)}}
);

{% for i in intfs|selectattr('modport', 'equalto', 'consumer') %}
{{snippet.intf_inst(i['name']+"_if", width=i['width'], size=1, type="")|indent(4,True)}}
{% endfor %}

{% for p, v in params.items() %}
    localparam {{p}}     = {{v}};
{% endfor -%}

   localparam NUM_OF_BUSES = 2;
   logic  all_aligned;

   logic [NUM_OF_BUSES - 1 : 0] queue_delim;
   logic [NUM_OF_BUSES - 1 : 0] consumed;
   logic [NUM_OF_BUSES - 1 : 0] consumed_reg;
   logic [NUM_OF_BUSES - 1 : 0] aligned;
   logic [NUM_OF_BUSES - 1 : 0] in_valid;
   logic [NUM_OF_BUSES - 1 : 0] out_valid;
   logic [NUM_OF_BUSES - 1 : 0] in_ready;
   logic [NUM_OF_BUSES - 1 : 0] out_ready;

{% for i, intf in enumerate(intfs|isinput) %}
   if (W_DIN{{i}}_LVL == 0) begin
      assign queue_delim[{{i}}] = 1;
   end else if (W_DIN{{i}}_LVL > 0) begin
      assign queue_delim[{{i}}] = &{{intf['name']}}.data[W_DIN{{i}}_DATA + W_DIN{{i}}_LVL - 1: W_DIN{{i}}_DATA];
   end

   assign din{{i}}.ready = in_ready[{{i}}];
   assign dout{{i}}.data = din{{i}}.data;
   assign dout{{i}}.valid = out_valid[{{i}}];
{% endfor -%}

   assign in_valid = {din1.valid, din0.valid};
   assign out_ready = {dout1.ready, dout0.ready};
   assign all_aligned = &aligned;
    generate
       for (genvar i = 0; i < NUM_OF_BUSES; i++) begin
         assign consumed[i] = out_ready[i] && out_valid[i] && queue_delim[i];

          assign aligned[i] = consumed[i] || consumed_reg[i];

          assign out_valid[i] = in_valid[i] && !consumed_reg[i];
          assign in_ready[i] = out_ready[i] && !consumed_reg[i];

         always @(posedge clk) begin
            if (rst | all_aligned) begin
               consumed_reg[i] <= 1'b0;
            end
            else begin
               consumed_reg[i] <= aligned[i];
            end
         end
      end
    endgenerate

endmodule
