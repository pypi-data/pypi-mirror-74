{% from 'snippet.j2' import module with context %}

{% call module() %}
   {%- set rd_intf_names = intfs[1:]|isinput|keymap("name") %}
   {%- set dout_intf_names = intfs|isoutput|keymap("name") %}

   logic [$size(din.data)-1 : 0] din_reg;

   initial begin
      din_reg = {{code(_din_t(params['init']), int)}};
   end

   always @(posedge clk) begin
      if (rst) begin
         din_reg <= {{code(_din_t(params['init']), int)}};
      end else if (din.valid && din.ready) begin
         din_reg <= din.data;
      end
   end


  {% for rd, dout in zip(rd_intf_names, dout_intf_names) %}
   {% if params['hold'] %}
   logic                         {{rd}}_consuming;
   logic                         {{rd}}_handshake;
   logic [$size(din.data)-1 : 0] {{rd}}_reg;

   always @(posedge clk) begin
      if (!{{rd}}_consuming) begin
         {{rd}}_reg <= din_reg;
      end
   end

   always @(posedge clk) begin
      if (rst || {{rd}}_handshake) begin
         {{rd}}_consuming <= 0;
      end else if ({{rd}}.valid) begin
         {{rd}}_consuming <= 1;
      end
   end

   assign {{rd}}_handshake = {{dout}}.valid && {{dout}}.ready;
   assign {{dout}}_s = (!{{rd}}_consuming) ? din_reg : {{rd}}_reg;
   {% else %}
   assign {{dout}}_s = din_reg;
   {% endif %}

   assign {{dout}}.valid = {{rd}}.valid;
   assign {{rd}}.ready = {{dout}}.ready;

  {% endfor %}

   assign din.ready = 1'b1;

{% endcall %}
