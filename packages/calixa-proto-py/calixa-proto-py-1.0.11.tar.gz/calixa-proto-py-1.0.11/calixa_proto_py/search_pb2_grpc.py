# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import search_pb2 as search__pb2


class SearchServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.search = channel.unary_unary(
                '/calixa.domain.search.SearchService/search',
                request_serializer=search__pb2.SearchRequest.SerializeToString,
                response_deserializer=search__pb2.SearchResponse.FromString,
                )


class SearchServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def search(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SearchServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'search': grpc.unary_unary_rpc_method_handler(
                    servicer.search,
                    request_deserializer=search__pb2.SearchRequest.FromString,
                    response_serializer=search__pb2.SearchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'calixa.domain.search.SearchService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SearchService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.search.SearchService/search',
            search__pb2.SearchRequest.SerializeToString,
            search__pb2.SearchResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class IndexServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.indexEntities = channel.unary_unary(
                '/calixa.domain.search.IndexService/indexEntities',
                request_serializer=search__pb2.IndexEntitiesRequest.SerializeToString,
                response_deserializer=search__pb2.IndexEntitiesResponse.FromString,
                )
        self.initializeIndex = channel.unary_unary(
                '/calixa.domain.search.IndexService/initializeIndex',
                request_serializer=search__pb2.InitializeIndexRequest.SerializeToString,
                response_deserializer=search__pb2.InitializeIndexResponse.FromString,
                )


class IndexServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def indexEntities(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def initializeIndex(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IndexServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'indexEntities': grpc.unary_unary_rpc_method_handler(
                    servicer.indexEntities,
                    request_deserializer=search__pb2.IndexEntitiesRequest.FromString,
                    response_serializer=search__pb2.IndexEntitiesResponse.SerializeToString,
            ),
            'initializeIndex': grpc.unary_unary_rpc_method_handler(
                    servicer.initializeIndex,
                    request_deserializer=search__pb2.InitializeIndexRequest.FromString,
                    response_serializer=search__pb2.InitializeIndexResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'calixa.domain.search.IndexService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IndexService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def indexEntities(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.search.IndexService/indexEntities',
            search__pb2.IndexEntitiesRequest.SerializeToString,
            search__pb2.IndexEntitiesResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def initializeIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.search.IndexService/initializeIndex',
            search__pb2.InitializeIndexRequest.SerializeToString,
            search__pb2.InitializeIndexResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
