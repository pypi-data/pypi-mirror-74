image: docker.km3net.de/base/python:3

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  CONTAINER_TEST_IMAGE: docker.km3net.de/test/km3pipe:$CI_COMMIT_REF_SLUG
  CONTAINER_RELEASE_IMAGE: docker.km3net.de/km3pipe:$CI_COMMIT_TAG
  CONTAINER_LATEST_IMAGE: docker.km3net.de/km3pipe:latest


# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - venv/
  key: "$CI_COMMIT_REF_SLUG"

stages:
  - test
  - coverage
  - doc
  - docker
  - release

.virtualenv_template: &virtualenv_definition |
  python -V
  pip install -U pip setuptools
  pip install virtualenv
  virtualenv venv
  source venv/bin/activate
  pip install -U pip setuptools
  make install

.junit_template: &junit_definition
    artifacts:
      reports:
        junit: "reports/junit*.xml"


test-py2:
    image: docker.km3net.de/base/python:2
    stage: test
    script:
        - *virtualenv_definition
        - make test
        - make test-km3modules
    <<: *junit_definition

test-py3.5:
    image: docker.km3net.de/base/python:3.5
    stage: test
    script:
        - *virtualenv_definition
        - make test
        - make test-km3modules
    <<: *junit_definition

test-py3.6:
    image: docker.km3net.de/base/python:3.6
    stage: test
    script:
        - *virtualenv_definition
        - make test
        - make test-km3modules
    <<: *junit_definition

test-py3.7:
    image: docker.km3net.de/base/python:3.7
    stage: test
    script:
        - *virtualenv_definition
        - make test
        - make test-km3modules
    <<: *junit_definition

test-jpp:
    image: docker.km3net.de/jpp
    stage: test
    script:
        - yum install -y epel-release
        - yum install -y python-pip python-devel
        - _CWD=$(pwd) && cd /usr/local/root && source bin/thisroot.sh && cd $_CWD
        - which -a root
        - which -a python
        - python -c "import ROOT"
        - source /Jpp/setenv.sh /Jpp
        - *virtualenv_definition
        - make test
    cache:
      paths:
        - .cache/pip
        - venv/
      key: "JPP_BUILD_$CI_COMMIT_REF_SLUG"
    <<: *junit_definition
    allow_failure: true

code-style:
    image: docker.km3net.de/base/python:3.7
    stage: test
    script:
        - *virtualenv_definition
        - yapf -r -d -e "venv" .
    allow_failure: true

coverage:
    image: docker.km3net.de/base/python:3.6
    stage: coverage
    script:
        - *virtualenv_definition
        - "make test-cov|grep TOTAL| awk '{printf \"COVERAGE: %.2f%%\", (1-$3/$2)*100 }'"
    coverage: '/COVERAGE:\s*([0-9]*\.[0-9]*%)/'
    #     - make test-cov
    # coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
    artifacts:
        paths:
            - reports/coverage


pages:
    image: docker.km3net.de/base/python:3.6
    stage: doc
    script:
        - *virtualenv_definition
        - mkdir public
        - cd doc && make clean && make html
        - mv _build/html ../public/v8
        - cd .. && mv reports/coverage public/v8/coverage
    artifacts:
        paths:
            - public
    cache: {}
    only:
        - master

docker:
  image: docker:stable
  services:
    - docker:dind
  stage: docker
  script:
    - docker build --pull -t $CONTAINER_TEST_IMAGE .
    - docker push $CONTAINER_TEST_IMAGE
  tags:
    - docker
  only:
    - tags

pypi:
    image: docker.km3net.de/base/python:3
    stage: release
    cache: {}
    script:
        - pip install -U twine
        - python setup.py sdist
        - twine upload dist/*
    only:
        - tags

release-image:
  image: docker:stable
  services:
    - docker:dind
  stage: release
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_RELEASE_IMAGE
    - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_LATEST_IMAGE
    - docker push $CONTAINER_RELEASE_IMAGE
    - docker push $CONTAINER_LATEST_IMAGE
  tags:
    - docker
  only:
    - tags
