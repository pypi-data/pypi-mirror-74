"""Autogenerated file: DO NOT EDIT!"""
import typing  # noqa: F401
from dazzler.system import Component, Aspect, UNDEFINED  # noqa: F401


class TextArea(Component):
    """
    Html Textarea wrapper.
    """
    _aspect_keys = []
    _children = []
    value = Aspect(docstring="Current value of the textarea")
    name = Aspect(docstring="Name of the element for forms.")
    cols = Aspect(docstring="Number of columns.")
    rows = Aspect(docstring="Number of rows.")
    required = Aspect(docstring="Is it required in a form.")
    disabled = Aspect(docstring="Is it disabled ?")
    placeholder = Aspect(docstring="Hint when no value is entered.")
    max_length = Aspect(docstring="Max length of the value.")
    autosize = Aspect(docstring="Auto size the")
    style = Aspect()
    class_name = Aspect()

    def __init__(
            self,
            value: typing.Optional[str] = UNDEFINED,
            name: typing.Optional[str] = UNDEFINED,
            cols: typing.Optional[typing.Union[float, int]] = UNDEFINED,
            rows: typing.Optional[typing.Union[float, int]] = UNDEFINED,
            required: typing.Optional[bool] = UNDEFINED,
            disabled: typing.Optional[bool] = UNDEFINED,
            placeholder: typing.Optional[str] = UNDEFINED,
            max_length: typing.Optional[typing.Union[float, int]] = UNDEFINED,
            autosize: typing.Optional[bool] = UNDEFINED,
            style: typing.Optional[typing.Dict] = UNDEFINED,
            class_name: typing.Optional[str] = UNDEFINED,
            identity: str = None
    ):
        """
        :param value: Current value of the textarea
        :param name: Name of the element for forms.
        :param cols: Number of columns.
        :param rows: Number of rows.
        :param required: Is it required in a form.
        :param disabled: Is it disabled ?
        :param placeholder: Hint when no value is entered.
        :param max_length: Max length of the value.
        :param autosize: Auto size the
        :param style:
        :param class_name:
        """
        Component.__init__(self, locals(), identity)
