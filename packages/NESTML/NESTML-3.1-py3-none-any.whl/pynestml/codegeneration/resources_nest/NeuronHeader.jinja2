{#
/*
*  NeuronHeader.jinja2
*
*  This file is part of NEST.
*
*  Copyright (C) 2004 The NEST Initiative
*
*  NEST is free software: you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation, either version 2 of the License, or
*  (at your option) any later version.
*
*  NEST is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  You should have received a copy of the GNU General Public License
*  along with NEST.  If not, see <http://www.gnu.org/licenses/>.
*
*/
-#}
{%- if tracing %}/* generated by {{self._TemplateReference__context.name}} */ {% endif %}
/*
*  {{neuronName}}.h
*
*  This file is part of NEST.
*
*  Copyright (C) 2004 The NEST Initiative
*
*  NEST is free software: you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation, either version 2 of the License, or
*  (at your option) any later version.
*
*  NEST is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  You should have received a copy of the GNU General Public License
*  along with NEST.  If not, see <http://www.gnu.org/licenses/>.
*
*  {{now}}
*/
#ifndef {{neuronName.upper()}}
#define {{neuronName.upper()}}

#include "config.h"

{% if norm_rng -%}
// Includes from librandom:
#include "normal_randomdev.h"
{% endif -%}

{% if useGSL %}
#ifdef HAVE_GSL

// External includes:
#include <gsl/gsl_errno.h>
#include <gsl/gsl_matrix.h>
#include <gsl/gsl_odeiv.h>

// forwards the declaration of the function
/**
 * Function computing right-hand side of ODE for GSL solver.
 * @note Must be declared here so we can befriend it in class.
 * @note Must have C-linkage for passing to GSL. Internally, it is
 *       a first-class C++ function, but cannot be a member function
 *       because of the C-linkage.
 * @note No point in declaring it inline, since it is called
 *       through a function pointer.
 * @param void* Pointer to model neuron instance.
 */
extern "C" inline int {{neuronName}}_dynamics( double, const double y[], double f[], void* pnode );
{% endif %}

// Includes from nestkernel:
#include "archiving_node.h"
#include "connection.h"
#include "event.h"
#include "nest_types.h"
#include "ring_buffer.h"
#include "universal_data_logger.h"


// Includes from sli:
#include "dictdatum.h"

/* BeginDocumentation
  Name: {{neuronName}}.

  Description:{% filter indent(2,True) %}
  {{neuron.print_comment()}}{% endfilter %}

  Parameters:
  The following parameters can be set in the status dictionary.
  {% for parameter in neuron.get_parameter_symbols() -%}
  {% if parameter.has_comment() -%}
    {{parameter.get_symbol_name()}} [{{parameter.get_type_symbol().print_symbol()}}] {{parameter.print_comment()}}
  {% endif -%}
  {% endfor %}

  Dynamic state variables:
  {% for state in neuron.get_state_symbols() -%}
  {% if state.has_comment() -%}
    {{state.get_symbol_name()}} [{{state.get_type_symbol().print_symbol()}}] {{state.print_comment()}}
  {% endif -%}
  {% endfor %}

  Initial values:
  {% for init in neuron.get_initial_values_symbols() -%}
  {% if init.has_comment() -%}
    {{init.get_symbol_name()}} [{{init.get_type_symbol().print_symbol()}}] {{init.print_comment()}}
  {% endif -%}
  {% endfor %}

  References: Empty

  Sends: {{outputEvent}}

  Receives: {% if is_spike_input %}Spike, {% endif %}{% if is_current_input %}Current,{% endif %} DataLoggingRequest
*/
class {{neuronName}} : public nest::Archiving_Node{
public:
  /**
  * The constructor is only used to create the model prototype in the model manager.
  */
  {{neuronName}}();

  /**
  * The copy constructor is used to create model copies and instances of the model.
  * @node The copy constructor needs to initialize the parameters and the state.
  *       Initialization of buffers and interal variables is deferred to
  *       @c init_buffers_() and @c calibrate().
  */
  {{neuronName}}(const {{neuronName}} &);

  /**
  * Releases resources.
  */
  ~{{neuronName}}();

  /**
   * Import sets of overloaded virtual functions.
   * @see Technical Issues / Virtual Functions: Overriding, Overloading, and
   * Hiding
   */
  using nest::Node::handles_test_event;
  using nest::Node::handle;

  /**
  * Used to validate that we can send {{outputEvent}} to desired target:port.
  */
  nest::port send_test_event(nest::Node& target, nest::rport receptor_type, nest::synindex, bool);

  /**
  * @defgroup mynest_handle Functions handling incoming events.
  * We tell nest that we can handle incoming events of various types by
  * defining @c handle() and @c connect_sender() for the given event.
  * @{
  */
  {% if is_spike_input -%}
  void handle(nest::SpikeEvent &);        //! accept spikes
  {% endif -%}
  {% if is_current_input -%}
  void handle(nest::CurrentEvent &);      //! accept input current
  {% endif -%}
  void handle(nest::DataLoggingRequest &);//! allow recording with multimeter

  {% if is_spike_input -%}
  nest::port handles_test_event(nest::SpikeEvent&, nest::port);
  {% endif -%}
  {% if is_current_input -%}
  nest::port handles_test_event(nest::CurrentEvent&, nest::port);
  {% endif -%}
  nest::port handles_test_event(nest::DataLoggingRequest&, nest::port);
  /** @} */

  // SLI communication functions:
  void get_status(DictionaryDatum &) const;
  void set_status(const DictionaryDatum &);

private:
  {% if (neuron.get_multiple_receptors())|length > 1 -%}
    /**
     * Synapse types to connect to
     * @note Excluded upper and lower bounds are defined as INF_, SUP_.
     *       Excluding port 0 avoids accidental connections.
     */
    enum SynapseTypes
    {
      INF_SPIKE_RECEPTOR = 0,
      {% for buffer in neuron.get_multiple_receptors() -%}
        {{buffer.get_symbol_name().upper()}} ,
      {% endfor -%}
      SUP_SPIKE_RECEPTOR
    };
  {% endif -%}
  //! Reset parameters and state of neuron.

  //! Reset state of neuron.
  void init_state_(const Node& proto);

  //! Reset internal buffers of neuron.
  void init_buffers_();

  //! Initialize auxiliary quantities, leave parameters and state untouched.
  void calibrate();

  //! Take neuron through given time interval
  void update(nest::Time const &, const long, const long);

  // The next two classes need to be friends to access the State_ class/member
  friend class nest::RecordablesMap<{{neuronName}}>;
  friend class nest::UniversalDataLogger<{{neuronName}}>;

  /**
  * Free parameters of the neuron.
  *
  {{neuron.print_parameter_comment("*")}}
  *
  * These are the parameters that can be set by the user through @c `node.set()`.
  * They are initialized from the model prototype when the node is created.
  * Parameters do not change during calls to @c update() and are not reset by
  * @c ResetNetwork.
  *
  * @note Parameters_ need neither copy constructor nor @c operator=(), since
  *       all its members are copied properly by the default copy constructor
  *       and assignment operator. Important:
  *       - If Parameters_ contained @c Time members, you need to define the
  *         assignment operator to recalibrate all members of type @c Time . You
  *         may also want to define the assignment operator.
  *       - If Parameters_ contained members that cannot copy themselves, such
  *         as C-style arrays, you need to define the copy constructor and
  *         assignment operator to copy those members.
  */
  struct Parameters_{
    {% filter indent(4,True) %}
    {% for variable in neuron.get_parameter_non_alias_symbols() -%}
      {% include 'directives/MemberDeclaration.jinja2' -%}
    {% endfor -%}{% endfilter %}

    {% if useGSL -%}
    double __gsl_error_tol;
    {% endif -%}

    /** Initialize parameters to their default values. */
    Parameters_();
  };

  /**
  * Dynamic state of the neuron.
  *
  {{neuron.print_state_comment('*')}}
  *
  * These are the state variables that are advanced in time by calls to
  * @c update(). In many models, some or all of them can be set by the user
  * through @c `node.set()`. The state variables are initialized from the model
  * prototype when the node is created. State variables are reset by @c ResetNetwork.
  *
  * @note State_ need neither copy constructor nor @c operator=(), since
  *       all its members are copied properly by the default copy constructor
  *       and assignment operator. Important:
  *       - If State_ contained @c Time members, you need to define the
  *         assignment operator to recalibrate all members of type @c Time . You
  *         may also want to define the assignment operator.
  *       - If State_ contained members that cannot copy themselves, such
  *         as C-style arrays, you need to define the copy constructor and
  *         assignment operator to copy those members.
  */
  struct State_{
    {% if not useGSL %}{% filter indent(4,True) -%}
    {% for variable in neuron.get_state_non_alias_symbols() -%}
    {% include "directives/MemberDeclaration.jinja2" -%}
    {% endfor -%}
    {% for variable in neuron.get_initial_values_symbols() -%}
    {% include "directives/MemberDeclaration.jinja2" -%}
    {% endfor -%}{% endfilter -%}
    {% else -%}
    //! Symbolic indices to the elements of the state vector y
    enum StateVecElems{
    {% for variable in neuron.get_ode_defined_symbols() -%}
      {{variable.print_comment("// ")}}
      {{names.convert_to_cpp_name(variable.get_symbol_name())}},
      {% endfor -%}
      STATE_VEC_SIZE
    };
    //! state vector, must be C-array for GSL solver
    double ode_state[STATE_VEC_SIZE];{% filter indent(4,True) -%}
    {% for variable in neuron.get_state_symbols() -%}
      {% include "directives/MemberDeclaration.jinja2" -%}
    {% endfor -%}
    {% for variable in neuron.get_function_initial_values_symbols() -%}
      {% include "directives/MemberDeclaration.jinja2" -%}
    {% endfor -%}{% endfilter -%}
    {% endif -%}
    {% filter indent(4,True) -%}
    {% for variable in neuron.get_ode_aliases() -%}
      {% include 'directives/MemberDeclaration.jinja2' -%}
    {% endfor %}
    {% endfilter -%}

    State_();
  };

  /**
  * Internal variables of the neuron.
  *
  {{neuron.print_internal_comment('*')}}
  *
  * These variables must be initialized by @c calibrate, which is called before
  * the first call to @c update() upon each call to @c Simulate.
  * @node Variables_ needs neither constructor, copy constructor or assignment operator,
  *       since it is initialized by @c calibrate(). If Variables_ has members that
  *       cannot destroy themselves, Variables_ will need a destructor.
  */
  struct Variables_ {
    {%- for variable in neuron.get_internal_non_alias_symbols() -%}
      {% filter indent(4,True) %}{% include "directives/MemberDeclaration.jinja2" -%}{% endfilter %}
    {% endfor %}
  };

  /**
    * Buffers of the neuron.
    * Ususally buffers for incoming spikes and data logged for analog recorders.
    * Buffers must be initialized by @c init_buffers_(), which is called before
    * @c calibrate() on the first call to @c Simulate after the start of NEST,
    * ResetKernel or ResetNetwork.
    * @node Buffers_ needs neither constructor, copy constructor or assignment operator,
    *       since it is initialized by @c init_nodes_(). If Buffers_ has members that
    *       cannot destroy themselves, Buffers_ will need a destructor.
    */
  struct Buffers_ {
    Buffers_({{neuronName}} &);
    Buffers_(const Buffers_ &, {{neuronName}} &);

    /** Logger for all analog data */
    nest::UniversalDataLogger<{{neuronName}}> logger_;
    {% if ((neuron.get_multiple_receptors())|length > 1) or neuron.is_array_buffer() %}
    std::vector<long> receptor_types_;
    {% endif %}

    {%- if ((neuron.get_multiple_receptors())|length > 1) -%}
    /** buffers and sums up incoming spikes/currents */
    std::vector< nest::RingBuffer > spike_inputs_;

    {% for inputPort in neuron.get_spike_buffers() %}
    {{printer.print_buffer_array_getter(inputPort)}}
    {{printer.print_buffer_declaration_value(inputPort)}};
    {% endfor %}
    {% else -%}
    {% for inputPort in neuron.get_spike_buffers() %}
    {{printer.print_buffer_getter(inputPort, true)}}
    {{printer.print_buffer_declaration_header(inputPort)}}
    {{printer.print_buffer_declaration(inputPort)}};
    {{printer.print_buffer_declaration_value(inputPort)}};
    {% endfor %}
    {% endif -%}

    {% for inputPort in neuron.get_current_buffers() -%}
    {{printer.print_buffer_declaration_header(inputPort)}}
    {{printer.print_buffer_declaration(inputPort)}};
    {{printer.print_buffer_getter(inputPort, true)}}
    {{printer.print_buffer_declaration_value(inputPort)}};
    {% endfor %}

    {%- if useGSL -%}
    /** GSL ODE stuff */
    gsl_odeiv_step* __s;    //!< stepping function
    gsl_odeiv_control* __c; //!< adaptive stepsize control function
    gsl_odeiv_evolve* __e;  //!< evolution function
    gsl_odeiv_system __sys; //!< struct describing system

    // IntergrationStep_ should be reset with the neuron on ResetNetwork,
    // but remain unchanged during calibration. Since it is initialized with
    // step_, and the resolution cannot change after nodes have been created,
    // it is safe to place both here.
    double __step;             //!< step size in ms
    double __integration_step; //!< current integration time step, updated by GSL
    {% endif -%}
  };

  {%- for state in neuron.get_state_symbols() -%}
  {%- with variable = state -%}
  {%- include "directives/MemberVariableGetterSetter.jinja2" -%}
  {%- endwith -%}
  {%- endfor -%}

  {%- for init in neuron.get_initial_values_symbols() -%}
  {%- with variable = init -%}
  {%- include "directives/MemberVariableGetterSetter.jinja2" -%}
  {%- endwith -%}
  {%- endfor -%}

  {%- for parameter in neuron.get_parameter_symbols() -%}
  {%- with variable = parameter -%}
  {%- include "directives/MemberVariableGetterSetter.jinja2" -%}
  {%- endwith -%}
  {%- endfor -%}

  {%- for internal in neuron.get_internal_symbols() -%}
  {%- with variable = internal -%}
  {%- include "directives/MemberVariableGetterSetter.jinja2" -%}
  {%- endwith -%}
  {%- endfor -%}

  {%- for odeAlias in neuron.get_ode_aliases() %}
  {%- with variable = odeAlias %}
  {%- include "directives/MemberVariableGetterSetter.jinja2" -%}
  {%- endwith -%}
  {%- endfor %}

  {% for buffer in neuron.get_input_buffers() %}
  {{printer.print_buffer_getter(buffer, false)}};
  {% endfor %}

  // Generate function header
  {% for function in neuron.get_functions() %}
  {{printer.print_function_declaration(function)}};
  {% endfor %}
  /**
  * @defgroup pif_members Member variables of neuron model.
  * Each model neuron should have precisely the following four data members,
  * which are one instance each of the parameters, state, buffers and variables
  * structures. Experience indicates that the state and variables member should
  * be next to each other to achieve good efficiency (caching).
  * @note Devices require one additional data member, an instance of the @c Device
  *       child class they belong to.
  * @{
  */
  Parameters_ P_;  //!< Free parameters.
  State_      S_;  //!< Dynamic state.
  Variables_  V_;  //!< Internal Variables
  Buffers_    B_;  //!< Buffers.

  //! Mapping of recordables names to access functions
  static nest::RecordablesMap<{{neuronName}}> recordablesMap_;

  {% if useGSL -%}
  friend int {{neuronName}}_dynamics( double, const double y[], double f[], void* pnode );
  {% endif %}

  {%- if norm_rng -%}
  librandom::NormalRandomDev normal_dev_; //!< random deviate generator
  {% endif %}

/** @} */
}; /* neuron {{neuronName}} */

inline nest::port {{neuronName}}::send_test_event(
    nest::Node& target, nest::rport receptor_type, nest::synindex, bool){
  // You should usually not change the code in this function.
  // It confirms that the target of connection @c c accepts @c {{outputEvent}} on
  // the given @c receptor_type.
  {{outputEvent}} e;
  e.set_sender(*this);
  return target.handles_test_event(e, receptor_type);
}
{% if is_spike_input %}
inline nest::port {{neuronName}}::handles_test_event(nest::SpikeEvent&, nest::port receptor_type){
  {% if neuron.is_multisynapse_spikes() -%}
    if ( receptor_type <= 0 || receptor_type > static_cast< nest::port >( get_{{neuron.get_spike_buffers()[0].get_vector_parameter()}}()) ) {
        // TODO refactor me. The code assumes that there is only one. Check by coco.
        throw nest::IncompatibleReceptorType( receptor_type, get_name(), "SpikeEvent" );
    }
    return receptor_type;
  {% elif neuron.get_multiple_receptors()|length > 1 -%}
    assert( B_.spike_inputs_.size() == {{(neuron.get_multiple_receptors())|length}} );

    if ( !( INF_SPIKE_RECEPTOR < receptor_type && receptor_type < SUP_SPIKE_RECEPTOR ) )
    {
      throw nest::UnknownReceptorType( receptor_type, get_name() );
      return 0;
    }
    else {
      return receptor_type - 1;
    }{%- else %}
    // You should usually not change the code in this function.
    // It confirms to the connection management system that we are able
    // to handle @c SpikeEvent on port 0. You need to extend the function
    // if you want to differentiate between input ports.
    if (receptor_type != 0)
      throw nest::UnknownReceptorType(receptor_type, get_name());
    return 0;
  {%- endif %}
}
{% endif %}

{% if is_current_input %}
inline nest::port {{neuronName}}::handles_test_event(
    nest::CurrentEvent&, nest::port receptor_type){
  // You should usually not change the code in this function.
  // It confirms to the connection management system that we are able
  // to handle @c CurrentEvent on port 0. You need to extend the function
  // if you want to differentiate between input ports.
  if (receptor_type != 0)
  throw nest::UnknownReceptorType(receptor_type, get_name());
  return 0;
}
{% endif %}
inline nest::port {{neuronName}}::handles_test_event(
    nest::DataLoggingRequest& dlr, nest::port receptor_type){
  // You should usually not change the code in this function.
  // It confirms to the connection management system that we are able
  // to handle @c DataLoggingRequest on port 0.
  // The function also tells the built-in UniversalDataLogger that this node
  // is recorded from and that it thus needs to collect data during simulation.
  if (receptor_type != 0)
  throw nest::UnknownReceptorType(receptor_type, get_name());

  return B_.logger_.connect_logging_device(dlr, recordablesMap_);
}

// TODO call get_status on used or internal components
inline void {{neuronName}}::get_status(DictionaryDatum &__d) const{
  {%- for parameter in neuron.get_parameter_symbols() -%}
  {%- with variable = parameter -%}{%- filter indent(2,True) -%}
  {% include "directives/WriteInDictionary.jinja2" %}
  {% endfilter -%}{% endwith -%}
  {%- endfor -%}
  {%- for state in neuron.get_state_symbols() -%}
  {%- with variable = state -%}{%- filter indent(2,True) -%}
  {% include "directives/WriteInDictionary.jinja2" %}
  {% endfilter -%}{% endwith -%}
  {%- endfor -%}
  {%- for init in neuron.get_initial_values_symbols() -%}
  {%- with variable = init -%}{%- filter indent(2,True) -%}
  {% include "directives/WriteInDictionary.jinja2" %}
  {% endfilter -%}{% endwith -%}
  {%- endfor -%}

  Archiving_Node::get_status( __d );

  {% if (neuron.get_multiple_receptors())|length > 1 -%}
  DictionaryDatum __receptor_type = new Dictionary();
  {% for spikeBuffer in neuron.get_multiple_receptors() -%}
  ( *__receptor_type )[ "{{spikeBuffer.get_symbol_name().upper()}}" ] = {{spikeBuffer.get_symbol_name().upper()}};
  {% endfor %}
  ( *__d )[ "receptor_types" ] = __receptor_type;
  {% endif %}

  (*__d)[nest::names::recordables] = recordablesMap_.get_list();
  {% if useGSL %}
  def< double >(__d, nest::names::gsl_error_tol, P_.__gsl_error_tol);
  if ( P_.__gsl_error_tol <= 0. ){
    throw nest::BadProperty( "The gsl_error_tol must be strictly positive." );
  }
  {% endif %}

}

inline void {{neuronName}}::set_status(const DictionaryDatum &__d){
  {%- for parameter in neuron.get_parameter_symbols() -%}
  {%- with variable = parameter -%}
  {%- include "directives/ReadFromDictionaryToTmp.jinja2" %}
  {%- endwith -%}
  {%- endfor -%}
  {%- for state in neuron.get_state_symbols() %}
  {%- with variable = state %}
  {%- include "directives/ReadFromDictionaryToTmp.jinja2" %}
  {% endwith -%}
  {% endfor -%}
  {%- for init in neuron.get_initial_values_symbols() %}
  {%- with variable = init %}
  {%- include "directives/ReadFromDictionaryToTmp.jinja2" %}
  {% endwith -%}
  {% endfor -%}


  // We now know that (ptmp, stmp) are consistent. We do not
  // write them back to (P_, S_) before we are also sure that
  // the properties to be set in the parent class are internally
  // consistent.
  Archiving_Node::set_status(__d);

  // if we get here, temporaries contain consistent set of properties
  {%- for parameter in neuron.get_parameter_symbols() -%}
  {%- with variable = parameter -%}
  {%- include "directives/AssignTmpDictionaryValue.jinja2" -%}
  {%- endwith -%}
  {%- endfor -%}

  {%- for state in neuron.get_state_symbols() -%}
  {%- with variable = state %}
  {%- include "directives/AssignTmpDictionaryValue.jinja2" %}
  {%- endwith %}
  {%- endfor %}

  {%- for init in neuron.get_initial_values_symbols() -%}
  {%- with variable = init %}
  {%- include "directives/AssignTmpDictionaryValue.jinja2" %}
  {%- endwith %}
  {%- endfor %}

  {% for invariant in neuron.get_parameter_invariants() %}
  if ( !({{printer.print_expression(invariant)}}) ) {
    throw nest::BadProperty("The constraint '{{idemPrinter.print_expression(invariant)}}' is violated!");
  }
  {%- endfor -%}

  {% if useGSL %}
  updateValue< double >(__d, nest::names::gsl_error_tol, P_.__gsl_error_tol);
  if ( P_.__gsl_error_tol <= 0. ){
    throw nest::BadProperty( "The gsl_error_tol must be strictly positive." );
  }
  {% endif %}
};

#endif /* #ifndef {{neuronName.upper()}} */{% if useGSL %}
#endif /* HAVE GSL */{% endif %}
