{#
  Generates C++ declaration
  @grammar: Assignment = variableName:QualifiedName "=" Expr;
  @param ast ASTAssignment
#}
{%- if tracing %}/* generated by {{self._TemplateReference__context.name}} */ {% endif %}
{% set lhs_variable = assignments.lhs_variable(ast) -%}
{%- if assignments.is_vectorized_assignment(ast) -%}
for (long i=0; i < P_.{{assignments.print_size_parameter(ast)}}; i++) {
  {%- if lhs_variable.has_vector_parameter() -%}
    {{printer.print_origin(lhs_variable)}}{{names.name(lhs_variable)}}[i]
  {%- else -%}
    {{printer.print_origin(lhs_variable)}}{{names.name(lhs_variable)}}
  {%- endif -%}
  {{assignments.print_assignments_operation(ast)}}
  {{printer.print_expression(ast.get_expression())}};
}
{%- else -%}
  {{printer.print_origin(lhs_variable)}}{{names.name(lhs_variable)}} {{assignments.print_assignments_operation(ast)}} {{printer.print_expression(ast.get_expression())}};
{%- endif -%}
