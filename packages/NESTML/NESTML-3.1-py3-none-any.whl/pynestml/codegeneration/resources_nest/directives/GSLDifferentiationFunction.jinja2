{#
  Creates GSL implementation of the differentiation step for the system of ODEs.
#}
extern "C" inline int {{neuronName}}_dynamics(double, const double ode_state[], double f[], void* pnode){
  typedef {{neuronName}}::State_ State_;
  // get access to node so we can almost work as in a member function
  assert( pnode );
  const {{neuronName}}& node = *( reinterpret_cast< {{neuronName}}* >( pnode ) );

  // ode_state[] here is---and must be---the state vector supplied by the integrator,
  // not the state vector in the node, node.S_.ode_state[].
  {%- for ode in neuron.get_equations_blocks().get_declarations() -%}
    {%- for function in utils.get_alias_symbols(ode) -%}
      {%- if not function.is_equation() -%}
        {% set declaringExpression = function.get_declaring_expression() -%}
  double {{names.name(function)}} = {{printerGSL.print_expression(declaringExpression, prefix="node.")}};
      {% endif -%}
    {% endfor -%}
  {% endfor %}
  {# todo by kp: this part is no longer required since we make all functions self contained
  {% for function in neuron.get_ode_aliases() -%}
    {% set declaringExpression = function.get_declaring_expression() -%}
  double {{names.name(function)}} = {{printerGSL.print_expression(declaringExpression, prefix="node.")}};
  {% endfor -%}
  #}
  {%- for odeVariable in neuron.get_non_function_initial_values_symbols() -%}
  {%- if odeVariable.is_ode_defined() %}
  f[{{names.array_index(odeVariable)}}] = {{printerGSL.print_expression(odeVariable.get_ode_definition(), prefix="node.")}};
  {%- endif -%}
  {%- endfor %}
  return GSL_SUCCESS;
}

