{#
  Generates the getter function for the variable.
  @param variable VariableSymbol that captures the variable from the model
#}
{%- if tracing %}/* generated by {{self._TemplateReference__context.name}} */ {% endif %}
{%- if variable.is_function and not utils.contains_sum_call(variable) %}
  inline {{declarations.print_variable_type(variable)}} {{names.getter(variable)}}() const {
    return {{printer.print_expression(variable.get_declaring_expression())}};
  }
{% else %}
  inline {{declarations.print_variable_type(variable)}} {{names.getter(variable)}}() const {
    return {{printer.print_origin(variable)}}{{names.name(variable)}};
  }
  inline void {{names.setter(variable)}}(const {{declarations.print_variable_type(variable)}} __v) {
    {{printer.print_origin(variable)}}{{names.name(variable)}} = __v;
  }
{% endif %}