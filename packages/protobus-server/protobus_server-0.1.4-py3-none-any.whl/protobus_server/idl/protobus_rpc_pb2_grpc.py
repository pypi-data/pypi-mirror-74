# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import protobus_event_pb2 as protobus__event__pb2
import protobus_rpc_pb2 as protobus__rpc__pb2


class ProtobusServiceStub(object):
    """The main protobus publish/subscribe service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Publish = channel.stream_unary(
                '/protobus.ProtobusService/Publish',
                request_serializer=protobus__event__pb2.EncapsulatedEvent.SerializeToString,
                response_deserializer=protobus__rpc__pb2.Status.FromString,
                )
        self.Subscribe = channel.unary_stream(
                '/protobus.ProtobusService/Subscribe',
                request_serializer=protobus__rpc__pb2.SubscriptionRequest.SerializeToString,
                response_deserializer=protobus__event__pb2.EncapsulatedEvent.FromString,
                )


class ProtobusServiceServicer(object):
    """The main protobus publish/subscribe service
    """

    def Publish(self, request_iterator, context):
        """Publish a stream of events
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """Subscribe to a stream of events
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProtobusServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Publish': grpc.stream_unary_rpc_method_handler(
                    servicer.Publish,
                    request_deserializer=protobus__event__pb2.EncapsulatedEvent.FromString,
                    response_serializer=protobus__rpc__pb2.Status.SerializeToString,
            ),
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=protobus__rpc__pb2.SubscriptionRequest.FromString,
                    response_serializer=protobus__event__pb2.EncapsulatedEvent.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'protobus.ProtobusService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ProtobusService(object):
    """The main protobus publish/subscribe service
    """

    @staticmethod
    def Publish(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/protobus.ProtobusService/Publish',
            protobus__event__pb2.EncapsulatedEvent.SerializeToString,
            protobus__rpc__pb2.Status.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/protobus.ProtobusService/Subscribe',
            protobus__rpc__pb2.SubscriptionRequest.SerializeToString,
            protobus__event__pb2.EncapsulatedEvent.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
