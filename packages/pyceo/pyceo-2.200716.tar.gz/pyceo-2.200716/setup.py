# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['pyceo']

package_data = \
{'': ['*']}

install_requires = \
['colorama>=0.4.3,<0.5.0']

setup_kwargs = {
    'name': 'pyceo',
    'version': '2.200716',
    'description': 'A minimal and ridiculously good looking command-line-interface toolkit',
    'long_description': '<h1>\n<img alt="pyceo" src="https://raw.githubusercontent.com/jpsca/pyceo/master/pyceo.png">\n<a href="https://travis-ci.org/jpsca/pyceo/"><img src="https://travis-ci.org/jpsca/pyceo.svg?branch=master"  alt="Tests" align="right">\n</a>  \n<a href="https://coveralls.io/github/jpsca/pyceo?branch=master"><img src="https://coveralls.io/repos/github/jpsca/pyceo/badge.svg?branch=master" alt="Coverage Status" align="right"></a>\n</h1>\n\n*It looks good and delegates all the real work to you* ;)\n\nA minimal and ridiculously good looking command-line-interface toolkit.\n\nIn four points:\n\n- Completely customizable help page, but pretty by default.\n- Add new commands at any time and from other files.\n- No sub-commands but grouping of commands instead.\n- Easy to use and understand.\n\n\n## An example\n\n![pyceo output](https://github.com/jpsca/pyceo/raw/master/output.png)\n\nThis autogenerated (and completely customizable) help message comes from running\nthe example below:\n\n```python\n# example.py\nfrom pyceo import Manager, param, option\n\n\ncli = Manager("Welcome to Proper v1.2.3")\n\n\n@cli.command(help="Creates a new Proper application at `path`.")\n@param("path", help="Where to create the new application.")\n@option("quiet", help="Supress all output.")\ndef new(path):\n    """The `proper new` command creates a new Proper application with a default\n    directory structure and configuration at the path you specify.\n\n    Example: `proper new ~/Code/blog`\n    This generates a skeletal Proper application at `~/Code/blog`.\n    """\n    pass\n\n\n@cli.command()\n@option("num", type=int)  # Optional type\ndef fizzbuzz(num=3):\n    """A bad fizz buzz."""\n    print("fizz " * num + "buzz")\n\n\n@cli.command(group="db")\n@option("message", help="Revision message")\n@option("sql", help="Dont emit SQL to database - dump to standard output instead")\n@option("head", help="Specify head or <branchname>@head to base new revision on")\ndef migrate(**kwargs):\n    """Autogenerate a new revision file.\n\n    This is an alias for "revision --autogenerate"."""\n    pass\n\n\n@cli.command(group="db")\n@option("name", help="Name of section in .ini file to use for Alembic config")\ndef branches(**kwargs):\n    """Show current branch points.\n    """\n    pass\n\n\nif __name__ == "__main__":\n    # cli.run(default="new")\n    cli.run()\n```\n\n\n## How minimal?\n\n**pyceo** include a `confirm()` and `ask()` utilities, but not any features like progress bars, table formatting, [file editing](https://pypi.org/project/text-editor/), etc. It doesn\'t matter because for those features many dedicated python libraries can be used.\n\nYou could say it *focuses on its core competencies while synergetically interface with other libraries to take it to the next level*. ðŸ’ªðŸš€\n\n\n## Why don\'t just use optparse or argparse?\n\nAre you kidding? Because this is way easier to use and understand.\n\n\n## Why don\'t just use click?\n\nBecause this looks better and is easier to use and understand.\n\n\n## Why don\'t just use...?\n\nBecause this library fits better my mental model. I hope it matches yours as well.\n',
    'author': 'Juan-Pablo Scaletti',
    'author_email': 'juanpablo@jpscaletti.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/jpsca/pyceo',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
