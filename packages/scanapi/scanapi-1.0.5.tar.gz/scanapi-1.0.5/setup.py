# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['scanapi', 'scanapi.evaluators', 'scanapi.tree']

package_data = \
{'': ['*'], 'scanapi': ['templates/*']}

install_requires = \
['click==7.1.2',
 'curlify==2.2.1',
 'jinja2==2.11.2',
 'pyyaml==5.3.1',
 'requests==2.24.0']

entry_points = \
{'console_scripts': ['scanapi = scanapi:main']}

setup_kwargs = {
    'name': 'scanapi',
    'version': '1.0.5',
    'description': 'Automated Testing and Documentation for your REST API',
    'long_description': '![](https://github.com/scanapi/design/raw/master/images/github-hero-dark.png)\n\n<p align="center">\n  <a href="https://app.circleci.com/pipelines/github/scanapi/scanapi?branch=master">\n    <img alt="CircleCI" src="https://img.shields.io/circleci/build/github/scanapi/scanapi">\n  </a>\n  <a href="https://codecov.io/gh/scanapi/scanapi">\n    <img alt="Codecov" src="https://img.shields.io/codecov/c/github/scanapi/scanapi">\n  </a>\n  <a href="https://badge.fury.io/py/scanapi">\n    <img alt="PyPI version" src="https://badge.fury.io/py/scanapi.svg">\n  </a>\n</p>\n\nA library for **your API** that provides:\n\n- Automated Integration Testing\n- Automated Live Documentation\n\nGiven an API specification, written in YAML/JSON format, ScanAPI hits the specified\nendpoints, runs the test cases, and generates a detailed report of this execution - that can be\nalso used as the API documentation itself.\n\nWith almost none Python knowledge, the user can define endpoints to be hit, the expected behaviors\nfor each response, and, as a result, receives a full real-time diagnostic of the API!\n\n## Contents\n\n- [Contents](#contents)\n- [Requirements](#requirements)\n- [How to install](#how-to-install)\n- [Basic Usage](#basic-usage)\n- [Documentation](#documentation)\n  - [ScanAPI CLI](#scanapi-cli)\n  - [API Specification Keys](#api-specification-keys)\n  - [Environment Variables](#environment-variables)\n  - [Custom Variables](#custom-variables)\n  - [Python Code](#python-code)\n  - [Chaining Requests](#chaining-requests)\n  - [API specification in multiple files](#api-specification-in-multiple-files)\n  - [Configuration File](#configuration-file)\n  - [Hiding sensitive information](#hiding-sensitive-information)\n- [Contributing](#contributing)\n\n## Requirements\n\n- [pip][pip-installation]\n\n## How to install\n\n```bash\n$ pip install scanapi\n```\n\n## Basic Usage\n\nYou will need to write the API\'s specification and save it as an **YAML** or **JSON** file.\nFor example:\n\n```yaml\napi:\n  endpoints:\n    - name: scanapi-demo # The API\'s name of your API\n      path: http://demo.scanapi.dev/api/ # The API\'s base url\n      requests:\n        - name: list_all_devs # The name of the fist request\n          path: devs/ # The path of the fist request\n          method: get # The HTTP method of the fist request\n          tests:\n            - name: status_code_is_200 # The name of the first test for this request\n              assert: ${{ response.status_code == 200 }} # The assertion\n```\n\nAnd run the scanapi command\n\n```bash\n$ scanapi <file_path>\n```\n\nThen, the lib will hit the specified endpoints and generate a `scanapi-report.html` file with the\nreport results.\n\n<p align="center">\n  <img\n    src="https://raw.githubusercontent.com/scanapi/scanapi/master/images/report-print-closed.png"\n    width="700",\n    alt="An overview screenshot of the report."\n  >\n  <img\n    src="https://raw.githubusercontent.com/scanapi/scanapi/master/images/report-print-request.png"\n    width="700"\n    alt="A screenshot of the report showing the request details."\n  >\n  <img\n    src="https://raw.githubusercontent.com/scanapi/scanapi/master/images/report-print-response.png"\n    width="700",\n    alt="A screenshot of the report showing the response and test details"\n  >\n</p>\n\nYou can find complete examples at [scanapi/examples][scanapi-examples]!\n\n## Documentation\n\n### ScanAPI CLI\n\n```\n$ scanapi --help\nUsage: scanapi [OPTIONS] [SPEC_PATH]\n\n  Automated Testing and Documentation for your REST API. SPEC_PATH argument\n  is the API specification file path.\n\nOptions:\n  -o, --output-path PATH          Report output path.\n  -c, --config-path PATH          Configuration file path.\n  -t, --template PATH             Custom report template path.\n  -ll, --log-level [DEBUG|INFO|WARNING|ERROR|CRITICAL]\n                                  Set the debug logging level for the program.\n  -h, --help                      Show this message and exit.\n```\n\n### Syntax - API Specification Keys\n\n| KEY              | Description                                                                                         | Type   | Scopes                            |\n| ---------------- | --------------------------------------------------------------------------------------------------- | ------ | --------------------------------- |\n| api              | It is reserver word that marks the root of the specification and must not appear in any other place | dict   | root                              |\n| assert           | The test assertion                                                                                  | dict   | tests                             |\n| body             | The HTTP body of the request                                                                        | dict   | request                           |\n| endpoints        | It represents a list of API endpoints                                                               | list   | endpoint                          |\n| headers          | The HTTP headers                                                                                    | dict   | endpoint, request                 |\n| method           | The HTTP method of the request (GET, POST, PUT, PATCH or DELETE). If not set, GET will be used      | string | request                           |\n| name             | An identifier                                                                                       | string | endpoint, request, test           |\n| params           | The HTTP query parameters                                                                           | dict   | endpoint, request                 |\n| path             | A part of the URL path that will be concatenated with possible other paths                          | string | endpoint, request                 |\n| requests         | It represents a list of HTTP requests                                                               | list   | endpoint                          |\n| tests            | It represents a list of tests to run against a HTTP response of a request                           | list   | request                           |\n| vars             | Key used to define your custom variables to be used along the specification                         | dict   | endpoint, request                 |\n| ${custom var}    | A syntax to get the value of the custom variables defined at key `vars`                             | string | request - after `vars` definition |\n| ${ENV_VAR}       | A syntax to get the value of an environment variable                                                | string | endpoint, request                 |\n| ${{python_code}} | A syntax to get the value of a Python code expression                                               | string | request                           |\n\n\n### Environment Variables\n\nYou can use environment variables in your API spec file with the syntax\n\n```yaml\n${MY_ENV_VAR}\n```\n\nFor example:\n\n```bash\n$ export BASE_URL="http://demo.scanapi.dev/api/"\n```\n\n```yaml\napi:\n  endpoints:\n    - name: scanapi-demo\n      path: ${BASE_URL}\n      requests:\n        - name: health\n          method: get\n          path: /health/\n```\n\nScanAPI would call the following `http://demo.scanapi.dev/api/health/` then.\n\n**Heads up: the variable name must be in upper case.**\n\n### Custom Variables\n\nYou can create custom variables using the syntax:\n\n```yaml\nrequests:\n  - name: my_request\n    ...\n    vars:\n      my_variable_name: my_variable_value\n```\n\nAnd in the next requests you can access them using the syntax:\n\n\n```yaml\n${my_variable_name}\n```\n\n### Python Code\n\nYou can add Python code to the API specification by using the syntax:\n\n```yaml\n${{my_pyhon_code}}\n```\n\nFor example\n\n```yaml\nbody:\n  uuid: 5c5af4f2-2265-4e6c-94b4-d681c1648c38\n  name: Tarik\n  yearsOfExperience: ${{2 + 5}}\n  languages:\n    - ruby\n      go\n  newOpportunities: false\n```\n\nWhat I can use inside the `${{}}` syntax?\nBasically any python code that **can run inside an `eval` python command**.\nA short list of modules will be already available for you. They are all the imports of\n[this file](https://github.com/scanapi/scanapi/blob/master/scanapi/evaluators/code_evaluator.py#L1).\n\n### Chaining Requests\n\nInside the request scope, you can save the results of the resulted response to use in the next\nrequests. For example:\n\n```yaml\nrequests:\n  - name: list_all\n    method: get\n    vars:\n      dev_id: ${{response.json()[2]["uuid"]}}\n```\n\nThe dev_id variable will receive the `uuid` value of the 3rd result from the devs_list_all request\n\nIt the response is\n\n```json\n[\n    {\n        "uuid": "68af402f-1084-40a4-b9b2-6bb5c2d11559",\n        "name": "Anna",\n        "yearsOfExperience": 5,\n        "languages": [\n            "python",\n            "c"\n        ],\n        "newOpportunities": true\n    },\n    {\n        "uuid": "0d1bd106-c585-4d6b-b3a4-d72dedf7190e",\n        "name": "Louis",\n        "yearsOfExperience": 3,\n        "languages": [\n            "java"\n        ],\n        "newOpportunities": true\n    },\n    {\n        "uuid": "129e8cb2-d19c-41ad-9921-cea329bed7f0",\n        "name": "Marcus",\n        "yearsOfExperience": 4,\n        "languages": [\n            "c"\n        ],\n        "newOpportunities": false\n    }\n]\n```\n\nThe dev_id variable will receive the value `129e8cb2-d19c-41ad-9921-cea329bed7f0`\n\n### API specification in multiple files\n\nWith `!include`, it is possible to build your API specification in multiple files.\n\nFor example, these two files\n\n```yaml\n# api.yaml\napi:\n  endpoints:\n    - name: scanapi-demo\n      path: ${BASE_URL}\n      requests: !include include.yaml\n```\n\n```yaml\n# include.yaml\n- name: health\n  path: /health/\n```\n\nwould generate:\n\n```yaml\napi:\n  endpoints:\n    - name: scanapi-demo\n      path: ${BASE_URL}\n      requests:\n        - name: health\n          path: /health/\n```\n\n### Configuration File\n\nIf you want to configure the ScanAPI with a file, you can create a `.scanapi.yaml` file in the root\nof your project\n\n```yaml\nproject_name: DemoAPI # This will be rendered in the Report Title.\nspec_path: my_path/api.yaml # API specification file path\noutput_path: my_path/my-report.html # Report output path.\ntemplate: my_template.jinja # Custom report template path.\n```\n\n### Hiding sensitive information\n\nIf you want to omit sensitive information in the report, you can configure it in the `.scanapi.yaml`\nfile.\n\n```yaml\nreport:\n  hide-request:\n    headers:\n      - Authorization\n```\n\nThe following configuration will print all the headers values for the `Authorization` key for all\nthe request as `SENSITIVE_INFORMATION` in the report.\n\nIn the same way you can omit sensitive information from response.\n\n```yaml\nreport:\n  hide-response:\n    headers:\n      - Authorization\n```\n\nAvailable attributes to hide: `headers`, `body` and `url`.\n\n## Contributing\n\nCollaboration is super welcome! We prepared the [CONTRIBUTING.md][contributing-file] file to help\nyou in the first steps. Every little bit of help counts! Feel free to create new GitHub issues and\ninteract here.\n\nLet\'s built it together 🚀\n\n[contributing-file]: https://github.com/scanapi/scanapi/blob/master/CONTRIBUTING.md\n[pip-installation]: https://pip.pypa.io/en/stable/installing/\n[scanapi-examples]: https://github.com/scanapi/examples\n',
    'author': 'Camila Maia',
    'author_email': 'cmaiacd@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://scanapi.dev/',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
