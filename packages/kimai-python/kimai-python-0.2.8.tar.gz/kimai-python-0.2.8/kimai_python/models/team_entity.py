# coding: utf-8

"""
    Kimai 2 - API Docs

    JSON API for the Kimai 2 time-tracking software. Read more about its usage in the [API documentation](https://www.kimai.org/documentation/rest-api.html) and then download a [Swagger file](doc.json) for import e.g. in Postman. Be aware: it is not yet considered stable and BC breaks might happen, especially when using code generation. The order of JSON attributes is not guaranteed.   # noqa: E501

    OpenAPI spec version: 0.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TeamEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'teamlead': 'User',
        'users': 'list[User]',
        'customers': 'list[Customer]',
        'projects': 'list[Project]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'teamlead': 'teamlead',
        'users': 'users',
        'customers': 'customers',
        'projects': 'projects'
    }

    def __init__(self, id=None, name=None, teamlead=None, users=None, customers=None, projects=None):  # noqa: E501
        """TeamEntity - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._teamlead = None
        self._users = None
        self._customers = None
        self._projects = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        self.teamlead = teamlead
        if users is not None:
            self.users = users
        if customers is not None:
            self.customers = customers
        if projects is not None:
            self.projects = projects

    @property
    def id(self):
        """Gets the id of this TeamEntity.  # noqa: E501


        :return: The id of this TeamEntity.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TeamEntity.


        :param id: The id of this TeamEntity.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this TeamEntity.  # noqa: E501


        :return: The name of this TeamEntity.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TeamEntity.


        :param name: The name of this TeamEntity.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501
        if name is not None and len(name) < 2:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `2`")  # noqa: E501

        self._name = name

    @property
    def teamlead(self):
        """Gets the teamlead of this TeamEntity.  # noqa: E501


        :return: The teamlead of this TeamEntity.  # noqa: E501
        :rtype: User
        """
        return self._teamlead

    @teamlead.setter
    def teamlead(self, teamlead):
        """Sets the teamlead of this TeamEntity.


        :param teamlead: The teamlead of this TeamEntity.  # noqa: E501
        :type: User
        """
        if teamlead is None:
            raise ValueError("Invalid value for `teamlead`, must not be `None`")  # noqa: E501

        self._teamlead = teamlead

    @property
    def users(self):
        """Gets the users of this TeamEntity.  # noqa: E501

        All team member, including the teamlead  # noqa: E501

        :return: The users of this TeamEntity.  # noqa: E501
        :rtype: list[User]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this TeamEntity.

        All team member, including the teamlead  # noqa: E501

        :param users: The users of this TeamEntity.  # noqa: E501
        :type: list[User]
        """

        self._users = users

    @property
    def customers(self):
        """Gets the customers of this TeamEntity.  # noqa: E501

        All customers assigned to the team  # noqa: E501

        :return: The customers of this TeamEntity.  # noqa: E501
        :rtype: list[Customer]
        """
        return self._customers

    @customers.setter
    def customers(self, customers):
        """Sets the customers of this TeamEntity.

        All customers assigned to the team  # noqa: E501

        :param customers: The customers of this TeamEntity.  # noqa: E501
        :type: list[Customer]
        """

        self._customers = customers

    @property
    def projects(self):
        """Gets the projects of this TeamEntity.  # noqa: E501

        All projects assigned to the team  # noqa: E501

        :return: The projects of this TeamEntity.  # noqa: E501
        :rtype: list[Project]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this TeamEntity.

        All projects assigned to the team  # noqa: E501

        :param projects: The projects of this TeamEntity.  # noqa: E501
        :type: list[Project]
        """

        self._projects = projects

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TeamEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TeamEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
