# coding: utf-8

"""
    Kimai 2 - API Docs

    JSON API for the Kimai 2 time-tracking software. Read more about its usage in the [API documentation](https://www.kimai.org/documentation/rest-api.html) and then download a [Swagger file](doc.json) for import e.g. in Postman. Be aware: it is not yet considered stable and BC breaks might happen, especially when using code generation. The order of JSON attributes is not guaranteed.   # noqa: E501

    OpenAPI spec version: 0.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TimesheetConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tracking_mode': 'str',
        'default_begin_time': 'str',
        'active_entries_hard_limit': 'int',
        'active_entries_soft_limit': 'int',
        'is_allow_future_times': 'bool',
        'is_allow_overlapping': 'bool'
    }

    attribute_map = {
        'tracking_mode': 'trackingMode',
        'default_begin_time': 'defaultBeginTime',
        'active_entries_hard_limit': 'activeEntriesHardLimit',
        'active_entries_soft_limit': 'activeEntriesSoftLimit',
        'is_allow_future_times': 'isAllowFutureTimes',
        'is_allow_overlapping': 'isAllowOverlapping'
    }

    def __init__(self, tracking_mode=None, default_begin_time=None, active_entries_hard_limit=None, active_entries_soft_limit=None, is_allow_future_times=None, is_allow_overlapping=None):  # noqa: E501
        """TimesheetConfig - a model defined in Swagger"""  # noqa: E501

        self._tracking_mode = None
        self._default_begin_time = None
        self._active_entries_hard_limit = None
        self._active_entries_soft_limit = None
        self._is_allow_future_times = None
        self._is_allow_overlapping = None
        self.discriminator = None

        if tracking_mode is not None:
            self.tracking_mode = tracking_mode
        if default_begin_time is not None:
            self.default_begin_time = default_begin_time
        if active_entries_hard_limit is not None:
            self.active_entries_hard_limit = active_entries_hard_limit
        if active_entries_soft_limit is not None:
            self.active_entries_soft_limit = active_entries_soft_limit
        if is_allow_future_times is not None:
            self.is_allow_future_times = is_allow_future_times
        if is_allow_overlapping is not None:
            self.is_allow_overlapping = is_allow_overlapping

    @property
    def tracking_mode(self):
        """Gets the tracking_mode of this TimesheetConfig.  # noqa: E501


        :return: The tracking_mode of this TimesheetConfig.  # noqa: E501
        :rtype: str
        """
        return self._tracking_mode

    @tracking_mode.setter
    def tracking_mode(self, tracking_mode):
        """Sets the tracking_mode of this TimesheetConfig.


        :param tracking_mode: The tracking_mode of this TimesheetConfig.  # noqa: E501
        :type: str
        """

        self._tracking_mode = tracking_mode

    @property
    def default_begin_time(self):
        """Gets the default_begin_time of this TimesheetConfig.  # noqa: E501


        :return: The default_begin_time of this TimesheetConfig.  # noqa: E501
        :rtype: str
        """
        return self._default_begin_time

    @default_begin_time.setter
    def default_begin_time(self, default_begin_time):
        """Sets the default_begin_time of this TimesheetConfig.


        :param default_begin_time: The default_begin_time of this TimesheetConfig.  # noqa: E501
        :type: str
        """

        self._default_begin_time = default_begin_time

    @property
    def active_entries_hard_limit(self):
        """Gets the active_entries_hard_limit of this TimesheetConfig.  # noqa: E501


        :return: The active_entries_hard_limit of this TimesheetConfig.  # noqa: E501
        :rtype: int
        """
        return self._active_entries_hard_limit

    @active_entries_hard_limit.setter
    def active_entries_hard_limit(self, active_entries_hard_limit):
        """Sets the active_entries_hard_limit of this TimesheetConfig.


        :param active_entries_hard_limit: The active_entries_hard_limit of this TimesheetConfig.  # noqa: E501
        :type: int
        """

        self._active_entries_hard_limit = active_entries_hard_limit

    @property
    def active_entries_soft_limit(self):
        """Gets the active_entries_soft_limit of this TimesheetConfig.  # noqa: E501


        :return: The active_entries_soft_limit of this TimesheetConfig.  # noqa: E501
        :rtype: int
        """
        return self._active_entries_soft_limit

    @active_entries_soft_limit.setter
    def active_entries_soft_limit(self, active_entries_soft_limit):
        """Sets the active_entries_soft_limit of this TimesheetConfig.


        :param active_entries_soft_limit: The active_entries_soft_limit of this TimesheetConfig.  # noqa: E501
        :type: int
        """

        self._active_entries_soft_limit = active_entries_soft_limit

    @property
    def is_allow_future_times(self):
        """Gets the is_allow_future_times of this TimesheetConfig.  # noqa: E501


        :return: The is_allow_future_times of this TimesheetConfig.  # noqa: E501
        :rtype: bool
        """
        return self._is_allow_future_times

    @is_allow_future_times.setter
    def is_allow_future_times(self, is_allow_future_times):
        """Sets the is_allow_future_times of this TimesheetConfig.


        :param is_allow_future_times: The is_allow_future_times of this TimesheetConfig.  # noqa: E501
        :type: bool
        """

        self._is_allow_future_times = is_allow_future_times

    @property
    def is_allow_overlapping(self):
        """Gets the is_allow_overlapping of this TimesheetConfig.  # noqa: E501


        :return: The is_allow_overlapping of this TimesheetConfig.  # noqa: E501
        :rtype: bool
        """
        return self._is_allow_overlapping

    @is_allow_overlapping.setter
    def is_allow_overlapping(self, is_allow_overlapping):
        """Sets the is_allow_overlapping of this TimesheetConfig.


        :param is_allow_overlapping: The is_allow_overlapping of this TimesheetConfig.  # noqa: E501
        :type: bool
        """

        self._is_allow_overlapping = is_allow_overlapping

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimesheetConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimesheetConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
