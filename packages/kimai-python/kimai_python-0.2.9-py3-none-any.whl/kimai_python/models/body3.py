# coding: utf-8

"""
    Kimai 2 - API Docs

    JSON API for the Kimai 2 time-tracking software. Read more about its usage in the [API documentation](https://www.kimai.org/documentation/rest-api.html) and then download a [Swagger file](doc.json) for import e.g. in Postman. Be aware: it is not yet considered stable and BC breaks might happen, especially when using code generation. The order of JSON attributes is not guaranteed.   # noqa: E501

    OpenAPI spec version: 0.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Body3(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copy': 'str'
    }

    attribute_map = {
        'copy': 'copy'
    }

    def __init__(self, copy=None):  # noqa: E501
        """Body3 - a model defined in Swagger"""  # noqa: E501

        self._copy = None
        self.discriminator = None

        if copy is not None:
            self.copy = copy

    @property
    def copy(self):
        """Gets the copy of this Body3.  # noqa: E501

        Whether data should be copied to the new entry. Allowed values: all, tags, rates, description, meta (default: nothing is copied)  # noqa: E501

        :return: The copy of this Body3.  # noqa: E501
        :rtype: str
        """
        return self._copy

    @copy.setter
    def copy(self, copy):
        """Sets the copy of this Body3.

        Whether data should be copied to the new entry. Allowed values: all, tags, rates, description, meta (default: nothing is copied)  # noqa: E501

        :param copy: The copy of this Body3.  # noqa: E501
        :type: str
        """
        if copy is not None and not re.search(r'all|tags|rates|meta|description', copy):  # noqa: E501
            raise ValueError(r"Invalid value for `copy`, must be a follow pattern or equal to `/all|tags|rates|meta|description/`")  # noqa: E501

        self._copy = copy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body3, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body3):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
