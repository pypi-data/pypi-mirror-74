# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkAdditiveGaussianNoiseMeshFilterPython
else:
    import _itkAdditiveGaussianNoiseMeshFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkAdditiveGaussianNoiseMeshFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkAdditiveGaussianNoiseMeshFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itkPointPython
import itkFixedArrayPython
import pyBasePython
import vnl_vector_refPython
import stdcomplexPython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import itkBoundingBoxPython
import itkVectorContainerPython
import ITKCommonBasePython
import itkOffsetPython
import itkSizePython
import itkContinuousIndexPython
import itkIndexPython
import itkMatrixPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkMapContainerPython
import itkMeshBasePython
import itkPointSetPython
import itkArrayPython

def itkPointSetD3DTD3_New():
  return itkPointSetD3DTD3.New()


def itkPointSetF3DTF3_New():
  return itkPointSetF3DTF3.New()


def itkPointSetD2DTD2_New():
  return itkPointSetD2DTD2.New()


def itkPointSetF2DTF2_New():
  return itkPointSetF2DTF2.New()


def itkMeshD3DTD3_New():
  return itkMeshD3DTD3.New()


def itkMeshF3DTF3_New():
  return itkMeshF3DTF3.New()


def itkMeshD2DTD2_New():
  return itkMeshD2DTD2.New()


def itkMeshF2DTF2_New():
  return itkMeshF2DTF2.New()


def itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_New():
  return itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3.New()


def itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_New():
  return itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass.New()


def itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass_New():
  return itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass.New()


def itkAdditiveGaussianNoiseMeshFilterMD3MD3_New():
  return itkAdditiveGaussianNoiseMeshFilterMD3MD3.New()


def itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_New():
  return itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass.New()


def itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass_New():
  return itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass.New()


def itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_New():
  return itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3.New()


def itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_New():
  return itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass.New()


def itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass_New():
  return itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass.New()


def itkAdditiveGaussianNoiseMeshFilterMF3MF3_New():
  return itkAdditiveGaussianNoiseMeshFilterMF3MF3.New()


def itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_New():
  return itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass.New()


def itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass_New():
  return itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass.New()


def itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_New():
  return itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2.New()


def itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_New():
  return itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass.New()


def itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass_New():
  return itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass.New()


def itkAdditiveGaussianNoiseMeshFilterMD2MD2_New():
  return itkAdditiveGaussianNoiseMeshFilterMD2MD2.New()


def itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_New():
  return itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass.New()


def itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass_New():
  return itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass.New()


def itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_New():
  return itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2.New()


def itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_New():
  return itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass.New()


def itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass_New():
  return itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass.New()


def itkAdditiveGaussianNoiseMeshFilterMF2MF2_New():
  return itkAdditiveGaussianNoiseMeshFilterMF2MF2.New()


def itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_New():
  return itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass.New()


def itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass_New():
  return itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass.New()

class itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass(ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass_Clone)
    GetOutput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass_GetOutput)
    SetOutput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass_SetOutput)
    GraftOutput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass_GraftNthOutput)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass
    cast = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass)
itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass___New_orig__ = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass___New_orig__
itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass_cast = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass_cast

class itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass(ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass_Clone)
    GetOutput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass_GetOutput)
    SetOutput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass_SetOutput)
    GraftOutput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass_GraftNthOutput)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass
    cast = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass)
itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass___New_orig__ = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass___New_orig__
itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass_cast = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass_cast

class itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass(ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass_Clone)
    GetOutput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass_GetOutput)
    SetOutput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass_SetOutput)
    GraftOutput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass_GraftNthOutput)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass
    cast = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass)
itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass___New_orig__ = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass___New_orig__
itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass_cast = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass_cast

class itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass(ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass_Clone)
    GetOutput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass_GetOutput)
    SetOutput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass_SetOutput)
    GraftOutput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass_GraftNthOutput)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass
    cast = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass)
itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass___New_orig__ = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass___New_orig__
itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass_cast = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass_cast

class itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass(ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass_Clone)
    GetOutput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass_GetOutput)
    SetOutput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass_SetOutput)
    GraftOutput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass_GraftNthOutput)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass
    cast = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass)
itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass___New_orig__ = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass___New_orig__
itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass_cast = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass_cast

class itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass(ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass_Clone)
    GetOutput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass_GetOutput)
    SetOutput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass_SetOutput)
    GraftOutput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass_GraftNthOutput)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass
    cast = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass)
itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass___New_orig__ = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass___New_orig__
itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass_cast = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass_cast

class itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass(ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass_Clone)
    GetOutput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass_GetOutput)
    SetOutput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass_SetOutput)
    GraftOutput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass_GraftNthOutput)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass
    cast = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass)
itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass___New_orig__ = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass___New_orig__
itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass_cast = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass_cast

class itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass(ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass_Clone)
    GetOutput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass_GetOutput)
    SetOutput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass_SetOutput)
    GraftOutput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass_GraftNthOutput)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass
    cast = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass)
itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass___New_orig__ = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass___New_orig__
itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass_cast = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass_cast

class itkPointSetD2DTD2(ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetD2DTD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD2DTD2___New_orig__)
    Clone = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD2DTD2_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD2DTD2_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD2DTD2_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD2DTD2_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD2DTD2_SetPoints)
    GetPoints = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD2DTD2_GetPoints)
    SetPoint = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD2DTD2_SetPoint)
    GetPoint = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD2DTD2_GetPoint)
    SetPointData = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD2DTD2_SetPointData)
    GetPointData = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD2DTD2_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD2DTD2_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD2DTD2_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD2DTD2_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD2DTD2_GetBufferedRegion)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkPointSetD2DTD2
    cast = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD2DTD2_cast)

    def New(*args, **kargs):
        """New() -> itkPointSetD2DTD2

        Create a new object of the class itkPointSetD2DTD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetD2DTD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPointSetD2DTD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPointSetD2DTD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetD2DTD2 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD2DTD2_swigregister(itkPointSetD2DTD2)
itkPointSetD2DTD2___New_orig__ = _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD2DTD2___New_orig__
itkPointSetD2DTD2_cast = _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD2DTD2_cast

class itkPointSetD3DTD3(ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetD3DTD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD3DTD3___New_orig__)
    Clone = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD3DTD3_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD3DTD3_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD3DTD3_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD3DTD3_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD3DTD3_SetPoints)
    GetPoints = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD3DTD3_GetPoints)
    SetPoint = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD3DTD3_SetPoint)
    GetPoint = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD3DTD3_GetPoint)
    SetPointData = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD3DTD3_SetPointData)
    GetPointData = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD3DTD3_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD3DTD3_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD3DTD3_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD3DTD3_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD3DTD3_GetBufferedRegion)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkPointSetD3DTD3
    cast = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD3DTD3_cast)

    def New(*args, **kargs):
        """New() -> itkPointSetD3DTD3

        Create a new object of the class itkPointSetD3DTD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetD3DTD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPointSetD3DTD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPointSetD3DTD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetD3DTD3 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD3DTD3_swigregister(itkPointSetD3DTD3)
itkPointSetD3DTD3___New_orig__ = _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD3DTD3___New_orig__
itkPointSetD3DTD3_cast = _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD3DTD3_cast

class itkPointSetF2DTF2(ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetF2DTF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF2DTF2___New_orig__)
    Clone = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF2DTF2_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF2DTF2_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF2DTF2_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF2DTF2_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF2DTF2_SetPoints)
    GetPoints = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF2DTF2_GetPoints)
    SetPoint = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF2DTF2_SetPoint)
    GetPoint = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF2DTF2_GetPoint)
    SetPointData = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF2DTF2_SetPointData)
    GetPointData = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF2DTF2_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF2DTF2_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF2DTF2_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF2DTF2_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF2DTF2_GetBufferedRegion)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkPointSetF2DTF2
    cast = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF2DTF2_cast)

    def New(*args, **kargs):
        """New() -> itkPointSetF2DTF2

        Create a new object of the class itkPointSetF2DTF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetF2DTF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPointSetF2DTF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPointSetF2DTF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetF2DTF2 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF2DTF2_swigregister(itkPointSetF2DTF2)
itkPointSetF2DTF2___New_orig__ = _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF2DTF2___New_orig__
itkPointSetF2DTF2_cast = _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF2DTF2_cast

class itkPointSetF3DTF3(ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetF3DTF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF3DTF3___New_orig__)
    Clone = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF3DTF3_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF3DTF3_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF3DTF3_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF3DTF3_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF3DTF3_SetPoints)
    GetPoints = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF3DTF3_GetPoints)
    SetPoint = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF3DTF3_SetPoint)
    GetPoint = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF3DTF3_GetPoint)
    SetPointData = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF3DTF3_SetPointData)
    GetPointData = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF3DTF3_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF3DTF3_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF3DTF3_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF3DTF3_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF3DTF3_GetBufferedRegion)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkPointSetF3DTF3
    cast = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF3DTF3_cast)

    def New(*args, **kargs):
        """New() -> itkPointSetF3DTF3

        Create a new object of the class itkPointSetF3DTF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetF3DTF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPointSetF3DTF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPointSetF3DTF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetF3DTF3 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF3DTF3_swigregister(itkPointSetF3DTF3)
itkPointSetF3DTF3___New_orig__ = _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF3DTF3___New_orig__
itkPointSetF3DTF3_cast = _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF3DTF3_cast

class itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass(itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_GetInput)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass
    cast = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass)
itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass___New_orig__ = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass___New_orig__
itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_cast = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_cast

class itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass(itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_GetInput)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass
    cast = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass)
itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass___New_orig__ = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass___New_orig__
itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_cast = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_cast

class itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass(itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_GetInput)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass
    cast = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass)
itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass___New_orig__ = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass___New_orig__
itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_cast = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_cast

class itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass(itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_GetInput)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass
    cast = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass)
itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass___New_orig__ = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass___New_orig__
itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_cast = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_cast

class itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass(itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_GetInput)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass
    cast = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass)
itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass___New_orig__ = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass___New_orig__
itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_cast = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_cast

class itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass(itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_GetInput)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass
    cast = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass)
itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass___New_orig__ = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass___New_orig__
itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_cast = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_cast

class itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass(itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_GetInput)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass
    cast = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass)
itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass___New_orig__ = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass___New_orig__
itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_cast = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_cast

class itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass(itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_GetInput)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass
    cast = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass)
itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass___New_orig__ = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass___New_orig__
itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_cast = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_cast

class itkMeshD2DTD2(itkPointSetD2DTD2):
    r"""Proxy of C++ itkMeshD2DTD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2___New_orig__)
    Clone = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_Clone)
    GetNumberOfCells = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_GetNumberOfCells)
    PassStructure = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_PassStructure)
    GetBoundingBox = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_GetBoundingBox)
    SetCellLinks = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_SetCellLinks)
    GetCellLinks = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_GetCellLinks)
    SetCells = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_SetCells)
    GetCells = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_GetCells)
    DeleteUnusedCellData = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_DeleteUnusedCellData)
    SetCell = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_SetCell)
    GetCell = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_GetCell)
    SetCellData = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_SetCellData)
    GetCellData = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_GetCellData)
    SetBoundaryAssignment = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_SetBoundaryAssignment)
    GetBoundaryAssignment = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_GetBoundaryAssignment)
    RemoveBoundaryAssignment = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_RemoveBoundaryAssignment)
    GetNumberOfCellBoundaryFeatures = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_GetNumberOfCellBoundaryFeatures)
    GetCellBoundaryFeature = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_GetCellBoundaryFeature)
    GetCellBoundaryFeatureNeighbors = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_GetCellBoundaryFeatureNeighbors)
    GetCellNeighbors = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_GetCellNeighbors)
    GetAssignedCellBoundaryIfOneExists = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_GetAssignedCellBoundaryIfOneExists)
    BuildCellLinks = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_BuildCellLinks)
    Accept = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_Accept)
    SetCellsAllocationMethod = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_SetCellsAllocationMethod)
    GetCellsAllocationMethod = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_GetCellsAllocationMethod)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkMeshD2DTD2
    cast = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_cast)

    def New(*args, **kargs):
        """New() -> itkMeshD2DTD2

        Create a new object of the class itkMeshD2DTD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshD2DTD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMeshD2DTD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMeshD2DTD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshD2DTD2 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_swigregister(itkMeshD2DTD2)
itkMeshD2DTD2___New_orig__ = _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2___New_orig__
itkMeshD2DTD2_cast = _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_cast

class itkMeshD3DTD3(itkPointSetD3DTD3):
    r"""Proxy of C++ itkMeshD3DTD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3___New_orig__)
    Clone = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_Clone)
    GetNumberOfCells = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_GetNumberOfCells)
    PassStructure = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_PassStructure)
    GetBoundingBox = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_GetBoundingBox)
    SetCellLinks = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_SetCellLinks)
    GetCellLinks = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_GetCellLinks)
    SetCells = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_SetCells)
    GetCells = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_GetCells)
    DeleteUnusedCellData = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_DeleteUnusedCellData)
    SetCell = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_SetCell)
    GetCell = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_GetCell)
    SetCellData = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_SetCellData)
    GetCellData = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_GetCellData)
    SetBoundaryAssignment = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_SetBoundaryAssignment)
    GetBoundaryAssignment = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_GetBoundaryAssignment)
    RemoveBoundaryAssignment = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_RemoveBoundaryAssignment)
    GetNumberOfCellBoundaryFeatures = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_GetNumberOfCellBoundaryFeatures)
    GetCellBoundaryFeature = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_GetCellBoundaryFeature)
    GetCellBoundaryFeatureNeighbors = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_GetCellBoundaryFeatureNeighbors)
    GetCellNeighbors = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_GetCellNeighbors)
    GetAssignedCellBoundaryIfOneExists = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_GetAssignedCellBoundaryIfOneExists)
    BuildCellLinks = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_BuildCellLinks)
    Accept = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_Accept)
    SetCellsAllocationMethod = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_SetCellsAllocationMethod)
    GetCellsAllocationMethod = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_GetCellsAllocationMethod)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkMeshD3DTD3
    cast = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_cast)

    def New(*args, **kargs):
        """New() -> itkMeshD3DTD3

        Create a new object of the class itkMeshD3DTD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshD3DTD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMeshD3DTD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMeshD3DTD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshD3DTD3 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_swigregister(itkMeshD3DTD3)
itkMeshD3DTD3___New_orig__ = _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3___New_orig__
itkMeshD3DTD3_cast = _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_cast

class itkMeshF2DTF2(itkPointSetF2DTF2):
    r"""Proxy of C++ itkMeshF2DTF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2___New_orig__)
    Clone = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_Clone)
    GetNumberOfCells = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_GetNumberOfCells)
    PassStructure = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_PassStructure)
    GetBoundingBox = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_GetBoundingBox)
    SetCellLinks = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_SetCellLinks)
    GetCellLinks = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_GetCellLinks)
    SetCells = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_SetCells)
    GetCells = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_GetCells)
    DeleteUnusedCellData = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_DeleteUnusedCellData)
    SetCell = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_SetCell)
    GetCell = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_GetCell)
    SetCellData = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_SetCellData)
    GetCellData = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_GetCellData)
    SetBoundaryAssignment = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_SetBoundaryAssignment)
    GetBoundaryAssignment = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_GetBoundaryAssignment)
    RemoveBoundaryAssignment = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_RemoveBoundaryAssignment)
    GetNumberOfCellBoundaryFeatures = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_GetNumberOfCellBoundaryFeatures)
    GetCellBoundaryFeature = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_GetCellBoundaryFeature)
    GetCellBoundaryFeatureNeighbors = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_GetCellBoundaryFeatureNeighbors)
    GetCellNeighbors = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_GetCellNeighbors)
    GetAssignedCellBoundaryIfOneExists = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_GetAssignedCellBoundaryIfOneExists)
    BuildCellLinks = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_BuildCellLinks)
    Accept = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_Accept)
    SetCellsAllocationMethod = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_SetCellsAllocationMethod)
    GetCellsAllocationMethod = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_GetCellsAllocationMethod)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkMeshF2DTF2
    cast = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_cast)

    def New(*args, **kargs):
        """New() -> itkMeshF2DTF2

        Create a new object of the class itkMeshF2DTF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshF2DTF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMeshF2DTF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMeshF2DTF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshF2DTF2 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_swigregister(itkMeshF2DTF2)
itkMeshF2DTF2___New_orig__ = _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2___New_orig__
itkMeshF2DTF2_cast = _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_cast

class itkMeshF3DTF3(itkPointSetF3DTF3):
    r"""Proxy of C++ itkMeshF3DTF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3___New_orig__)
    Clone = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_Clone)
    GetNumberOfCells = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_GetNumberOfCells)
    PassStructure = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_PassStructure)
    GetBoundingBox = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_GetBoundingBox)
    SetCellLinks = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_SetCellLinks)
    GetCellLinks = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_GetCellLinks)
    SetCells = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_SetCells)
    GetCells = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_GetCells)
    DeleteUnusedCellData = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_DeleteUnusedCellData)
    SetCell = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_SetCell)
    GetCell = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_GetCell)
    SetCellData = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_SetCellData)
    GetCellData = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_GetCellData)
    SetBoundaryAssignment = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_SetBoundaryAssignment)
    GetBoundaryAssignment = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_GetBoundaryAssignment)
    RemoveBoundaryAssignment = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_RemoveBoundaryAssignment)
    GetNumberOfCellBoundaryFeatures = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_GetNumberOfCellBoundaryFeatures)
    GetCellBoundaryFeature = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_GetCellBoundaryFeature)
    GetCellBoundaryFeatureNeighbors = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_GetCellBoundaryFeatureNeighbors)
    GetCellNeighbors = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_GetCellNeighbors)
    GetAssignedCellBoundaryIfOneExists = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_GetAssignedCellBoundaryIfOneExists)
    BuildCellLinks = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_BuildCellLinks)
    Accept = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_Accept)
    SetCellsAllocationMethod = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_SetCellsAllocationMethod)
    GetCellsAllocationMethod = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_GetCellsAllocationMethod)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkMeshF3DTF3
    cast = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_cast)

    def New(*args, **kargs):
        """New() -> itkMeshF3DTF3

        Create a new object of the class itkMeshF3DTF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshF3DTF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMeshF3DTF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMeshF3DTF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshF3DTF3 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_swigregister(itkMeshF3DTF3)
itkMeshF3DTF3___New_orig__ = _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3___New_orig__
itkMeshF3DTF3_cast = _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_cast

class itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2(itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2___New_orig__)
    Clone = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Clone)
    GetMean = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_GetMean)
    SetMean = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_SetMean)
    GetSigma = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_GetSigma)
    SetSigma = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_SetSigma)
    GetSeed = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_GetSeed)
    SetSeed = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_SetSeed)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2
    cast = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_cast)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_swigregister(itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2)
itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2___New_orig__ = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2___New_orig__
itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_cast = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_cast

class itkAdditiveGaussianNoiseMeshFilterMD2MD2(itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMD2MD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2___New_orig__)
    Clone = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_Clone)
    GetMean = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_GetMean)
    SetMean = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_SetMean)
    GetSigma = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_GetSigma)
    SetSigma = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_SetSigma)
    GetSeed = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_GetSeed)
    SetSeed = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_SetSeed)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMD2MD2
    cast = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_cast)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMD2MD2

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMD2MD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMD2MD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMD2MD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMD2MD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMD2MD2 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_swigregister(itkAdditiveGaussianNoiseMeshFilterMD2MD2)
itkAdditiveGaussianNoiseMeshFilterMD2MD2___New_orig__ = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2___New_orig__
itkAdditiveGaussianNoiseMeshFilterMD2MD2_cast = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_cast

class itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3(itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3___New_orig__)
    Clone = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Clone)
    GetMean = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_GetMean)
    SetMean = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_SetMean)
    GetSigma = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_GetSigma)
    SetSigma = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_SetSigma)
    GetSeed = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_GetSeed)
    SetSeed = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_SetSeed)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3
    cast = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_cast)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_swigregister(itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3)
itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3___New_orig__ = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3___New_orig__
itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_cast = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_cast

class itkAdditiveGaussianNoiseMeshFilterMD3MD3(itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMD3MD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3___New_orig__)
    Clone = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_Clone)
    GetMean = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_GetMean)
    SetMean = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_SetMean)
    GetSigma = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_GetSigma)
    SetSigma = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_SetSigma)
    GetSeed = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_GetSeed)
    SetSeed = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_SetSeed)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMD3MD3
    cast = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_cast)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMD3MD3

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMD3MD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMD3MD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMD3MD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMD3MD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMD3MD3 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_swigregister(itkAdditiveGaussianNoiseMeshFilterMD3MD3)
itkAdditiveGaussianNoiseMeshFilterMD3MD3___New_orig__ = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3___New_orig__
itkAdditiveGaussianNoiseMeshFilterMD3MD3_cast = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_cast

class itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2(itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2___New_orig__)
    Clone = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Clone)
    GetMean = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_GetMean)
    SetMean = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_SetMean)
    GetSigma = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_GetSigma)
    SetSigma = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_SetSigma)
    GetSeed = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_GetSeed)
    SetSeed = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_SetSeed)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2
    cast = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_cast)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_swigregister(itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2)
itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2___New_orig__ = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2___New_orig__
itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_cast = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_cast

class itkAdditiveGaussianNoiseMeshFilterMF2MF2(itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMF2MF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2___New_orig__)
    Clone = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_Clone)
    GetMean = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_GetMean)
    SetMean = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_SetMean)
    GetSigma = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_GetSigma)
    SetSigma = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_SetSigma)
    GetSeed = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_GetSeed)
    SetSeed = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_SetSeed)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMF2MF2
    cast = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_cast)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMF2MF2

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMF2MF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMF2MF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMF2MF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMF2MF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMF2MF2 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_swigregister(itkAdditiveGaussianNoiseMeshFilterMF2MF2)
itkAdditiveGaussianNoiseMeshFilterMF2MF2___New_orig__ = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2___New_orig__
itkAdditiveGaussianNoiseMeshFilterMF2MF2_cast = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_cast

class itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3(itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3___New_orig__)
    Clone = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Clone)
    GetMean = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_GetMean)
    SetMean = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_SetMean)
    GetSigma = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_GetSigma)
    SetSigma = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_SetSigma)
    GetSeed = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_GetSeed)
    SetSeed = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_SetSeed)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3
    cast = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_cast)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_swigregister(itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3)
itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3___New_orig__ = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3___New_orig__
itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_cast = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_cast

class itkAdditiveGaussianNoiseMeshFilterMF3MF3(itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMF3MF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3___New_orig__)
    Clone = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_Clone)
    GetMean = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_GetMean)
    SetMean = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_SetMean)
    GetSigma = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_GetSigma)
    SetSigma = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_SetSigma)
    GetSeed = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_GetSeed)
    SetSeed = _swig_new_instance_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_SetSeed)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMF3MF3
    cast = _swig_new_static_method(_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_cast)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMF3MF3

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMF3MF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMF3MF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMF3MF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMF3MF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMF3MF3 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_swigregister(itkAdditiveGaussianNoiseMeshFilterMF3MF3)
itkAdditiveGaussianNoiseMeshFilterMF3MF3___New_orig__ = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3___New_orig__
itkAdditiveGaussianNoiseMeshFilterMF3MF3_cast = _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def mesh_source(*args, **kwargs):
    """Procedural interface for MeshSource"""
    import itk
    instance = itk.MeshSource.New(*args, **kwargs)
    return instance.__internal_call__()

def mesh_source_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.MeshSource, itkTemplate.itkTemplate):
        filter_object = itk.MeshSource.values()[0]
    else:
        filter_object = itk.MeshSource

    mesh_source.__doc__ = filter_object.__doc__
    mesh_source.__doc__ += "\n Args are Input(s) to the filter.\n"
    mesh_source.__doc__ += "Available Keyword Arguments:\n"
    mesh_source.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def mesh_to_mesh_filter(*args, **kwargs):
    """Procedural interface for MeshToMeshFilter"""
    import itk
    instance = itk.MeshToMeshFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def mesh_to_mesh_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.MeshToMeshFilter, itkTemplate.itkTemplate):
        filter_object = itk.MeshToMeshFilter.values()[0]
    else:
        filter_object = itk.MeshToMeshFilter

    mesh_to_mesh_filter.__doc__ = filter_object.__doc__
    mesh_to_mesh_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    mesh_to_mesh_filter.__doc__ += "Available Keyword Arguments:\n"
    mesh_to_mesh_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def additive_gaussian_noise_mesh_filter(*args, **kwargs):
    """Procedural interface for AdditiveGaussianNoiseMeshFilter"""
    import itk
    instance = itk.AdditiveGaussianNoiseMeshFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def additive_gaussian_noise_mesh_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.AdditiveGaussianNoiseMeshFilter, itkTemplate.itkTemplate):
        filter_object = itk.AdditiveGaussianNoiseMeshFilter.values()[0]
    else:
        filter_object = itk.AdditiveGaussianNoiseMeshFilter

    additive_gaussian_noise_mesh_filter.__doc__ = filter_object.__doc__
    additive_gaussian_noise_mesh_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    additive_gaussian_noise_mesh_filter.__doc__ += "Available Keyword Arguments:\n"
    additive_gaussian_noise_mesh_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



